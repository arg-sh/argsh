#!/usr/bin/env bash
# shellcheck disable=SC2178 disable=SC2120 disable=SC1090
: "${ARGSH_FIELD_WIDTH:=24}";: "${ARGSH_PATH_IMPORT:=${BASH_SOURCE[0]%/*}}";:usage() { local a28="${1}"; shift;declare -p a24 &>/dev/null || local -a a24=();declare -p a42 &>/dev/null || local -a a42=();[[ $(( ${#a24[@]} % 2 )) -eq 0 ]] || :a42::_error "usage must be an associative array";if [[ -z ${1:-} || ${1} == "-h" || ${1} == "--help" ]]; then :a24::text "${a28}";exit 0;fi;local -A a29=();local -a a58=("${@}");local a55 a21;while (( ${#a58[@]} )); do if [[ ${a58[0]:0:1} != "-" ]]; then [[ -z "${a55:-}" ]] || break;a55="${a58[0]}";a58=("${a58[@]:1}");continue;fi;:a42::parse-flag || break;a29["${a21}"]=1;done;:a42::check-required-flags;local a37;for (( a59=0; a59 < ${#a24[@]}; a59+=2 )); do for a17 in $(echo "${a24[a59]/:*}" | tr '|' "\n"); do a17="${a17#\#}";[[ "${a55}" == "${a17}" ]] || continue;a37="${a24[a59]/*:-}";a37="${a37#\#}";[[ "${a37}" == "${a24[a59]}" ]] || break 2;a37="${a37/|*}";break 2;done;done;[[ -n "${a37:-}" ]] || :a42::error_usage "Invalid command: ${a55}";a24=("${a37}" "${a58[@]}");};:a24::text() { local a28="${1:-}";local a45="${ARGSH_SOURCE:-"${0}"}";a45="${a45##*/}";echo "${a28}";echo;echo "Usage: ${a45} <command> [args]";[[ ${a24[0]:-} == '-' ]] || echo -e "\nAvailable Commands:";for (( a59=0; a59 < ${#a24[@]}; a59+=2 )); do [[ "${a24[a59]:0:1}" != "#" ]] || continue;[[ "${a24[a59]}" != "-" ]] || { echo;echo "${a24[a59+1]}";continue;};printf "  %-${ARGSH_FIELD_WIDTH}s %s\n" "${a24[a59]/[:|]*}" "${a24[a59+1]}";done;:a42::text_flags;echo;echo "Use \"${a45} [command] --help\" for more information about a command.";};:args() { local a28="${1}"; shift;declare -p a42 &>/dev/null || local -a a42=();[[ $(( ${#a42[@]} % 2 )) -eq 0 ]] || :a42::_error "args must be an associative array";if [[ ${1:-} == "-h" || ${1:-} == "--help" ]]; then :a42::text;exit 0;fi;local a21 a59 a0=1;local -A a29=();local -a a58=("${@}");while (( ${#a58[@]} )); do if [[ ${a58[0]:0:1} != "-" ]]; then [[ "${a28}" != "-" ]] || { [[ -n "${a1:-}" ]] || a1="${a58[0]}";a58=("${a58[@]:1}");continue;};a59="$(:a42::field-positional "${a0}")" || :a42::error_usage "too many arguments: ${a58[0]}";a21="${a42[a59]}";local -n a51="${a21/:*}";a51="$(:a42::field-value "${a58[0]}")" || exit "${?}";a58=("${a58[@]:1}");(( ++a0 ));continue;fi;:a42::parse-flag || :a42::error_usage "unknown a34: ${a58[0]}";a29["${a21}"]=1;done;if a59="$(:a42::field-positional "${a0}")"; then a21="${a42[a59]}";is::uninitialized "${a21/:*}" || :a42::error_usage "missing required argument: ${a21/:*}";fi;:a42::check-required-flags;[[ ${#a58[@]} -eq 0 ]] || :a42::error_usage "too many arguments: ${a58[*]}";};:a42::text() { declare -p a42 &>/dev/null || return 0;local -a a2=() a14=();:a42::positional;local a45="${0##*/}";echo "${a28}";echo;echo "Usage:";echo "  ${a45} ${FUNCNAME[2]/::*} ${a14[*]}";(( ${#a2[@]} == 0 )) || { echo;echo "Arguments:";for a59 in "${a2[@]}"; do [[ ${a42[a59]} != "-" ]] || continue;a33="$(printf "   %-${ARGSH_FIELD_WIDTH}s%s" " " "${a42[a59+1]}" | fmt::tty;)";printf "   %-${ARGSH_FIELD_WIDTH}s%s\n" "$(:a42::fieldf "${a42[a59]}")" "$(string::trim-left "${a33}")";done;};:a42::text_flags;echo;};:a42::text_flags() { local -a a42=("${a42[@]}");local -a a30=()
array::contains 'help|h:+' "${a42[@]}" || a42+=('help|h:+' "Show this help message");:a42::flags;(( ${#a30[@]} )) || return 0;[[ "${a42[${a30[0]}]}" == "-" ]] || echo -e "\nOptions:";for a59 in "${a30[@]}"; do [[ "${a42[a59]:0:1}" != "#" ]] || continue;[[ "${a42[a59]}" != "-" ]] || { echo;echo "${a42[a59+1]}";continue;};:a42::fieldf "${a42[a59]}";{ echo -n "           ";echo -e "${a42[a59+1]}\n";} | fmt::tty;done;};:a42::flags() { declare -p a42 &>/dev/null || local -a a42;declare -p a30 &>/dev/null || local -a a30;for (( a59=0; a59 < "${#a42[@]}"; a59+=2 )); do if [[ ${a42[a59]} == *"|"* || ${a42[a59]} == '-' ]]; then a30+=("${a59}");fi;done;};:a42::positional() { declare -p a42 &>/dev/null || local -a a42;declare -p a2 &>/dev/null || local -a a2;declare -p a14 &>/dev/null || local -a a14;for (( a59=0; a59 < "${#a42[@]}"; a59+=2 )); do [[ ${a42[a59]} != *"|"* && ${a42[a59]} != '-' ]] || continue;a2+=("${a59}");if is::uninitialized "${a42[a59]/:*}"; then a14+=("[${a42[a59]/:*}]");continue;fi;a14+=("<${a42[a59]/:*}>");done;};:a42::parse-flag() { declare -p a58 a21 &>/dev/null || return 1;local a34="${a58[0]/=*}";if [[ ${a34:0:2} == "--" ]]; then a21="$(:a42::field-lookup "${a34:2}")" || return "${?}";elif [[ ${a34:0:1} == "-" ]]; then a34="${a34:0:2}";a21="$(:a42::field-lookup "${a34:1}")" || return "${?}";fi;:a42::field-set-flag "${a21}";};:a42::check-required-flags() { declare -p a29 a42 &>/dev/null || return 1;for (( a59=0; a59 < ${#a42[@]}; a59+=2 )); do [[ ${a42[a59]: -1} == "!" ]] || continue;if [[ -z ${a29[${a42[a59]}]:-} ]]; then :a42::error_usage "missing required a34: ${a42[a59]/|*}";fi;done;};:a42::field-set-flag() { local a21="${1}";declare -p a58 a34 &>/dev/null || return 1;local -a a23;:a42::field-attrs "${a21}";local -n a51="${a23[0]}";local a4 a5;if (( a23[2] )); then a4=1;if [[ ${a34:0:2} == "--" ]]; then a58=("${a58[@]:1}");else a58[0]="-${a58[0]:2}";[[ ${a58[0]} != "-" ]] || a58=("${a58[@]:1}");fi;fi;[[ -n ${a4:-} ]] || { a5="${a58[0]/${a34}}";if [[ ${a5} == "" ]]; then (( ${#a58[@]} )) || :a42::error "missing value for a34: ${a23[0]}";a4="${a58[1]}";a58=("${a58[@]:1}");else [[ "${a5:0:1}" != "=" ]] || a5="${a5:1}";a4="${a5}";fi;a4="$(:a42::field-value "${a4}")" || exit "${?}";a58=("${a58[@]:1}");};if (( a23[5] )); then a51+=("${a4}");else a51="${a4}";fi;};:a42::field-value() { local a22="${1}";declare -p a21 &>/dev/null || return 1;declare -p a23 &>/dev/null || { local -a a23;:a42::field-attrs "${a21}";};declare -f "to::${a23[3]}" &>/dev/null || :a42::_error "unknown type: ${a23[3]}";"to::${a23[3]}" "${a22}" "${a23[0]}" || :a42::error_usage "invalid type (${a23[3]}): ${a22}";};:a42::field-lookup() { local a21="${1}";declare -p a42 &>/dev/null || return 1;for (( a59=0; a59 < ${#a42[@]}; a59+=2 )); do if [[ ${a42[a59]} =~ (^${a21}\||\|${a21}:|\|${a21}$) ]]; then echo "${a42[a59]}";return 0;fi;done;return 1;};:a42::field-positional() { local a6="${1:-1}";declare -p a42 &>/dev/null || return 1;for (( a59=0; a59 < ${#a42[@]}; a59+=2 )); do if [[ ${a42[a59]} != *"|"* && ${a42[a59]} != '-' ]]; then (( --a6 == 0 )) || continue;echo "${a59}";return 0;fi;done;return 1;};:a42::field-attrs() { local a21="${1}";declare -p a23 &>/dev/null || local -a a23;a23=("" "" 0 "" 0 0 0 0 );local a46="+~!";local a39="${a21#*[:]}";[ "${a39}" != "${a21}" ] || a39="";a23[0]="${a21/[|:]*}";[[ ${a23[0]:0:1} != "#" ]] || { a23[7]=1
a23[0]="${a23[0]:1}";};local -n a51="${a23[0]}";local -a a30;mapfile -t a30 < <(echo "${a21/[:]*}" | tr '|' '\n');[[ ${#a30[@]} -eq 1 ]] || { a23[0]="${a30[0]}";a23[1]="${a30[1]}";};if is::array "${a23[0]}"; then a23[5]=1;! is::uninitialized "${a23[0]}" || a51=();! (( ${#a51[@]} )) || a23[4]=1;elif is::uninitialized "${a23[0]}"; then a23[4]=1;fi;while (( ${#a39} > 0 )); do if [[ ${a39:0:1} == "+" ]]; then [[ -z ${a23[3]} ]] || :a42::_error "cannot have multiple types: ${a23[3]} and boolean";a23[2]=1;a39="${a39:1}";continue;fi;if [[ ${a39:0:1} == "~" ]]; then ! (( a23[2] )) || :a42::_error "already flagged as boolean";a39="${a39:1}";a23[3]="${a39/[$a46]*}";a39="${a39:${#a23[3]}}";continue;fi;if [[ ${a39:0:1} == "!" ]]; then ! (( a23[4] )) || :a42::_error "cannot be required with default value";! (( a23[6] )) || :a42::_error "field already flagged as required";a23[6]=1;a39="${a39:1}";continue;fi;echo ":args error: unknown modifier: ${a39:0:1}" >&2;exit 2;done;if [[ -z ${a23[3]} && ${a23[2]} -eq 0 ]]; then a23[3]="string";fi;};:a42::fieldf() { local a21="${1}";declare -p a23 &>/dev/null || { local -a a23;:a42::field-attrs "${a21}";};[[ ${a21} == *"|"* ]] || { echo "${a23[0]} ${a23[3]}";return 0;};local -n a51="${a23[0]}";a9="   ";! (( a23[6] )) || a9=" ! ";if [[ -n ${a23[1]} ]]; then a9+="-${a23[1]}, --${a23[0]}";else a9+="    --${a23[0]}";fi;a9+=" ";! (( a23[5] )) || a9+="...";a9+="${a23[3]}";! (( a23[4] )) || a9+=" (default: ${a51[*]})";echo "${a9}";};args::run() { local a48="${1}"; shift;for (( a59=0; a59<${#}; a59++ )); do local a47="${1}"; shift;local a37="${1}"; shift;if ! (( a48 )) || (( a47 )); then "${a37}";fi;done;};array::contains() { local -r a13="${1}"; shift;for a8 in "${@}"; do [[ "${a8}" != "${a13}" ]] || return 0;done;return 1;};array::join() { local -r a3="${1}"; shift;local a10;printf -v a10 "${a3}%s" "${@}";echo "${a10:${#a3}}";};array::nth() { local -n a49="${1}";local -r a53="${2}";shift 2;for (( a59=1; a59<=${#}; a59++ )); do (( a59 % a53 )) || a49+=("${!a59}");done;};binary::exists() { local a15="${1}";command -v "${a15}" &> /dev/null || { echo "${a15} is required to run this script" >&2;return 1;};};binary::github() { local a32="${1}";local -r a15="$(basename "${a32}")";local a38="${2}";local a44="${3}";local a52="${4:-}";curl -Lso /dev/stdout "https://github.com/${a38}/releases/download/${a44}" | { if [[ -n "${a52}" ]]; then tar -xz -C "$(dirname "${a32}")" "${a52}";else tee "${a32}" &> /dev/null;fi;chmod +x "${a32}";};};binary::arch() { local a19="${1}";local -r a43="$(uname -m)";case "${a43}" in
x86_64|amd64) if (( a19 )); then echo "64-bit"; else echo "amd64"; fi ;;
armv7l) echo "arm" ;;
aarch64) echo "arm64" ;;
*) echo "${a43}" ;;
esac;};binary::jq() { binary::exists "jq" 2>/dev/null || { local -r a16="$(github::latest "stedolan/jq")" system="$(uname -s)";binary::github "${PATH_BIN?}/jq" "stedolan/jq" "${a16}/jq-${system,,}-$(binary::arch)";};};binary::vale() { binary::exists "vale" 2>/dev/null || { local -r a16="$(github::latest "errata-ai/vale")" system="$(uname -s)";binary::github "${PATH_BIN?}/vale" "errata-ai/vale" "${a16}/vale_${a16:1}_$(uname -s)_$(binary::arch 1).tar.gz" "vale";};};docker::user() { local a56="${1:-"$(id -u)"}";local a54="${2:-"$(id -g)"}";local a35="${3:-"$(whoami)"}";local a40="${4:-"/workspace"}";local a31="${5:-"/bin/sh"}";echo "${a35}:x:${a56}:${a54}::${a40}:${a31}" > /tmp/docker_passwd;echo "${a35}:x:${a54}:" > /tmp/docker_group;echo -v "${PATH_BASE:-.}:${a40}";echo -v /tmp/docker_passwd:/etc/passwd -v /tmp/docker_group:/etc/group;echo -u "${a56}:${a54}";echo -w "${a40}";};error::stacktrace() { local -r a41="${1:-${?}}";if (( a41 )); then echo -e "\n\033[38;5;196m■■ Stacktrace(${a41}): \e[1m${BASH_COMMAND}\e[22m";for a59 in $(seq 1 $((${#FUNCNAME[@]} - 2))); do echo -e "${a59}. ${BASH_SOURCE[a59]}:${BASH_LINENO[a59-1]} ➜ ${FUNCNAME[a59]}()";done;echo -e "\033[0m";return "${a41}";fi;};:a42::_error() { declare -p a21 &>/dev/null || local a21="???";echo ":args error [${a21}] ➜ ${1}" >&2;exit 2;};:a42::error() { echo -e "[ ${a21/:*} ] invalid argument\n➜ ${1}\n" >&2;exit 2;};:a42::error_usage() { declare -p a21 &>/dev/null || local a21="???";echo -e "[ ${a21/:*} ] invalid usage\n➜ ${1}\n" >&2;echo -e "Use \"${0##*/} -h\" for more information" >&2;exit 2;};fmt::tty() { local a50="${1:-"$(cat)"}";command -v fmt &>/dev/null || { echo "${a50}";return 0;};local a36;a36="$(tput cols)";echo "${a50}" | fmt -w "${a36}";};github::latest() { local a38="${1}";curl -fsSLI -o /dev/null -w "%{url_effective}" "https://github.com/${a38}/releases/latest" | rev | cut -d'/' -f1 | rev;};is::tty() { [[ -t 1 ]];};is::array() { declare -p "${1}" &>/dev/null && [[ $(declare -p "${1}") == "declare -a"* ]];};is::uninitialized() { local a57="${1}";if is::array "${a57}"; then [[ $(declare -p "${a57}") == "declare -a ${a57}" ]];else [[ ${!a57+x} ]];fi;};is::set() { ! is::uninitialized "${1}";};bash::version() { local a26="${1:-4}";local a20="${2:-3}";local a27="${3:-0}";local -a a7;read -ra a7 <<< "$(echo "${BASH_VERSION}" | tr '.' ' ')";if [[ "${a7[0]}" -lt "${a26}" ]]; then return 1;elif [[ "${a7[0]}" -gt "${a26}" ]]; then return 0;fi;if [[ "${a7[1]}" -lt "${a20}" ]]; then return 1;elif [[ "${a7[1]}" -gt "${a20}" ]]; then return 0;fi;if [[ "${a7[2]}" -lt "${a27}" ]]; then return 1;fi;return 0;};argsh::shebang() { local -r a44="${*: -1}";[[ -e "${a44}" && "${BASH_SOURCE[-1]}" != "${a44}" ]] || { echo "This is intended to be used in a shebang";echo "#!/usr/bin/env argsh";return 1;} >&2;bash::version 4 3 0 || { echo "This script requires bash 4.3.0 or later";return 1;} >&2;ARGSH_SOURCE="${a44}";export ARGSH_SOURCE;. "${a44}";};string::drop-index() { local a12="${1}";local a18="${2}";local a11="${3:-1}";echo "${a12:0:a18}${a12:a18+a11}";};string::random() { local a11="${1:-42}";local a25="${2:-"a-zA-Z0-9"}";local a50;until [[ "${a50:-}" =~ ^[:alpha:] ]]; do a50=$(tr -dc "${a25}" < /dev/urandom | fold -w "${a11}" | head -n 1 || :);done;echo "${a50}";};string::trim-left() { local a12="${1:-'-'}";local a25="${2:-" "$'\n'$'\t'}";[[ ${a12} != '-' ]] || a12="$(cat)" ;while [[ -n "${a12}" ]]; do [[ ${a25} == *${a12:0:1}* ]] || break;a12="${a12:1}";done;echo "${a12}";};string::trim-right() { local a12="${1:-'-'}";local a25="${2:-" "$'\n'$'\t'}";[[ ${a12} != '-' ]] || a12="$(cat)";while [[ -n "${a12}" ]]; do [[ ${a25} == *${a12: -1}* ]] || break;a12="${a12:0: -1}";done;echo "${a12}";};string::trim() { local a12="${1:-'-'}";local a25="${2:-" \n\t"}";[[ ${a12} != '-' ]] || a12="$(cat)" ;echo "${a12}" | string::trim-left - "${a25}" | string::trim-right - "${a25}";};to::string() { local a22="${1}";echo "${a22}";};to::boolean() { local a22="${1}";case "${a22}" in
""|"false"|"0") a22="0" ;;
*) a22="1" ;;
esac;echo "${a22}";};to::int() { local a22="${1}";[[ ${a22} =~ ^-?[0-9]+$ ]] || return 1;echo "${a22}";};to::float() { local a22="${1}";[[ ${a22} =~ ^-?[0-9]+(\.[0-9]+)?$ ]] || return 1;echo "${a22}";};to::stdin() { local a22="${1}";[[ ${a22} != "-" ]] || a22="$(cat)";echo "${a22}";}; [[ "${BASH_SOURCE[0]}" != "${0}" ]] || argsh::shebang "${@}"