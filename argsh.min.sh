#!/usr/bin/env bash
# shellcheck disable=SC2178 disable=SC2120 disable=SC1090 disable=SC2046 disable=SC2155
ARGSH_COMMIT_SHA="${commit_sha}"; ARGSH_VERSION="${version}"
: "${ARGSH_VERSION:=unknown}";: "${ARGSH_COMMIT_SHA:=unknown}";: "${ARGSH_FIELD_WIDTH:=24}";COMMANDNAME=("$(s="${ARGSH_SOURCE:-"${0}"}"; echo "${s##*/}")");:usage() { local a22="${1}"; shift;declare -p usage &>/dev/null || local -a usage=();declare -p args &>/dev/null || local -a args=();[[ $(( ${#usage[@]} % 2 )) -eq 0 ]] || :args::_error "usage must be an associative array";[[ $(( ${#usage[@]} % 2 )) -eq 0 ]] || :args::_error "usage must be an associative array";if [[ -z ${1:-} || ${1} == "-h" || ${1} == "--help" ]]; then :usage::text "${a22}";exit 0;fi;if ! (( ${#COMMANDNAME[@]} )) && [[ ${1:-} == "--argsh" ]]; then echo "https://arg.sh ${ARGSH_COMMIT_SHA:-} ${ARGSH_VERSION:-}";exit 0;fi;local -A a26=();local -a a54=("${@}");local a50 a19="";while (( ${#a54[@]} )); do if [[ ${a54[0]:0:1} != "-" ]]; then [[ -z "${a50:-}" ]] || break;a50="${a54[0]}";a54=("${a54[@]:1}");continue;fi;:args::parse_flag || break;a26["${a19}"]=1;done;:args::check_required_flags;local a44;for (( a59=0; a59 < ${#usage[@]}; a59+=2 )); do for a20 in $(echo "${usage[a59]/:*}" | tr '|' "\n"); do a20="${a20#\#}";[[ "${a50}" == "${a20}" ]] || continue;a19="${usage[a59]#\#}";a44="${usage[a59]/*:-}";a44="${a44#\#}";[[ "${a44}" == "${usage[a59]}" ]] || break 2;a44="${a44/|*}";break 2;done;done;[[ -n "${a44:-}" ]] || :args::error_usage "Invalid command: ${a50}";COMMANDNAME+=("${a19/[|:]*}");usage=("${a44}" "${a54[@]}");};:usage::text() { local a22="${1:-}";string::indent "${a22}";echo;echo "Usage: ${COMMANDNAME[*]} <command> [args]";[[ ${usage[0]:-} == '-' ]] || echo -e "\nAvailable Commands:";for (( a59=0; a59 < ${#usage[@]}; a59+=2 )); do [[ "${usage[a59]:0:1}" != "#" ]] || continue;[[ "${usage[a59]}" != "-" ]] || { echo;echo "${usage[a59+1]}";continue;};printf "  %-${ARGSH_FIELD_WIDTH}s %s\n" "${usage[a59]/[:|]*}" "${usage[a59+1]}";done;:args::text_flags;echo;echo "Use \"${COMMANDNAME[*]} <command> --help\" for more information about a command.";};:args() { local a22="${1}"; shift;declare -p args &>/dev/null || local -a args=();[[ $(( ${#args[@]} % 2 )) -eq 0 ]] || :args::_error "args must be an associative array";if [[ ${1:-} == "-h" || ${1:-} == "--help" ]]; then :args::text;exit 0;fi;local a19="" a59 a0=1;local -A a26=();local -a a54=("${@}");while (( ${#a54[@]} )); do if [[ ${a54[0]:0:1} != "-" ]]; then a59="$(:args::field_positional "${a0}")" || :args::error_usage "too many arguments: ${a54[0]}";a19="${args[a59]}";local -n a57="$(args::field_name "${a19}")";a57="$(:args::field_value "${a54[0]}")" || exit "${?}";a54=("${a54[@]:1}");(( ++a0 ));continue;fi;:args::parse_flag || :args::error_usage "unknown a37: ${a54[0]}";a26["${a19}"]=1;done;if a59="$(:args::field_positional "${a0}")"; then a19="$(args::field_name "${args[a59]}")";if is::uninitialized "${a19}" && ! is::array "${a19}"; then :args::error_usage "missing required argument: ${a19}";fi;fi;:args::check_required_flags;[[ ${#a54[@]} -eq 0 ]] || :args::error_usage "too many arguments: ${a54[*]}";};:args::text() { declare -p args &>/dev/null || return 0;local -a a1=() a9=();:args::positional
string::indent "${a22}";echo;echo "Usage:";echo "  ${COMMANDNAME[*]} ${a9[*]}";(( ${#a1[@]} == 0 )) || { echo;echo "Arguments:";for a59 in "${a1[@]}"; do [[ ${args[a59]} != "-" ]] || continue;a33="$(printf "   %-${ARGSH_FIELD_WIDTH}s%s" " " "${args[a59+1]}" | fmt::tty;)";printf "   %-${ARGSH_FIELD_WIDTH}s%s\n" "$(:args::fieldf "${args[a59]}")" "$(string::trim-left "${a33}")";done;};:args::text_flags;echo;};:args::text_flags() { local -a args=("${args[@]}");local -a a17=();array::contains 'help|h:+' "${args[@]}" || args+=('help|h:+' "Show this help message");:args::flags;(( ${#a17[@]} )) || return 0;[[ "${args[${a17[0]}]}" == "-" ]] || echo -e "\nOptions:";for a59 in "${a17[@]}"; do [[ "${args[a59]:0:1}" != "#" ]] || continue;[[ "${args[a59]}" != "-" ]] || { echo;echo "${args[a59+1]}";continue;};:args::fieldf "${args[a59]}";{ echo -n "           ";echo -e "${args[a59+1]}\n";} | fmt::tty;done;};:args::flags() { declare -p args &>/dev/null || local -a args;declare -p a17 &>/dev/null || local -a a17;for (( a59=0; a59 < "${#args[@]}"; a59+=2 )); do if [[ ${args[a59]} == *"|"* || ${args[a59]} == '-' ]]; then a17+=("${a59}");fi;done;};:args::positional() { declare -p args &>/dev/null || local -a args;declare -p a1 &>/dev/null || local -a a1;declare -p a9 &>/dev/null || local -a a9;local a57;for (( a59=0; a59 < "${#args[@]}"; a59+=2 )); do [[ ${args[a59]} != *"|"* && ${args[a59]} != '-' ]] || continue;a57="$(args::field_name "${args[a59]}")";a1+=("${a59}");if is::array "${a57}"; then a9+=("...${a57}");continue;fi;if ! is::uninitialized "${a57}"; then a9+=("[${a57}]");continue;fi;a9+=("<${a57}>");done;};:args::parse_flag() { declare -p a54 a19 &>/dev/null || return 1;local a37="${a54[0]/=*}";if [[ ${a37:0:2} == "--" ]]; then a19="$(:args::field_lookup "${a37:2}")" || return "${?}";elif [[ ${a37:0:1} == "-" ]]; then a37="${a37:0:2}";a19="$(:args::field_lookup "${a37:1}")" || return "${?}";fi;:args::field_set_flag "${a19}";};:args::check_required_flags() { declare -p a26 args &>/dev/null || return 1;local a19;local -a a29;for (( a59=0; a59 < ${#args[@]}; a59+=2 )); do a19="${args[a59]}";:args::field_attrs "${a19}";if (( a29[2] )) && ! (( a29[4] )); then local -n a57="${a29[0]}";a57=0;fi;if (( a29[6] )) && [[ -z ${a26[${args[a59]}]:-} ]]; then :args::error_usage "missing required a37: ${args[a59]/|*}";fi;done;};:args::field_set_flag() { local a19="${1}";declare -p a54 a37 &>/dev/null || return 1;local -a a29;:args::field_attrs "${a19}";local -n a57="${a29[0]}";local a4 a3;if (( a29[2] )); then a4=1;if [[ ${a37:0:2} == "--" ]]; then a54=("${a54[@]:1}");else a54[0]="-${a54[0]:2}";[[ ${a54[0]} != "-" ]] || a54=("${a54[@]:1}");fi;fi;[[ -n ${a4:-} ]] || { a3="${a54[0]/${a37}}";if [[ ${a3} == "" ]]; then (( ${#a54[@]} )) || :args::error "missing value for a37: ${a29[0]}";a4="${a54[1]}";a54=("${a54[@]:1}");else [[ "${a3:0:1}" != "=" ]] || a3="${a3:1}";a4="${a3}";fi;a4="$(:args::field_value "${a4}")" || exit "${?}";a54=("${a54[@]:1}");};if (( a29[5] )); then a57+=("${a4}");else a57="${a4}";fi;};:args::field_value() { local a25="${1}";declare -p a19 &>/dev/null || return 1;declare -p a29 &>/dev/null || { local -a a29;:args::field_attrs "${a19}";};declare -f "to::${a29[3]}" &>/dev/null || :args::_error "unknown type: ${a29[3]}";"to::${a29[3]}" "${a25}" "${a29[0]}" || :args::error_usage "invalid type (${a29[3]}): ${a25}";};:args::field_lookup() { local a19="${1}";declare -p args &>/dev/null || return 1;for (( a59=0; a59 < ${#args[@]}; a59+=2 )); do if [[ ${args[a59]} =~ (^${a19}\||\|${a19}:|\|${a19}$) ]]; then echo "${args[a59]}";return 0;fi;done;return 1;};:args::field_positional() { local a5="${1:-1}";declare -p args &>/dev/null || return 1;for (( a59=0; a59 < ${#args[@]}; a59+=2 )); do if [[ ${args[a59]} != *"|"* && ${args[a59]} != '-' ]]; then if is::array "$(args::field_name "${args[a59]}")" || (( --a5 == 0 )); then echo "${a59}";return 0;fi;fi;done;return 1;};args::field_name() { local a19="${1}";local a31="${2:-1}";a19="${a19/[|:]*}";a19="${a19#\#}";if (( a31 )); then a19="${a19//-/_}";fi;echo "${a19}";};:args::field_attrs() { local a19="${1}";declare -p a29 &>/dev/null || local -a a29;a29=("" "" 0 "" 0 0 0 0 "" );local a46="+~!";local a45="${a19#*[:]}";[ "${a45}" != "${a19}" ] || a45="";a29[0]="$(args::field_name "${a19}")";a29[8]="$(args::field_name "${a19}" 0)";[[ ${a29[0]:0:1} != "#" ]] || { a29[7]=1;};local -n a57="${a29[0]}";local -a a17;mapfile -t a17 < <(echo "${a19/[:]*}" | tr '|' '\n');[[ ${#a17[@]} -eq 1 ]] || { a29[1]="${a17[1]}";};if is::array "${a29[0]}"; then a29[5]=1;! is::uninitialized "${a29[0]}" || a57=();! (( ${#a57[@]} )) || a29[4]=1;elif ! is::uninitialized "${a29[0]}"; then a29[4]=1;fi;while (( ${#a45} > 0 )); do if [[ ${a45:0:1} == "+" ]]; then [[ -z ${a29[3]} ]] || :args::_error "cannot have multiple types: ${a29[3]} and boolean";a29[2]=1;a45="${a45:1}";continue;fi;if [[ ${a45:0:1} == "~" ]]; then ! (( a29[2] )) || :args::_error "already flagged as boolean";a45="${a45:1}";a29[3]="${a45/[$a46]*}";a45="${a45:${#a29[3]}}";continue;fi;if [[ ${a45:0:1} == "!" ]]; then ! (( a29[6] )) || :args::_error "field already flagged as required";a29[6]=1;a45="${a45:1}";continue;fi;echo ":args error: unknown modifier: ${a45:0:1}" >&2;exit 2;done;if [[ -z ${a29[3]} && ${a29[2]} -eq 0 ]]; then a29[3]="string";fi;};:args::fieldf() { local a19="${1}";declare -p a29 &>/dev/null || { local -a a29;:args::field_attrs "${a19}";};[[ ${a19} == *"|"* ]] || { echo "${a29[8]} ${a29[3]}";return 0;};local -n a57="${a29[0]}";a16="   ";! (( a29[6] )) || a16=" ! ";if [[ -n ${a29[1]} ]]; then a16+="-${a29[1]}, --${a29[8]}";else a16+="    --${a29[8]}";fi;a16+=" ";! (( a29[5] )) || a16+="...";a16+="${a29[3]}";if (( a29[4] )) && ! (( a29[2] )); then a16+=" (default: ${a57[*]})";fi;echo "${a16}";};args::run() { local a58="${1}"; shift;for (( a59=0; a59<${#}; a59++ )); do local a52="${1}"; shift;local a44="${1}"; shift;if ! (( a58 )) || (( a52 )); then "${a44}";fi;done;};array::contains() { local -r a13="${1}"; shift;for a6 in "${@}"; do [[ "${a6}" != "${a13}" ]] || return 0;done;return 1;};array::join() { local -r a2="${1}"; shift;local a14;printf -v a14 "${a2}%s" "${@}";echo "${a14:${#a2}}";};array::nth() { local -n a51="${1}";local -r a53="${2}";shift 2;for (( a59=1; a59<=${#}; a59++ )); do (( a59 % a53 )) || a51+=("${!a59}");done;};bash::version() { local a27="${1:-4}";local a18="${2:-3}";local a21="${3:-0}";local -a a7;read -ra a7 <<< "$(echo "${BASH_VERSION}" | tr '.' ' ')";if [[ "${a7[0]}" -lt "${a27}" ]]; then return 1;elif [[ "${a7[0]}" -gt "${a27}" ]]; then return 0;fi;if [[ "${a7[1]}" -lt "${a18}" ]]; then return 1;elif [[ "${a7[1]}" -gt "${a18}" ]]; then return 0;fi;if [[ "${a7[2]}" -lt "${a21}" ]]; then return 1;fi;return 0;};binary::exists() { local a8="${1}";command -v "${a8}" &> /dev/null || { echo "${a8} is required to run this script" >&2;return 1;};};binary::github() { local a40="${1}";local -r a8="$(basename "${a40}")";local a39="${2}";local a41="${3}";local a56="${4:-}";curl -Lso /dev/stdout "https://github.com/${a39}/releases/download/${a41}" | { if [[ -n "${a56}" ]]; then tar -xz -C "$(dirname "${a40}")" "${a56}";else tee "${a40}" &> /dev/null;fi;chmod +x "${a40}";};};binary::arch() { local a24="${1}";local -r a35="$(uname -m)";case "${a35}" in
x86_64|amd64) if (( a24 )); then echo "64-bit"; else echo "amd64"; fi ;;
armv7l) echo "arm" ;;
aarch64) echo "arm64" ;;
*) echo "${a35}" ;;
esac;};binary::jq() { binary::exists "jq" 2>/dev/null || { local -r a15="$(github::latest "stedolan/jq")" system="$(uname -s)";binary::github "${PATH_BIN?}/jq" "stedolan/jq" "${a15}/jq-${system,,}-$(binary::arch)";};};binary::vale() { binary::exists "vale" 2>/dev/null || { local -r a15="$(github::latest "errata-ai/vale")" system="$(uname -s)";binary::github "${PATH_BIN?}/vale" "errata-ai/vale" "${a15}/vale_${a15:1}_$(uname -s)_$(binary::arch 1).tar.gz" "vale";};};docker::user() { local a48="${1:-"$(id -u)"}";local a55="${2:-"$(id -g)"}";local a38="${3:-"$(whoami)"}";local a42="${4:-"/workspace"}";local a32="${5:-"/bin/sh"}";echo "${a38}:x:${a48}:${a55}::${a42}:${a32}" > /tmp/docker_passwd;echo "${a38}:x:${a55}:" > /tmp/docker_group;echo -v "${PATH_BASE:-.}:${a42}";echo -v /tmp/docker_passwd:/etc/passwd -v /tmp/docker_group:/etc/group;echo -u "${a48}:${a55}";echo -w "${a42}";};error::stacktrace() { local -r a34="${1:-${?}}";if (( a34 )); then echo -e "\n\033[38;5;196m■■ Stacktrace(${a34}): \e[1m${BASH_COMMAND}\e[22m";for a59 in $(seq 1 $((${#FUNCNAME[@]} - 2))); do echo -e "${a59}. ${BASH_SOURCE[a59]}:${BASH_LINENO[a59-1]} ➜ ${FUNCNAME[a59]}()";done;echo -e "\033[0m";return "${a34}";fi;};:args::_error() { declare -p a19 &>/dev/null || local a19="???";echo ":args error [${a19}] ➜ ${1}" >&2;exit 2;};:args::error() { declare -p a19 &>/dev/null || local a19="???";echo -e "[ ${a19/[:|]*} ] invalid argument\n➜ ${1}\n" >&2;exit 2;};:args::error_usage() { declare -p a19 &>/dev/null || local a19="???";echo -e "[ ${a19/[:|]*} ] invalid usage\n➜ ${1}\n" >&2;echo -e "Use \"${0##*/} -h\" for more information" >&2;exit 2;};fmt::tty() { local a47="${1:-"$(cat)"}";command -v fmt &>/dev/null || { echo "${a47}";return 0;};local a36;a36="$(tput cols)";echo "${a47}" | fmt -w "${a36}";};github::latest() { local a39="${1}";curl -fsSLI -o /dev/null -w "%{url_effective}" "https://github.com/${a39}/releases/latest" | rev | cut -d'/' -f1 | rev;};is::tty() { [[ -t 1 ]];};is::array() { declare -p "${1}" &>/dev/null && [[ $(declare -p "${1}") == "declare -a"* ]];};is::uninitialized() { local a49="${1}";if is::array "${a49}"; then [[ $(declare -p "${a49}") == "declare -a ${a49}" ]];else [[ ! ${!a49+x} ]];fi;};is::set() { ! is::uninitialized "${1}";};argsh::shebang() { local -r a41="${1}";: "${ARGSH_SOURCE="${a41}"}";export ARGSH_SOURCE;[[ "${BASH_SOURCE[-1]}" != "${a41}" && -f "${a41}" ]] || { binary::exists docker || { echo "This script requires Docker to be installed";return 1;} >&2;docker run --rm -it $(docker::user) -e "BATS_LOAD" -e "ARGSH_SOURCE" -e "GIT_COMMIT_SHA=$(git rev-parse HEAD || :)" -e "GIT_VERSION=$(git describe --tags --dirty || :)" ghcr.io/arg-sh/argsh:latest "${@}" ;return 0;} >&2;bash::version 4 3 0 || { echo "This script requires bash 4.3.0 or later";return 1;} >&2;shift;. "${a41}";};string::drop-index() { local a10="${1}";local a30="${2}";local a12="${3:-1}";echo "${a10:0:a30}${a10:a30+a12}";};string::random() { local a12="${1:-42}";local a28="${2:-"a-zA-Z0-9"}";local a47;until [[ "${a47:-}" =~ ^[:alpha:] ]]; do a47=$(tr -dc "${a28}" < /dev/urandom | fold -w "${a12}" | head -n 1 || :);done;echo "${a47}";};string::indent() { local a10="${1:-'-'}";local a11="${2:-0}";local a28="${2:-" "$'\n'$'\t'}";local a43 a23;[[ ${a10} != '-' ]] || a10="$(cat)";mapfile -t a23 < <(echo "${a10}");for a43 in "${a23[@]}"; do printf "%${a11}s";string::trim-left "${a43}" "${a28}";done;};string::trim-left() { local a10="${1:-'-'}";local a28="${2:-" "$'\n'$'\t'}";[[ ${a10} != '-' ]] || a10="$(cat)" ;while [[ -n "${a10}" ]]; do [[ ${a28} == *${a10:0:1}* ]] || break;a10="${a10:1}";done;echo "${a10}";};string::trim-right() { local a10="${1:-'-'}";local a28="${2:-" "$'\n'$'\t'}";[[ ${a10} != '-' ]] || a10="$(cat)";while [[ -n "${a10}" ]]; do [[ ${a28} == *${a10: -1}* ]] || break;a10="${a10:0: -1}";done;echo "${a10}";};string::trim() { local a10="${1:-'-'}";local a28="${2:-" \n\t"}";[[ ${a10} != '-' ]] || a10="$(cat)" ;echo "${a10}" | string::trim-left - "${a28}" | string::trim-right - "${a28}";};to::string() { local a25="${1}";echo "${a25}";};to::boolean() { local a25="${1}";case "${a25}" in
""|"false"|"0") a25="0" ;;
*) a25="1" ;;
esac;echo "${a25}";};to::int() { local a25="${1}";[[ ${a25} =~ ^-?[0-9]+$ ]] || return 1;echo "${a25}";};to::float() { local a25="${1}";[[ ${a25} =~ ^-?[0-9]+(\.[0-9]+)?$ ]] || return 1;echo "${a25}";};to::stdin() { local a25="${1}";[[ ${a25} != "-" ]] || a25="$(cat)";echo "${a25}";};to::file() { local a25="${1}";[[ -f "${a25}" ]] || return 1;echo "${a25}";};[[ "${BASH_SOURCE[0]}" != "${0}" ]] || argsh::shebang "${@}"