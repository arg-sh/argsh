#!/usr/bin/env bash
# shellcheck disable=SC2178 disable=SC2120 disable=SC1090 disable=SC2046 disable=SC2155
set -euo pipefail; ARGSH_COMMIT_SHA="c75d1824f605eeb25c9076790d22b2f7d647348b"; ARGSH_VERSION="v0.2.0-dirty"
: "${ARGSH_VERSION:=unknown}";: "${ARGSH_COMMIT_SHA:=unknown}";: "${ARGSH_FIELD_WIDTH:=24}";COMMANDNAME=("$(s="${ARGSH_SOURCE:-"${0}"}"; echo "${s##*/}")");:usage() { local a24="${1}"; shift;declare -p usage &>/dev/null || local -a usage=();declare -p args &>/dev/null || local -a args=();[[ $(( ${#usage[@]} % 2 )) -eq 0 ]] || :args::_error "usage must be an associative array";[[ $(( ${#usage[@]} % 2 )) -eq 0 ]] || :args::_error "usage must be an associative array";if [[ -z ${1:-} || ${1} == "-h" || ${1} == "--help" ]];then :usage::text "${a24}";exit 0;fi;if ! (( ${#COMMANDNAME[@]} )) && [[ ${1:-} == "--argsh" ]];then echo "https://arg.sh ${ARGSH_COMMIT_SHA:-} ${ARGSH_VERSION:-}";exit 0;fi;local -A a26=();local -a a64=("${@}");local a52 a27="";while (( ${#a64[@]} ));do if [[ ${a64[0]:0:1} != "-" ]];then [[ -z "${a52:-}" ]] || break;a52="${a64[0]}";a64=("${a64[@]:1}");continue;fi;:args::parse_flag || break;a26["${a27}"]=1;done;:args::check_required_flags;local a44;for (( a65=0; a65 < ${#usage[@]}; a65+=2 ));do for a19 in $(echo "${usage[a65]/:*}" | tr '|' "\n");do a19="${a19#\#}";[[ "${a52}" == "${a19}" ]] || continue;a27="${usage[a65]#\#}";a44="${usage[a65]/*:-}";a44="${a44#\#}";[[ "${a44}" == "${usage[a65]}" ]] || break 2;a44="${a44/|*}";break 2;done;done;[[ -n "${a44:-}" ]] || :args::error_usage "Invalid command: ${a52}";COMMANDNAME+=("${a27/[|:]*}");usage=("${a44}" "${a64[@]}");};:usage::text() { local a24="${1:-}";string::indent "${a24}";echo;echo "Usage: ${COMMANDNAME[*]} <command> [args]";[[ ${usage[0]:-} == '-' ]] || echo -e "\nAvailable Commands:";for (( a65=0; a65 < ${#usage[@]}; a65+=2 ));do [[ "${usage[a65]:0:1}" != "#" ]] || continue;[[ "${usage[a65]}" != "-" ]] || { echo;echo "${usage[a65+1]}";continue;};printf "  %-${ARGSH_FIELD_WIDTH}s %s\n" "${usage[a65]/[:|]*}" "${usage[a65+1]}";done;:args::text_flags;echo;echo "Use \"${COMMANDNAME[*]} <command> --help\" for more information about a command.";};:args() { local a24="${1}"; shift;declare -p args &>/dev/null || local -a args=();[[ $(( ${#args[@]} % 2 )) -eq 0 ]] || :args::_error "args must be an associative array";if [[ ${1:-} == "-h" || ${1:-} == "--help" ]];then :args::text;exit 0;fi;local a18=0 a27="" a65 a0=1;local -A a26=();local -a a64=("${@}");while (( ${#a64[@]} ));do if [[ ${a64[0]:0:1} != "-" ]];then local a37 a17;a65="$(:args::field_positional "${a0}")" || :args::error_usage "too many arguments: ${a64[0]}";a27="${args[a65]}";a37="$(args::field_name "${a27}")";a17="$(:args::field_value "${a64[0]}")" || exit "${?}";local -n a57="${a37}";if is::array "${a37}";then (( a18 )) || { a57=();a18=1;};a57+=("${a17}");else a57="${a17}";fi;a64=("${a64[@]:1}");(( ++a0 ));continue;fi;:args::parse_flag || :args::error_usage "unknown a48: ${a64[0]}";a26["${a27}"]=1;done;if a65="$(:args::field_positional "${a0}")";then a27="$(args::field_name "${args[a65]}")";if is::uninitialized "${a27}" && ! is::array "${a27}";then :args::error_usage "missing required argument: ${a27}";fi;fi;:args::check_required_flags;[[ ${#a64[@]} -eq 0 ]] || :args::error_usage "too many arguments: ${a64[*]}";};:args::text() { declare -p args &>/dev/null || return 0;local -a a2=() a15=();:args::positional;string::indent "${a24}";echo;echo "Usage:";echo "  ${COMMANDNAME[*]} ${a15[*]}";(( ${#a2[@]} == 0 )) || { echo;echo "Arguments:";for a65 in "${a2[@]}";do [[ ${args[a65]} != "-" ]] || continue;a38="$( printf "   %-${ARGSH_FIELD_WIDTH}s%s" " " "${args[a65+1]}" | fmt::tty;)";printf "   %-${ARGSH_FIELD_WIDTH}s%s\n" "$(:args::fieldf "${args[a65]}")" "$(string::trim-left "${a38}")";done;};:args::text_flags;echo;};:args::text_flags() { local -a args=("${args[@]}");local -a a28=();array::contains 'help|h:+' "${args[@]}" || args+=('help|h:+' "Show this help message");:args::flags;(( ${#a28[@]} )) || return 0;[[ "${args[${a28[0]}]}" == "-" ]] || echo -e "\nOptions:";for a65 in "${a28[@]}";do [[ "${args[a65]:0:1}" != "#" ]] || continue;[[ "${args[a65]}" != "-" ]] || { echo;echo "${args[a65+1]}";continue;};:args::fieldf "${args[a65]}";{ echo -n "           ";echo -e "${args[a65+1]}\n";} | fmt::tty;done;};:args::flags() { declare -p args &>/dev/null || local -a args;declare -p a28 &>/dev/null || local -a a28;for (( a65=0; a65 < "${#args[@]}"; a65+=2 ));do if [[ ${args[a65]} == *"|"* || ${args[a65]} == '-' ]];then a28+=("${a65}");fi;done;};:args::positional() { declare -p args &>/dev/null || local -a args;declare -p a2 &>/dev/null || local -a a2;declare -p a15 &>/dev/null || local -a a15;local a57;for (( a65=0; a65 < "${#args[@]}"; a65+=2 ));do [[ ${args[a65]} != *"|"* && ${args[a65]} != '-' ]] || continue;a57="$(args::field_name "${args[a65]}")";a2+=("${a65}");if is::array "${a57}";then a15+=("...${a57}");continue;fi;if ! is::uninitialized "${a57}";then a15+=("[${a57}]");continue;fi;a15+=("<${a57}>");done;};:args::parse_flag() { declare -p a64 a27 &>/dev/null || return 1;local a48="${a64[0]/=*}";if [[ ${a48:0:2} == "--" ]];then a27="$(:args::field_lookup "${a48:2}")" || return "${?}";elif [[ ${a48:0:1} == "-" ]];then a48="${a48:0:2}";a27="$(:args::field_lookup "${a48:1}")" || return "${?}";fi;:args::field_set_flag "${a27}";};:args::check_required_flags() { declare -p a26 args &>/dev/null || return 1;local a27;local -a a29;for (( a65=0; a65 < ${#args[@]}; a65+=2 ));do a27="${args[a65]}";:args::field_attrs "${a27}";if (( a29[2] )) && ! (( a29[4] ));then local -n a57="${a29[0]}";a57=0;fi;if (( a29[6] )) && [[ -z ${a26[${args[a65]}]:-} ]];then :args::error_usage "missing required a48: ${args[a65]/|*}";fi;done;};:args::field_set_flag() { local a27="${1}";declare -p a64 a48 &>/dev/null || return 1;local -a a29;:args::field_attrs "${a27}";local -n a57="${a29[0]}";local a4 a5;if (( a29[2] ));then a4=1;if [[ ${a48:0:2} == "--" ]];then a64=("${a64[@]:1}");else a64[0]="-${a64[0]:2}";[[ ${a64[0]} != "-" ]] || a64=("${a64[@]:1}");fi;fi;[[ -n ${a4:-} ]] || { a5="${a64[0]/${a48}}";if [[ ${a5} == "" ]];then (( ${#a64[@]} )) || :args::error "missing value for a48: ${a29[0]}";a4="${a64[1]}";a64=("${a64[@]:1}");else [[ "${a5:0:1}" != "=" ]] || a5="${a5:1}";a4="${a5}";fi;a4="$(:args::field_value "${a4}")" || exit "${?}";a64=("${a64[@]:1}");};if (( a29[5] ));then a57+=("${a4}");else a57="${a4}";fi;};:args::field_value() { local a17="${1}";declare -p a27 &>/dev/null || return 1;declare -p a29 &>/dev/null || { local -a a29;:args::field_attrs "${a27}";};declare -f "to::${a29[3]}" &>/dev/null || :args::_error "unknown type: ${a29[3]}";"to::${a29[3]}" "${a17}" "${a29[0]}" || :args::error_usage "invalid type (${a29[3]}): ${a17}";};:args::field_lookup() { local a27="${1}";declare -p args &>/dev/null || return 1;for (( a65=0; a65 < ${#args[@]}; a65+=2 ));do if [[ ${args[a65]} =~ (^${a27}\||\|${a27}:|\|${a27}$) ]];then echo "${args[a65]}";return 0;fi;done;return 1;};:args::field_positional() { local a6="${1:-1}";declare -p args &>/dev/null || return 1;for (( a65=0; a65 < ${#args[@]}; a65+=2 ));do if [[ ${args[a65]} != *"|"* && ${args[a65]} != '-' ]];then if is::array "$(args::field_name "${args[a65]}")" || (( --a6 == 0 ));then echo "${a65}";return 0;fi;fi;done;return 1;};args::field_name() { local a27="${1}";local a25="${2:-1}";a27="${a27/[|:]*}";a27="${a27#\#}";if (( a25 ));then a27="${a27//-/_}";fi;echo "${a27}";};:args::field_attrs() { local a27="${1}";declare -p a29 &>/dev/null || local -a a29;a29=( "" "" 0 "" 0 0 0 0 "" );local a40="+~!";local a42="${a27#*[:]}";[ "${a42}" != "${a27}" ] || a42="";a29[0]="$(args::field_name "${a27}")";a29[8]="$(args::field_name "${a27}" 0)";[[ ${a29[0]:0:1} != "#" ]] || { a29[7]=1;};local -n a57="${a29[0]}";local -a a28;mapfile -t a28 < <(echo "${a27/[:]*}" | tr '|' '\n');[[ ${#a28[@]} -eq 1 ]] || { a29[1]="${a28[1]}";};if is::array "${a29[0]}";then a29[5]=1;! is::uninitialized "${a29[0]}" || a57=();! (( ${#a57[@]} )) || a29[4]=1;elif ! is::uninitialized "${a29[0]}";then a29[4]=1;fi;while (( ${#a42} > 0 ));do if [[ ${a42:0:1} == "+" ]];then [[ -z ${a29[3]} ]] || :args::_error "cannot have multiple types: ${a29[3]} and boolean";a29[2]=1;a42="${a42:1}";continue;fi;if [[ ${a42:0:1} == "~" ]];then ! (( a29[2] )) || :args::_error "already flagged as boolean";a42="${a42:1}";a29[3]="${a42/[$a40]*}";a42="${a42:${#a29[3]}}";continue;fi;if [[ ${a42:0:1} == "!" ]];then ! (( a29[6] )) || :args::_error "field already flagged as required";a29[6]=1;a42="${a42:1}";continue;fi;echo ":args error: unknown modifier: ${a42:0:1}" >&2;exit 2;done;if [[ -z ${a29[3]} && ${a29[2]} -eq 0 ]];then a29[3]="string";fi;};:args::fieldf() { local a27="${1}";declare -p a29 &>/dev/null || { local -a a29;:args::field_attrs "${a27}";};[[ ${a27} == *"|"* ]] || { echo "${a29[8]} ${a29[3]}";return 0;};local -n a57="${a29[0]}";a9="   ";! (( a29[6] )) || a9=" ! ";if [[ -n ${a29[1]} ]];then a9+="-${a29[1]}, --${a29[8]}";else a9+="    --${a29[8]}";fi;a9+=" ";! (( a29[5] )) || a9+="...";a9+="${a29[3]}";if (( a29[4] )) && ! (( a29[2] ));then a9+=" (default: ${a57[*]})";fi;echo "${a9}";};args::run() { local a53="${1}"; shift;for (( a65=0; a65<${#}; a65++ ));do local a60="${1}"; shift;local a44="${1}"; shift;if ! (( a53 )) || (( a60 ));then "${a44}";fi;done;};array::contains() { local -r a13="${1}"; shift;for a7 in "${@}";do [[ "${a7}" != "${a13}" ]] || return 0;done;return 1;};array::join() { local -r a3="${1}"; shift;local a12;printf -v a12 "${a3}%s" "${@}";echo "${a12:${#a3}}";};array::nth() { local -n a56="${1}";local -r a61="${2}";shift 2;for (( a65=1; a65<=${#}; a65++ ));do (( a65 % a61 )) || a56+=("${!a65}");done;};bash::version() { local a33="${1:-4}";local a32="${2:-3}";local a22="${3:-0}";if [[ "${BASH_VERSINFO[0]}" -lt "${a33}" ]];then return 1;elif [[ "${BASH_VERSINFO[0]}" -gt "${a33}" ]];then return 0;fi;if [[ "${BASH_VERSINFO[1]}" -lt "${a32}" ]];then return 1;elif [[ "${BASH_VERSINFO[1]}" -gt "${a32}" ]];then return 0;fi;if [[ "${BASH_VERSINFO[2]}" -lt "${a22}" ]];then return 1;fi;return 0;};binary::exists() { local a14="${1}";command -v "${a14}" &> /dev/null || { echo "${a14} is required to run this script" >&2;return 1;};};binary::github() { local a43="${1}";local -r a14="$(basename "${a43}")";local a41="${2}";local a46="${3}";local a51="${4:-}";curl -Lso /dev/stdout "https://github.com/${a41}/releases/download/${a46}" | { if [[ -n "${a51}" ]];then tar -xz -C "$(dirname "${a43}")" "${a51}";else tee "${a43}" &> /dev/null;fi;chmod +x "${a43}";};};binary::arch() { local a20="${1}";local -r a45="$(uname -m)";case "${a45}" in
x86_64|amd64)if (( a20 )); then echo "64-bit"; else echo "amd64"; fi;;
armv7l)echo "arm";;
aarch64)echo "arm64";;
*)echo "${a45}";;
esac;};binary::jq() { binary::exists "jq" 2>/dev/null || { local -r a10="$(github::latest "stedolan/jq")" system="$(uname -s)";binary::github "${PATH_BIN?}/jq" "stedolan/jq" "${a10}/jq-${system,,}-$(binary::arch)";};};binary::vale() { binary::exists "vale" 2>/dev/null || { local -r a10="$(github::latest "errata-ai/vale")" system="$(uname -s)";binary::github "${PATH_BIN?}/vale" "errata-ai/vale" "${a10}/vale_${a10:1}_$(uname -s)_$(binary::arch 1).tar.gz" "vale";};};docker::user() { local a54="${1:-"$(id -u)"}";local a58="${2:-"$(id -g)"}";local a47="${3:-"$(whoami)"}";local a34="${4:-"/workspace"}";local a31="${5:-"/bin/sh"}";local a39;a39="$(pwd)";a39="${a39#"${PATH_BASE:-}"}";if [[ "${a39}" == "$(pwd)" ]];then a39="${a34}";else a39="${a34}${a39}";fi;echo "${a47}:x:${a54}:${a58}::${a34}:${a31}" > /tmp/docker_passwd;echo "${a47}:x:${a58}:" > /tmp/docker_group;echo "-v /tmp/docker_passwd:/etc/passwd -v /tmp/docker_group:/etc/group";echo "-u ${a54}:${a58}";echo "-v ${PATH_BASE:-"$(pwd)"}:${a34}";echo "-w ${a39}";};error::stacktrace() { local -r a36="${1:-${?}}";if (( a36 ));then echo -e "\n\033[38;5;196m■■ Stacktrace(${a36}): \e[1m${BASH_COMMAND}\e[22m";for a65 in $(seq 1 $((${#FUNCNAME[@]} - 2)));do echo -e "${a65}. ${BASH_SOURCE[a65]}:${BASH_LINENO[a65-1]} ➜ ${FUNCNAME[a65]}()";done;echo -e "\033[0m";return "${a36}";fi;};:args::_error() { declare -p a27 &>/dev/null || local a27="???";echo ":args error [${a27}] ➜ ${1}" >&2;exit 2;};:args::error() { declare -p a27 &>/dev/null || local a27="???";echo -e "[ ${a27/[:|]*} ] invalid argument\n➜ ${1}\n" >&2;exit 2;};:args::error_usage() { declare -p a27 &>/dev/null || local a27="???";echo -e "[ ${a27/[:|]*} ] invalid usage\n➜ ${1}\n" >&2;echo -e "Use \"${0##*/} -h\" for more information" >&2;exit 2;};fmt::tty() { local a62="${1:-"$(cat)"}";if ! command -v fmt &>/dev/null || [[ ! -t 1 ]];then echo "${a62}";return 0;fi;local a35;a35="$(tput cols)";echo "${a62}" | fmt -w "${a35}";};github::latest() { local a41="${1}";curl -fsSLI -o /dev/null -w "%{url_effective}" "https://github.com/${a41}/releases/latest" | rev | cut -d'/' -f1 | rev;};declare -gA a1=();import() { local a59="${1}";(( ${a1["${a59}"]:-} )) || { a1["${a59}"]=1;if [[ ${a59:0:1} == "@" ]];then a59="${PATH_BASE:?"PATH_BASE missing"}/${a59:1}";elif [[ ${a59:0:1} == "~" ]];then local _s="${ARGSH_SOURCE:-${BASH_SOURCE[-1]}}";a59="${_s%/*}/${a59:1}";else local _s="${ARGSH_SOURCE:-${BASH_SOURCE[0]}}";a59="${_s%/*}/${a59}";fi;import::source "${a59}" || exit 1;};};import::source() { local a59="${1}";for a63 in "" ".sh" ".bash";do if [[ -f "${a59}${a63}" ]];then . "${a59}${a63}";return;fi;done;echo "Library not found ${a59}" >&2;return 1;};import::clear() { a1=();};is::tty() { [[ -t 1 ]];};is::array() { declare -p "${1}" &>/dev/null && [[ $(declare -p "${1}") == "declare -a"* ]];};is::uninitialized() { local a50="${1}";if is::array "${a50}";then [[ $(declare -p "${a50}") == "declare -a ${a50}" ]];else [[ ! ${!a50+x} ]];fi;};is::set() { ! is::uninitialized "${1}";};argsh::shebang() { local -r a46="${1}";: "${ARGSH_SOURCE="${a46}"}";export ARGSH_SOURCE;[[ "${BASH_SOURCE[-1]}" != "${a46}" && -f "${a46}" ]] || { binary::exists docker || { echo "This script requires Docker to be installed";return 1;} >&2;local a55="";! tty -s || a55="-it";docker run --rm ${a55} $(docker::user) -e "BATS_LOAD" -e "ARGSH_SOURCE" -e "GIT_COMMIT_SHA=$(git rev-parse HEAD 2>/dev/null || :)" -e "GIT_VERSION=$(git describe --tags --dirty 2>/dev/null || :)" ghcr.io/arg-sh/argsh:latest "${@}";return 0;};bash::version 4 3 0 || { echo "This script requires bash 4.3.0 or later";return 1;} >&2;shift;. "${a46}";};string::drop-index() { local a11="${1}";local a23="${2}";local a16="${3:-1}";echo "${a11:0:a23}${a11:a23+a16}";};string::random() { local a16="${1:-42}";local a21="${2:-"a-zA-Z0-9"}";local a62;until [[ "${a62:-}" =~ ^[:alpha:] ]];do a62=$(tr -dc "${a21}" < /dev/urandom | fold -w "${a16}" | head -n 1 || :);done;echo "${a62}";};string::indent() { local a11="${1:-'-'}";local a8="${2:-0}";local a49 a30;[[ ${a11} != '-' ]] || a11="$(cat)";mapfile -t a30 < <(echo "${a11}");for a49 in "${a30[@]}";do a49="$(string::trim-left "${a49}")";(( a8 == 0 )) || printf "%${a8}s" " ";echo "${a49}";done;};string::trim-left() { local a11="${1}";local a21="${2:-" "$'\n'$'\t'}";[[ -n ${a11:-} ]] || return 0;[[ ${a11} != '-' ]] || a11="$(cat)";while [[ -n "${a11}" ]];do [[ ${a21} == *${a11:0:1}* ]] || break;a11="${a11:1}";done;echo "${a11}";};string::trim-right() { local a11="${1:-'-'}";local a21="${2:-" "$'\n'$'\t'}";[[ ${a11} != '-' ]] || a11="$(cat)";while [[ -n "${a11}" ]];do [[ ${a21} == *${a11: -1}* ]] || break;a11="${a11:0: -1}";done;echo "${a11}";};string::trim() { local a11="${1:-'-'}";local a21="${2:-" "$'\n'$'\t'}";[[ ${a11} != '-' ]] || a11="$(cat)";echo "${a11}" | string::trim-left - "${a21}" | string::trim-right - "${a21}";};to::string() { local a17="${1}";echo "${a17}";};to::boolean() { local a17="${1}";case "${a17}" in
""|"false"|"0")a17="0";;
*)a17="1";;
esac;echo "${a17}";};to::int() { local a17="${1}";[[ ${a17} =~ ^-?[0-9]+$ ]] || return 1;echo "${a17}";};to::float() { local a17="${1}";[[ ${a17} =~ ^-?[0-9]+(\.[0-9]+)?$ ]] || return 1;echo "${a17}";};to::stdin() { local a17="${1}";[[ ${a17} != "-" ]] || a17="$(cat)";echo "${a17}";};to::file() { local a17="${1}";[[ -f "${a17}" ]] || return 1;echo "${a17}";};[[ "${BASH_SOURCE[0]}" != "${0}" ]] || argsh::shebang "${@}"