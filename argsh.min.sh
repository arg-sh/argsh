#!/usr/bin/env bash
# shellcheck disable=SC2178 disable=SC2120 disable=SC1090 disable=SC2046 disable=SC2155
ARGSH_COMMIT_SHA="a73a6bf9454c36f920086c49f409f6185e5c4096"; ARGSH_VERSION="v0.0.3"
: "${ARGSH_VERSION:=unknown}";: "${ARGSH_COMMIT_SHA:=unknown}";: "${ARGSH_FIELD_WIDTH:=24}";COMMANDNAME=("$(s="${ARGSH_SOURCE:-"${0}"}"; echo "${s##*/}")");:usage() { local a28="${1}"; shift;declare -p usage &>/dev/null || local -a usage=();declare -p args &>/dev/null || local -a args=();[[ $(( ${#usage[@]} % 2 )) -eq 0 ]] || :args::_error "usage must be an associative array";[[ $(( ${#usage[@]} % 2 )) -eq 0 ]] || :args::_error "usage must be an associative array";if [[ -z ${1:-} || ${1} == "-h" || ${1} == "--help" ]]; then :usage::text "${a28}";exit 0;fi;if ! (( ${#COMMANDNAME[@]} )) && [[ ${1:-} == "--argsh" ]]; then echo "https://arg.sh ${ARGSH_COMMIT_SHA:-} ${ARGSH_VERSION:-}";exit 0;fi;local -A a17=();local -a a58=("${@}");local a49 a27="";while (( ${#a58[@]} )); do if [[ ${a58[0]:0:1} != "-" ]]; then [[ -z "${a49:-}" ]] || break;a49="${a58[0]}";a58=("${a58[@]:1}");continue;fi;:args::parse_flag || break;a17["${a27}"]=1;done;:args::check_required_flags;local a45;for (( a60=0; a60 < ${#usage[@]}; a60+=2 )); do for a26 in $(echo "${usage[a60]/:*}" | tr '|' "\n"); do a26="${a26#\#}";[[ "${a49}" == "${a26}" ]] || continue;a27="${usage[a60]#\#}";a45="${usage[a60]/*:-}";a45="${a45#\#}";[[ "${a45}" == "${usage[a60]}" ]] || break 2;a45="${a45/|*}";break 2;done;done;[[ -n "${a45:-}" ]] || :args::error_usage "Invalid command: ${a49}";COMMANDNAME+=("${a27/[|:]*}");usage=("${a45}" "${a58[@]}");};:usage::text() { local a28="${1:-}";string::indent "${a28}";echo;echo "Usage: ${COMMANDNAME[*]} <command> [args]";[[ ${usage[0]:-} == '-' ]] || echo -e "\nAvailable Commands:";for (( a60=0; a60 < ${#usage[@]}; a60+=2 )); do [[ "${usage[a60]:0:1}" != "#" ]] || continue;[[ "${usage[a60]}" != "-" ]] || { echo;echo "${usage[a60+1]}";continue;};printf "  %-${ARGSH_FIELD_WIDTH}s %s\n" "${usage[a60]/[:|]*}" "${usage[a60+1]}";done;:args::text_flags;echo;echo "Use \"${COMMANDNAME[*]} <command> --help\" for more information about a command.";};:args() { local a28="${1}"; shift;declare -p args &>/dev/null || local -a args=();[[ $(( ${#args[@]} % 2 )) -eq 0 ]] || :args::_error "args must be an associative array";if [[ ${1:-} == "-h" || ${1:-} == "--help" ]]; then :args::text;exit 0;fi;local a27="" a60 a0=1;local -A a17=();local -a a58=("${@}");while (( ${#a58[@]} )); do if [[ ${a58[0]:0:1} != "-" ]]; then a60="$(:args::field_positional "${a0}")" || :args::error_usage "too many arguments: ${a58[0]}";a27="${args[a60]}";local -n a50="$(args::field_name "${a27}")";a50="$(:args::field_value "${a58[0]}")" || exit "${?}";a58=("${a58[@]:1}");(( ++a0 ));continue;fi;:args::parse_flag || :args::error_usage "unknown a33: ${a58[0]}";a17["${a27}"]=1;done;if a60="$(:args::field_positional "${a0}")"; then a27="$(args::field_name "${args[a60]}")";if is::uninitialized "${a27}" && ! is::array "${a27}"; then :args::error_usage "missing required argument: ${a27}";fi;fi;:args::check_required_flags;[[ ${#a58[@]} -eq 0 ]] || :args::error_usage "too many arguments: ${a58[*]}";};:args::text() { declare -p args &>/dev/null || return 0;local -a a1=() a9=();:args::positional
string::indent "${a28}";echo;echo "Usage:";echo "  ${COMMANDNAME[*]} ${a9[*]}";(( ${#a1[@]} == 0 )) || { echo;echo "Arguments:";for a60 in "${a1[@]}"; do [[ ${args[a60]} != "-" ]] || continue;a43="$(printf "   %-${ARGSH_FIELD_WIDTH}s%s" " " "${args[a60+1]}" | fmt::tty;)";printf "   %-${ARGSH_FIELD_WIDTH}s%s\n" "$(:args::fieldf "${args[a60]}")" "$(string::trim-left "${a43}")";done;};:args::text_flags;echo;};:args::text_flags() { local -a args=("${args[@]}");local -a a32=();array::contains 'help|h:+' "${args[@]}" || args+=('help|h:+' "Show this help message");:args::flags;(( ${#a32[@]} )) || return 0;[[ "${args[${a32[0]}]}" == "-" ]] || echo -e "\nOptions:";for a60 in "${a32[@]}"; do [[ "${args[a60]:0:1}" != "#" ]] || continue;[[ "${args[a60]}" != "-" ]] || { echo;echo "${args[a60+1]}";continue;};:args::fieldf "${args[a60]}";{ echo -n "           ";echo -e "${args[a60+1]}\n";} | fmt::tty;done;};:args::flags() { declare -p args &>/dev/null || local -a args;declare -p a32 &>/dev/null || local -a a32;for (( a60=0; a60 < "${#args[@]}"; a60+=2 )); do if [[ ${args[a60]} == *"|"* || ${args[a60]} == '-' ]]; then a32+=("${a60}");fi;done;};:args::positional() { declare -p args &>/dev/null || local -a args;declare -p a1 &>/dev/null || local -a a1;declare -p a9 &>/dev/null || local -a a9;local a50;for (( a60=0; a60 < "${#args[@]}"; a60+=2 )); do [[ ${args[a60]} != *"|"* && ${args[a60]} != '-' ]] || continue;a50="$(args::field_name "${args[a60]}")";a1+=("${a60}");if is::array "${a50}"; then a9+=("...${a50}");continue;fi;if ! is::uninitialized "${a50}"; then a9+=("[${a50}]");continue;fi;a9+=("<${a50}>");done;};:args::parse_flag() { declare -p a58 a27 &>/dev/null || return 1;local a33="${a58[0]/=*}";if [[ ${a33:0:2} == "--" ]]; then a27="$(:args::field_lookup "${a33:2}")" || return "${?}";elif [[ ${a33:0:1} == "-" ]]; then a33="${a33:0:2}";a27="$(:args::field_lookup "${a33:1}")" || return "${?}";fi;:args::field_set_flag "${a27}";};:args::check_required_flags() { declare -p a17 args &>/dev/null || return 1;local a27;local -a a23;for (( a60=0; a60 < ${#args[@]}; a60+=2 )); do a27="${args[a60]}";:args::field_attrs "${a27}";if (( a23[2] )) && ! (( a23[4] )); then local -n a50="${a23[0]}";a50=0;fi;if (( a23[6] )) && [[ -z ${a17[${args[a60]}]:-} ]]; then :args::error_usage "missing required a33: ${args[a60]/|*}";fi;done;};:args::field_set_flag() { local a27="${1}";declare -p a58 a33 &>/dev/null || return 1;local -a a23;:args::field_attrs "${a27}";local -n a50="${a23[0]}";local a3 a4;if (( a23[2] )); then a3=1;if [[ ${a33:0:2} == "--" ]]; then a58=("${a58[@]:1}");else a58[0]="-${a58[0]:2}";[[ ${a58[0]} != "-" ]] || a58=("${a58[@]:1}");fi;fi;[[ -n ${a3:-} ]] || { a4="${a58[0]/${a33}}";if [[ ${a4} == "" ]]; then (( ${#a58[@]} )) || :args::error "missing value for a33: ${a23[0]}";a3="${a58[1]}";a58=("${a58[@]:1}");else [[ "${a4:0:1}" != "=" ]] || a4="${a4:1}";a3="${a4}";fi;a3="$(:args::field_value "${a3}")" || exit "${?}";a58=("${a58[@]:1}");};if (( a23[5] )); then a50+=("${a3}");else a50="${a3}";fi;};:args::field_value() { local a29="${1}";declare -p a27 &>/dev/null || return 1;declare -p a23 &>/dev/null || { local -a a23;:args::field_attrs "${a27}";};declare -f "to::${a23[3]}" &>/dev/null || :args::_error "unknown type: ${a23[3]}";"to::${a23[3]}" "${a29}" "${a23[0]}" || :args::error_usage "invalid type (${a23[3]}): ${a29}";};:args::field_lookup() { local a27="${1}";declare -p args &>/dev/null || return 1;for (( a60=0; a60 < ${#args[@]}; a60+=2 )); do if [[ ${args[a60]} =~ (^${a27}\||\|${a27}:|\|${a27}$) ]]; then echo "${args[a60]}";return 0;fi;done;return 1;};:args::field_positional() { local a5="${1:-1}";declare -p args &>/dev/null || return 1;for (( a60=0; a60 < ${#args[@]}; a60+=2 )); do if [[ ${args[a60]} != *"|"* && ${args[a60]} != '-' ]]; then if is::array "$(args::field_name "${args[a60]}")" || (( --a5 == 0 )); then echo "${a60}";return 0;fi;fi;done;return 1;};args::field_name() { local a27="${1}";local a25="${2:-1}";a27="${a27/[|:]*}";a27="${a27#\#}";if (( a25 )); then a27="${a27//-/_}";fi;echo "${a27}";};:args::field_attrs() { local a27="${1}";declare -p a23 &>/dev/null || local -a a23;a23=("" "" 0 "" 0 0 0 0 "" );local a46="+~!";local a37="${a27#*[:]}";[ "${a37}" != "${a27}" ] || a37="";a23[0]="$(args::field_name "${a27}")";a23[8]="$(args::field_name "${a27}" 0)";[[ ${a23[0]:0:1} != "#" ]] || { a23[7]=1;};local -n a50="${a23[0]}";local -a a32;mapfile -t a32 < <(echo "${a27/[:]*}" | tr '|' '\n');[[ ${#a32[@]} -eq 1 ]] || { a23[1]="${a32[1]}";};if is::array "${a23[0]}"; then a23[5]=1;! is::uninitialized "${a23[0]}" || a50=();! (( ${#a50[@]} )) || a23[4]=1;elif ! is::uninitialized "${a23[0]}"; then a23[4]=1;fi;while (( ${#a37} > 0 )); do if [[ ${a37:0:1} == "+" ]]; then [[ -z ${a23[3]} ]] || :args::_error "cannot have multiple types: ${a23[3]} and boolean";a23[2]=1;a37="${a37:1}";continue;fi;if [[ ${a37:0:1} == "~" ]]; then ! (( a23[2] )) || :args::_error "already flagged as boolean";a37="${a37:1}";a23[3]="${a37/[$a46]*}";a37="${a37:${#a23[3]}}";continue;fi;if [[ ${a37:0:1} == "!" ]]; then ! (( a23[6] )) || :args::_error "field already flagged as required";a23[6]=1;a37="${a37:1}";continue;fi;echo ":args error: unknown modifier: ${a37:0:1}" >&2;exit 2;done;if [[ -z ${a23[3]} && ${a23[2]} -eq 0 ]]; then a23[3]="string";fi;};:args::fieldf() { local a27="${1}";declare -p a23 &>/dev/null || { local -a a23;:args::field_attrs "${a27}";};[[ ${a27} == *"|"* ]] || { echo "${a23[8]} ${a23[3]}";return 0;};local -n a50="${a23[0]}";a13="   ";! (( a23[6] )) || a13=" ! ";if [[ -n ${a23[1]} ]]; then a13+="-${a23[1]}, --${a23[8]}";else a13+="    --${a23[8]}";fi;a13+=" ";! (( a23[5] )) || a13+="...";a13+="${a23[3]}";if (( a23[4] )) && ! (( a23[2] )); then a13+=" (default: ${a50[*]})";fi;echo "${a13}";};args::run() { local a52="${1}"; shift;for (( a60=0; a60<${#}; a60++ )); do local a56="${1}"; shift;local a45="${1}"; shift;if ! (( a52 )) || (( a56 )); then "${a45}";fi;done;};array::contains() { local -r a16="${1}"; shift;for a6 in "${@}"; do [[ "${a6}" != "${a16}" ]] || return 0;done;return 1;};array::join() { local -r a2="${1}"; shift;local a12;printf -v a12 "${a2}%s" "${@}";echo "${a12:${#a2}}";};array::nth() { local -n a57="${1}";local -r a55="${2}";shift 2;for (( a60=1; a60<=${#}; a60++ )); do (( a60 % a55 )) || a57+=("${!a60}");done;};bash::version() { local a19="${1:-4}";local a21="${2:-3}";local a24="${3:-0}";local -a a7;read -ra a7 <<< "$(echo "${BASH_VERSION}" | tr '.' ' ')";if [[ "${a7[0]}" -lt "${a19}" ]]; then return 1;elif [[ "${a7[0]}" -gt "${a19}" ]]; then return 0;fi;if [[ "${a7[1]}" -lt "${a21}" ]]; then return 1;elif [[ "${a7[1]}" -gt "${a21}" ]]; then return 0;fi;if [[ "${a7[2]}" -lt "${a24}" ]]; then return 1;fi;return 0;};binary::exists() { local a11="${1}";command -v "${a11}" &> /dev/null || { echo "${a11} is required to run this script" >&2;return 1;};};binary::github() { local a38="${1}";local -r a11="$(basename "${a38}")";local a36="${2}";local a41="${3}";local a51="${4:-}";curl -Lso /dev/stdout "https://github.com/${a36}/releases/download/${a41}" | { if [[ -n "${a51}" ]]; then tar -xz -C "$(dirname "${a38}")" "${a51}";else tee "${a38}" &> /dev/null;fi;chmod +x "${a38}";};};binary::arch() { local a18="${1}";local -r a34="$(uname -m)";case "${a34}" in
x86_64|amd64) if (( a18 )); then echo "64-bit"; else echo "amd64"; fi ;;
armv7l) echo "arm" ;;
aarch64) echo "arm64" ;;
*) echo "${a34}" ;;
esac;};binary::jq() { binary::exists "jq" 2>/dev/null || { local -r a14="$(github::latest "stedolan/jq")" system="$(uname -s)";binary::github "${PATH_BIN?}/jq" "stedolan/jq" "${a14}/jq-${system,,}-$(binary::arch)";};};binary::vale() { binary::exists "vale" 2>/dev/null || { local -r a14="$(github::latest "errata-ai/vale")" system="$(uname -s)";binary::github "${PATH_BIN?}/vale" "errata-ai/vale" "${a14}/vale_${a14:1}_$(uname -s)_$(binary::arch 1).tar.gz" "vale";};};docker::user() { local a59="${1:-"$(id -u)"}";local a54="${2:-"$(id -g)"}";local a39="${3:-"$(whoami)"}";local a42="${4:-"/workspace"}";local a31="${5:-"/bin/sh"}";echo "${a39}:x:${a59}:${a54}::${a42}:${a31}" > /tmp/docker_passwd;echo "${a39}:x:${a54}:" > /tmp/docker_group;echo "-v /tmp/docker_passwd:/etc/passwd -v /tmp/docker_group:/etc/group";echo "-u ${a59}:${a54}";echo "-v ${PATH_BASE:-.}:${a42}";echo "-w ${a42}";};error::stacktrace() { local -r a40="${1:-${?}}";if (( a40 )); then echo -e "\n\033[38;5;196m■■ Stacktrace(${a40}): \e[1m${BASH_COMMAND}\e[22m";for a60 in $(seq 1 $((${#FUNCNAME[@]} - 2))); do echo -e "${a60}. ${BASH_SOURCE[a60]}:${BASH_LINENO[a60-1]} ➜ ${FUNCNAME[a60]}()";done;echo -e "\033[0m";return "${a40}";fi;};:args::_error() { declare -p a27 &>/dev/null || local a27="???";echo ":args error [${a27}] ➜ ${1}" >&2;exit 2;};:args::error() { declare -p a27 &>/dev/null || local a27="???";echo -e "[ ${a27/[:|]*} ] invalid argument\n➜ ${1}\n" >&2;exit 2;};:args::error_usage() { declare -p a27 &>/dev/null || local a27="???";echo -e "[ ${a27/[:|]*} ] invalid usage\n➜ ${1}\n" >&2;echo -e "Use \"${0##*/} -h\" for more information" >&2;exit 2;};fmt::tty() { local a53="${1:-"$(cat)"}";if ! command -v fmt &>/dev/null || [[ ! -t 1 ]]; then echo "${a53}";return 0;fi;local a35;a35="$(tput cols)";echo "${a53}" | fmt -w "${a35}";};github::latest() { local a36="${1}";curl -fsSLI -o /dev/null -w "%{url_effective}" "https://github.com/${a36}/releases/latest" | rev | cut -d'/' -f1 | rev;};is::tty() { [[ -t 1 ]];};is::array() { declare -p "${1}" &>/dev/null && [[ $(declare -p "${1}") == "declare -a"* ]];};is::uninitialized() { local a47="${1}";if is::array "${a47}"; then [[ $(declare -p "${a47}") == "declare -a ${a47}" ]];else [[ ! ${!a47+x} ]];fi;};is::set() { ! is::uninitialized "${1}";};argsh::shebang() { local -r a41="${1}";: "${ARGSH_SOURCE="${a41}"}";export ARGSH_SOURCE;[[ "${BASH_SOURCE[-1]}" != "${a41}" && -f "${a41}" ]] || { binary::exists docker || { echo "This script requires Docker to be installed";return 1;} >&2;local a48="";[[ ! -t 1 ]] || a48="-it";docker run --rm ${a48} $(docker::user) -e "BATS_LOAD" -e "ARGSH_SOURCE" -e "GIT_COMMIT_SHA=$(git rev-parse HEAD || :)" -e "GIT_VERSION=$(git describe --tags --dirty || :)" ghcr.io/arg-sh/argsh:latest "${@}" ;return 0;} >&2;bash::version 4 3 0 || { echo "This script requires bash 4.3.0 or later";return 1;} >&2;shift;. "${a41}";};string::drop-index() { local a10="${1}";local a22="${2}";local a8="${3:-1}";echo "${a10:0:a22}${a10:a22+a8}";};string::random() { local a8="${1:-42}";local a30="${2:-"a-zA-Z0-9"}";local a53;until [[ "${a53:-}" =~ ^[:alpha:] ]]; do a53=$(tr -dc "${a30}" < /dev/urandom | fold -w "${a8}" | head -n 1 || :);done;echo "${a53}";};string::indent() { local a10="${1:-'-'}";local a15="${2:-0}";local a44 a20;[[ ${a10} != '-' ]] || a10="$(cat)";mapfile -t a20 < <(echo "${a10}");for a44 in "${a20[@]}"; do a44="$(string::trim-left "${a44}")";(( a15 == 0 )) || printf "%${a15}s" " " ;echo "${a44}";done;};string::trim-left() { local a10="${1}";local a30="${2:-" "$'\n'$'\t'}";[[ -n ${a10:-} ]] || return 0;[[ ${a10} != '-' ]] || a10="$(cat)" ;while [[ -n "${a10}" ]]; do [[ ${a30} == *${a10:0:1}* ]] || break;a10="${a10:1}";done;echo "${a10}";};string::trim-right() { local a10="${1:-'-'}";local a30="${2:-" "$'\n'$'\t'}";[[ ${a10} != '-' ]] || a10="$(cat)";while [[ -n "${a10}" ]]; do [[ ${a30} == *${a10: -1}* ]] || break;a10="${a10:0: -1}";done;echo "${a10}";};string::trim() { local a10="${1:-'-'}";local a30="${2:-" "$'\n'$'\t'}";[[ ${a10} != '-' ]] || a10="$(cat)" ;echo "${a10}" | string::trim-left - "${a30}" | string::trim-right - "${a30}";};to::string() { local a29="${1}";echo "${a29}";};to::boolean() { local a29="${1}";case "${a29}" in
""|"false"|"0") a29="0" ;;
*) a29="1" ;;
esac;echo "${a29}";};to::int() { local a29="${1}";[[ ${a29} =~ ^-?[0-9]+$ ]] || return 1;echo "${a29}";};to::float() { local a29="${1}";[[ ${a29} =~ ^-?[0-9]+(\.[0-9]+)?$ ]] || return 1;echo "${a29}";};to::stdin() { local a29="${1}";[[ ${a29} != "-" ]] || a29="$(cat)";echo "${a29}";};to::file() { local a29="${1}";[[ -f "${a29}" ]] || return 1;echo "${a29}";};[[ "${BASH_SOURCE[0]}" != "${0}" ]] || argsh::shebang "${@}"