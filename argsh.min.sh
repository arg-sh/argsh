#!/usr/bin/env bash
# shellcheck disable=SC2178 disable=SC2120 disable=SC1090 disable=SC2046
: "${ARGSH_FIELD_WIDTH:=24}";COMMANDNAMES=("$(s="${ARGSH_SOURCE:-"${0}"}"; echo "${s##*/}")");:usage() { local a16="${1}"; shift;declare -p usage &>/dev/null || local -a usage=();declare -p args &>/dev/null || local -a args=();[[ $(( ${#usage[@]} % 2 )) -eq 0 ]] || :args::_error "usage must be an associative array";[[ $(( ${#usage[@]} % 2 )) -eq 0 ]] || :args::_error "usage must be an associative array";if [[ -z ${1:-} || ${1} == "-h" || ${1} == "--help" ]]; then :usage::text "${a16}";exit 0;fi;local -A a29=();local -a a48=("${@}");local a55 a20="";while (( ${#a48[@]} )); do if [[ ${a48[0]:0:1} != "-" ]]; then [[ -z "${a55:-}" ]] || break;a55="${a48[0]}";a48=("${a48[@]:1}");continue;fi;:args::parse_flag || break;a29["${a20}"]=1;done;:args::check_required_flags;local a37;for (( a58=0; a58 < ${#usage[@]}; a58+=2 )); do for a27 in $(echo "${usage[a58]/:*}" | tr '|' "\n"); do a27="${a27#\#}";[[ "${a55}" == "${a27}" ]] || continue;a20="${usage[a58]#\#}";a37="${usage[a58]/*:-}";a37="${a37#\#}";[[ "${a37}" == "${usage[a58]}" ]] || break 2;a37="${a37/|*}";break 2;done;done;[[ -n "${a37:-}" ]] || :args::error_usage "Invalid command: ${a55}";COMMANDNAMES+=("${a20/[|:]*}");usage=("${a37}" "${a48[@]}");};:usage::text() { local a16="${1:-}";string::trim-left-lines "${a16}";echo;echo "Usage: ${COMMANDNAMES[*]} <command> [args]";[[ ${usage[0]:-} == '-' ]] || echo -e "\nAvailable Commands:";for (( a58=0; a58 < ${#usage[@]}; a58+=2 )); do [[ "${usage[a58]:0:1}" != "#" ]] || continue;[[ "${usage[a58]}" != "-" ]] || { echo;echo "${usage[a58+1]}";continue;};printf "  %-${ARGSH_FIELD_WIDTH}s %s\n" "${usage[a58]/[:|]*}" "${usage[a58+1]}";done;:args::text_flags;echo;echo "Use \"${COMMANDNAMES[*]} <command> --help\" for more information about a command.";};:args() { local a16="${1}"; shift;declare -p args &>/dev/null || local -a args=();[[ $(( ${#args[@]} % 2 )) -eq 0 ]] || :args::_error "args must be an associative array";if [[ ${1:-} == "-h" || ${1:-} == "--help" ]]; then :args::text;exit 0;fi;local a20="" a58 a0=1;local -A a29=();local -a a48=("${@}");while (( ${#a48[@]} )); do if [[ ${a48[0]:0:1} != "-" ]]; then a58="$(:args::field_positional "${a0}")" || :args::error_usage "too many arguments: ${a48[0]}";a20="${args[a58]}";local -n a50="$(args::field_name "${a20}")";a50="$(:args::field_value "${a48[0]}")" || exit "${?}";a48=("${a48[@]:1}");(( ++a0 ));continue;fi;:args::parse_flag || :args::error_usage "unknown a38: ${a48[0]}";a29["${a20}"]=1;done;if a58="$(:args::field_positional "${a0}")"; then a20="$(args::field_name "${args[a58]}")";if is::uninitialized "${a20}" && ! is::array "${a20}"; then :args::error_usage "missing required argument: ${a20}";fi;fi;:args::check_required_flags;[[ ${#a48[@]} -eq 0 ]] || :args::error_usage "too many arguments: ${a48[*]}";};:args::text() { declare -p args &>/dev/null || return 0;local -a a1=() a13=();:args::positional
string::trim-left-lines "${a16}";echo;echo "Usage:";echo "  ${COMMANDNAMES[*]} ${a13[*]}";(( ${#a1[@]} == 0 )) || { echo;echo "Arguments:";for a58 in "${a1[@]}"; do [[ ${args[a58]} != "-" ]] || continue;a40="$(printf "   %-${ARGSH_FIELD_WIDTH}s%s" " " "${args[a58+1]}" | fmt::tty;)";printf "   %-${ARGSH_FIELD_WIDTH}s%s\n" "$(:args::fieldf "${args[a58]}")" "$(string::trim-left "${a40}")";done;};:args::text_flags;echo;};:args::text_flags() { local -a args=("${args[@]}");local -a a18=();array::contains 'help|h:+' "${args[@]}" || args+=('help|h:+' "Show this help message");:args::flags;(( ${#a18[@]} )) || return 0;[[ "${args[${a18[0]}]}" == "-" ]] || echo -e "\nOptions:";for a58 in "${a18[@]}"; do [[ "${args[a58]:0:1}" != "#" ]] || continue;[[ "${args[a58]}" != "-" ]] || { echo;echo "${args[a58+1]}";continue;};:args::fieldf "${args[a58]}";{ echo -n "           ";echo -e "${args[a58+1]}\n";} | fmt::tty;done;};:args::flags() { declare -p args &>/dev/null || local -a args;declare -p a18 &>/dev/null || local -a a18;for (( a58=0; a58 < "${#args[@]}"; a58+=2 )); do if [[ ${args[a58]} == *"|"* || ${args[a58]} == '-' ]]; then a18+=("${a58}");fi;done;};:args::positional() { declare -p args &>/dev/null || local -a args;declare -p a1 &>/dev/null || local -a a1;declare -p a13 &>/dev/null || local -a a13;local a50;for (( a58=0; a58 < "${#args[@]}"; a58+=2 )); do [[ ${args[a58]} != *"|"* && ${args[a58]} != '-' ]] || continue;a50="$(args::field_name "${args[a58]}")";a1+=("${a58}");if is::array "${a50}"; then a13+=("...${a50}");continue;fi;if ! is::uninitialized "${a50}"; then a13+=("[${a50}]");continue;fi;a13+=("<${a50}>");done;};:args::parse_flag() { declare -p a48 a20 &>/dev/null || return 1;local a38="${a48[0]/=*}";if [[ ${a38:0:2} == "--" ]]; then a20="$(:args::field_lookup "${a38:2}")" || return "${?}";elif [[ ${a38:0:1} == "-" ]]; then a38="${a38:0:2}";a20="$(:args::field_lookup "${a38:1}")" || return "${?}";fi;:args::field_set_flag "${a20}";};:args::check_required_flags() { declare -p a29 args &>/dev/null || return 1;local a20;local -a a25;for (( a58=0; a58 < ${#args[@]}; a58+=2 )); do a20="${args[a58]}";:args::field_attrs "${a20}";if (( a25[2] )) && ! (( a25[4] )); then local -n a50="${a25[0]}";a50=0;fi;if (( a25[6] )) && [[ -z ${a29[${args[a58]}]:-} ]]; then :args::error_usage "missing required a38: ${args[a58]/|*}";fi;done;};:args::field_set_flag() { local a20="${1}";declare -p a48 a38 &>/dev/null || return 1;local -a a25;:args::field_attrs "${a20}";local -n a50="${a25[0]}";local a4 a3;if (( a25[2] )); then a4=1;if [[ ${a38:0:2} == "--" ]]; then a48=("${a48[@]:1}");else a48[0]="-${a48[0]:2}";[[ ${a48[0]} != "-" ]] || a48=("${a48[@]:1}");fi;fi;[[ -n ${a4:-} ]] || { a3="${a48[0]/${a38}}";if [[ ${a3} == "" ]]; then (( ${#a48[@]} )) || :args::error "missing value for a38: ${a25[0]}";a4="${a48[1]}";a48=("${a48[@]:1}");else [[ "${a3:0:1}" != "=" ]] || a3="${a3:1}";a4="${a3}";fi;a4="$(:args::field_value "${a4}")" || exit "${?}";a48=("${a48[@]:1}");};if (( a25[5] )); then a50+=("${a4}");else a50="${a4}";fi;};:args::field_value() { local a23="${1}";declare -p a20 &>/dev/null || return 1;declare -p a25 &>/dev/null || { local -a a25;:args::field_attrs "${a20}";};declare -f "to::${a25[3]}" &>/dev/null || :args::_error "unknown type: ${a25[3]}";"to::${a25[3]}" "${a23}" "${a25[0]}" || :args::error_usage "invalid type (${a25[3]}): ${a23}";};:args::field_lookup() { local a20="${1}";declare -p args &>/dev/null || return 1;for (( a58=0; a58 < ${#args[@]}; a58+=2 )); do if [[ ${args[a58]} =~ (^${a20}\||\|${a20}:|\|${a20}$) ]]; then echo "${args[a58]}";return 0;fi;done;return 1;};:args::field_positional() { local a5="${1:-1}";declare -p args &>/dev/null || return 1;for (( a58=0; a58 < ${#args[@]}; a58+=2 )); do if [[ ${args[a58]} != *"|"* && ${args[a58]} != '-' ]]; then if is::array "$(args::field_name "${args[a58]}")" || (( --a5 == 0 )); then echo "${a58}";return 0;fi;fi;done;return 1;};args::field_name() { local a20="${1}";local a24="${2:-1}";a20="${a20/[|:]*}";a20="${a20#\#}";if (( a24 )); then a20="${a20//-/_}";fi;echo "${a20}";};:args::field_attrs() { local a20="${1}";declare -p a25 &>/dev/null || local -a a25;a25=("" "" 0 "" 0 0 0 0 "" );local a41="+~!";local a43="${a20#*[:]}";[ "${a43}" != "${a20}" ] || a43="";a25[0]="$(args::field_name "${a20}")";a25[8]="$(args::field_name "${a20}" 0)";[[ ${a25[0]:0:1} != "#" ]] || { a25[7]=1;};local -n a50="${a25[0]}";local -a a18;mapfile -t a18 < <(echo "${a20/[:]*}" | tr '|' '\n');[[ ${#a18[@]} -eq 1 ]] || { a25[1]="${a18[1]}";};if is::array "${a25[0]}"; then a25[5]=1;! is::uninitialized "${a25[0]}" || a50=();! (( ${#a50[@]} )) || a25[4]=1;elif ! is::uninitialized "${a25[0]}"; then a25[4]=1;fi;while (( ${#a43} > 0 )); do if [[ ${a43:0:1} == "+" ]]; then [[ -z ${a25[3]} ]] || :args::_error "cannot have multiple types: ${a25[3]} and boolean";a25[2]=1;a43="${a43:1}";continue;fi;if [[ ${a43:0:1} == "~" ]]; then ! (( a25[2] )) || :args::_error "already flagged as boolean";a43="${a43:1}";a25[3]="${a43/[$a41]*}";a43="${a43:${#a25[3]}}";continue;fi;if [[ ${a43:0:1} == "!" ]]; then ! (( a25[6] )) || :args::_error "field already flagged as required";a25[6]=1;a43="${a43:1}";continue;fi;echo ":args error: unknown modifier: ${a43:0:1}" >&2;exit 2;done;if [[ -z ${a25[3]} && ${a25[2]} -eq 0 ]]; then a25[3]="string";fi;};:args::fieldf() { local a20="${1}";declare -p a25 &>/dev/null || { local -a a25;:args::field_attrs "${a20}";};[[ ${a20} == *"|"* ]] || { echo "${a25[8]} ${a25[3]}";return 0;};local -n a50="${a25[0]}";a12="   ";! (( a25[6] )) || a12=" ! ";if [[ -n ${a25[1]} ]]; then a12+="-${a25[1]}, --${a25[8]}";else a12+="    --${a25[8]}";fi;a12+=" ";! (( a25[5] )) || a12+="...";a12+="${a25[3]}";if (( a25[4] )) && ! (( a25[2] )); then a12+=" (default: ${a50[*]})";fi;echo "${a12}";};args::run() { local a56="${1}"; shift;for (( a58=0; a58<${#}; a58++ )); do local a49="${1}"; shift;local a37="${1}"; shift;if ! (( a56 )) || (( a49 )); then "${a37}";fi;done;};array::contains() { local -r a15="${1}"; shift;for a6 in "${@}"; do [[ "${a6}" != "${a15}" ]] || return 0;done;return 1;};array::join() { local -r a2="${1}"; shift;local a14;printf -v a14 "${a2}%s" "${@}";echo "${a14:${#a2}}";};array::nth() { local -n a51="${1}";local -r a54="${2}";shift 2;for (( a58=1; a58<=${#}; a58++ )); do (( a58 % a54 )) || a51+=("${!a58}");done;};bash::version() { local a19="${1:-4}";local a21="${2:-3}";local a22="${3:-0}";local -a a7;read -ra a7 <<< "$(echo "${BASH_VERSION}" | tr '.' ' ')";if [[ "${a7[0]}" -lt "${a19}" ]]; then return 1;elif [[ "${a7[0]}" -gt "${a19}" ]]; then return 0;fi;if [[ "${a7[1]}" -lt "${a21}" ]]; then return 1;elif [[ "${a7[1]}" -gt "${a21}" ]]; then return 0;fi;if [[ "${a7[2]}" -lt "${a22}" ]]; then return 1;fi;return 0;};binary::exists() { local a8="${1}";command -v "${a8}" &> /dev/null || { echo "${a8} is required to run this script" >&2;return 1;};};binary::github() { local a35="${1}";local -r a8="$(basename "${a35}")";local a42="${2}";local a44="${3}";local a47="${4:-}";curl -Lso /dev/stdout "https://github.com/${a42}/releases/download/${a44}" | { if [[ -n "${a47}" ]]; then tar -xz -C "$(dirname "${a35}")" "${a47}";else tee "${a35}" &> /dev/null;fi;chmod +x "${a35}";};};binary::arch() { local a28="${1}";local -r a39="$(uname -m)";case "${a39}" in
x86_64|amd64) if (( a28 )); then echo "64-bit"; else echo "amd64"; fi ;;
armv7l) echo "arm" ;;
aarch64) echo "arm64" ;;
*) echo "${a39}" ;;
esac;};binary::jq() { binary::exists "jq" 2>/dev/null || { local -r a11="$(github::latest "stedolan/jq")" system="$(uname -s)";binary::github "${PATH_BIN?}/jq" "stedolan/jq" "${a11}/jq-${system,,}-$(binary::arch)";};};binary::vale() { binary::exists "vale" 2>/dev/null || { local -r a11="$(github::latest "errata-ai/vale")" system="$(uname -s)";binary::github "${PATH_BIN?}/vale" "errata-ai/vale" "${a11}/vale_${a11:1}_$(uname -s)_$(binary::arch 1).tar.gz" "vale";};};docker::user() { local a57="${1:-"$(id -u)"}";local a46="${2:-"$(id -g)"}";local a36="${3:-"$(whoami)"}";local a45="${4:-"/workspace"}";local a17="${5:-"/bin/sh"}";echo "${a36}:x:${a57}:${a46}::${a45}:${a17}" > /tmp/docker_passwd;echo "${a36}:x:${a46}:" > /tmp/docker_group;echo -v "${PATH_BASE:-.}:${a45}";echo -v /tmp/docker_passwd:/etc/passwd -v /tmp/docker_group:/etc/group;echo -u "${a57}:${a46}";echo -w "${a45}";};error::stacktrace() { local -r a34="${1:-${?}}";if (( a34 )); then echo -e "\n\033[38;5;196m■■ Stacktrace(${a34}): \e[1m${BASH_COMMAND}\e[22m";for a58 in $(seq 1 $((${#FUNCNAME[@]} - 2))); do echo -e "${a58}. ${BASH_SOURCE[a58]}:${BASH_LINENO[a58-1]} ➜ ${FUNCNAME[a58]}()";done;echo -e "\033[0m";return "${a34}";fi;};:args::_error() { declare -p a20 &>/dev/null || local a20="???";echo ":args error [${a20}] ➜ ${1}" >&2;exit 2;};:args::error() { declare -p a20 &>/dev/null || local a20="???";echo -e "[ ${a20/[:|]*} ] invalid argument\n➜ ${1}\n" >&2;exit 2;};:args::error_usage() { declare -p a20 &>/dev/null || local a20="???";echo -e "[ ${a20/[:|]*} ] invalid usage\n➜ ${1}\n" >&2;echo -e "Use \"${0##*/} -h\" for more information" >&2;exit 2;};fmt::tty() { local a53="${1:-"$(cat)"}";command -v fmt &>/dev/null || { echo "${a53}";return 0;};local a32;a32="$(tput cols)";echo "${a53}" | fmt -w "${a32}";};github::latest() { local a42="${1}";curl -fsSLI -o /dev/null -w "%{url_effective}" "https://github.com/${a42}/releases/latest" | rev | cut -d'/' -f1 | rev;};is::tty() { [[ -t 1 ]];};is::array() { declare -p "${1}" &>/dev/null && [[ $(declare -p "${1}") == "declare -a"* ]];};is::uninitialized() { local a52="${1}";if is::array "${a52}"; then [[ $(declare -p "${a52}") == "declare -a ${a52}" ]];else [[ ! ${!a52+x} ]];fi;};is::set() { ! is::uninitialized "${1}";};argsh::shebang() { local -r a44="${1}";: "${ARGSH_SOURCE="${a44}"}";export ARGSH_SOURCE;[[ "${BASH_SOURCE[-1]}" != "${a44}" && -f "${a44}" ]] || { binary::exists docker || { echo "This script requires Docker to be installed";return 1;} >&2;docker run --rm -it $(docker::user) -e "BATS_LOAD" -e "ARGSH_SOURCE" kleisterio/argsh "${@}" ;return 0;} >&2;bash::version 4 3 0 || { echo "This script requires bash 4.3.0 or later";return 1;} >&2;shift;. "${a44}";};string::drop-index() { local a9="${1}";local a31="${2}";local a10="${3:-1}";echo "${a9:0:a31}${a9:a31+a10}";};string::random() { local a10="${1:-42}";local a30="${2:-"a-zA-Z0-9"}";local a53;until [[ "${a53:-}" =~ ^[:alpha:] ]]; do a53=$(tr -dc "${a30}" < /dev/urandom | fold -w "${a10}" | head -n 1 || :);done;echo "${a53}";};string::trim-left-lines() { local a9="${1:-'-'}";local a30="${2:-" "$'\n'$'\t'}";local a33 a26;[[ ${a9} != '-' ]] || a9="$(cat)";mapfile -t a26 < <(echo "${a9}");for a33 in "${a26[@]}"; do string::trim-left "${a33}" "${a30}";done;};string::trim-left() { local a9="${1:-'-'}";local a30="${2:-" "$'\n'$'\t'}";[[ ${a9} != '-' ]] || a9="$(cat)" ;while [[ -n "${a9}" ]]; do [[ ${a30} == *${a9:0:1}* ]] || break;a9="${a9:1}";done;echo "${a9}";};string::trim-right() { local a9="${1:-'-'}";local a30="${2:-" "$'\n'$'\t'}";[[ ${a9} != '-' ]] || a9="$(cat)";while [[ -n "${a9}" ]]; do [[ ${a30} == *${a9: -1}* ]] || break;a9="${a9:0: -1}";done;echo "${a9}";};string::trim() { local a9="${1:-'-'}";local a30="${2:-" \n\t"}";[[ ${a9} != '-' ]] || a9="$(cat)" ;echo "${a9}" | string::trim-left - "${a30}" | string::trim-right - "${a30}";};to::string() { local a23="${1}";echo "${a23}";};to::boolean() { local a23="${1}";case "${a23}" in
""|"false"|"0") a23="0" ;;
*) a23="1" ;;
esac;echo "${a23}";};to::int() { local a23="${1}";[[ ${a23} =~ ^-?[0-9]+$ ]] || return 1;echo "${a23}";};to::float() { local a23="${1}";[[ ${a23} =~ ^-?[0-9]+(\.[0-9]+)?$ ]] || return 1;echo "${a23}";};to::stdin() { local a23="${1}";[[ ${a23} != "-" ]] || a23="$(cat)";echo "${a23}";};to::file() { local a23="${1}";[[ -f "${a23}" ]] || return 1;echo "${a23}";};[[ "${BASH_SOURCE[0]}" != "${0}" ]] || argsh::shebang "${@}"