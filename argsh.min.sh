#!/usr/bin/env bash
# shellcheck disable=SC2178 disable=SC2120 disable=SC1090 disable=SC2046 disable=SC2155
ARGSH_COMMIT_SHA="e8db8a72078fda7c09b8b8e8ca121c3f37ac4a38"; ARGSH_VERSION="v0.0.2-7-ge8db8a7-dirty"
: "${ARGSH_VERSION:=unknown}";: "${ARGSH_COMMIT_SHA:=unknown}";: "${ARGSH_FIELD_WIDTH:=24}";COMMANDNAME=("$(s="${ARGSH_SOURCE:-"${0}"}"; echo "${s##*/}")");:usage() { local a27="${1}"; shift;declare -p usage &>/dev/null || local -a usage=();declare -p args &>/dev/null || local -a args=();[[ $(( ${#usage[@]} % 2 )) -eq 0 ]] || :args::_error "usage must be an associative array";[[ $(( ${#usage[@]} % 2 )) -eq 0 ]] || :args::_error "usage must be an associative array";if [[ -z ${1:-} || ${1} == "-h" || ${1} == "--help" ]]; then :usage::text "${a27}";exit 0;fi;if ! (( ${#COMMANDNAME[@]} )) && [[ ${1:-} == "--argsh" ]]; then echo "https://arg.sh ${ARGSH_COMMIT_SHA:-} ${ARGSH_VERSION:-}";exit 0;fi;local -A a29=();local -a a49=("${@}");local a48 a32="";while (( ${#a49[@]} )); do if [[ ${a49[0]:0:1} != "-" ]]; then [[ -z "${a48:-}" ]] || break;a48="${a49[0]}";a49=("${a49[@]:1}");continue;fi;:args::parse_flag || break;a29["${a32}"]=1;done;:args::check_required_flags;local a44;for (( a59=0; a59 < ${#usage[@]}; a59+=2 )); do for a23 in $(echo "${usage[a59]/:*}" | tr '|' "\n"); do a23="${a23#\#}";[[ "${a48}" == "${a23}" ]] || continue;a32="${usage[a59]#\#}";a44="${usage[a59]/*:-}";a44="${a44#\#}";[[ "${a44}" == "${usage[a59]}" ]] || break 2;a44="${a44/|*}";break 2;done;done;[[ -n "${a44:-}" ]] || :args::error_usage "Invalid command: ${a48}";COMMANDNAME+=("${a32/[|:]*}");usage=("${a44}" "${a49[@]}");};:usage::text() { local a27="${1:-}";string::indent "${a27}";echo;echo "Usage: ${COMMANDNAME[*]} <command> [args]";[[ ${usage[0]:-} == '-' ]] || echo -e "\nAvailable Commands:";for (( a59=0; a59 < ${#usage[@]}; a59+=2 )); do [[ "${usage[a59]:0:1}" != "#" ]] || continue;[[ "${usage[a59]}" != "-" ]] || { echo;echo "${usage[a59+1]}";continue;};printf "  %-${ARGSH_FIELD_WIDTH}s %s\n" "${usage[a59]/[:|]*}" "${usage[a59+1]}";done;:args::text_flags;echo;echo "Use \"${COMMANDNAME[*]} <command> --help\" for more information about a command.";};:args() { local a27="${1}"; shift;declare -p args &>/dev/null || local -a args=();[[ $(( ${#args[@]} % 2 )) -eq 0 ]] || :args::_error "args must be an associative array";if [[ ${1:-} == "-h" || ${1:-} == "--help" ]]; then :args::text;exit 0;fi;local a32="" a59 a0=1;local -A a29=();local -a a49=("${@}");while (( ${#a49[@]} )); do if [[ ${a49[0]:0:1} != "-" ]]; then a59="$(:args::field_positional "${a0}")" || :args::error_usage "too many arguments: ${a49[0]}";a32="${args[a59]}";local -n a58="$(args::field_name "${a32}")";a58="$(:args::field_value "${a49[0]}")" || exit "${?}";a49=("${a49[@]:1}");(( ++a0 ));continue;fi;:args::parse_flag || :args::error_usage "unknown a42: ${a49[0]}";a29["${a32}"]=1;done;if a59="$(:args::field_positional "${a0}")"; then a32="$(args::field_name "${args[a59]}")";if is::uninitialized "${a32}" && ! is::array "${a32}"; then :args::error_usage "missing required argument: ${a32}";fi;fi;:args::check_required_flags;[[ ${#a49[@]} -eq 0 ]] || :args::error_usage "too many arguments: ${a49[*]}";};:args::text() { declare -p args &>/dev/null || return 0;local -a a1=() a9=();:args::positional
string::indent "${a27}";echo;echo "Usage:";echo "  ${COMMANDNAME[*]} ${a9[*]}";(( ${#a1[@]} == 0 )) || { echo;echo "Arguments:";for a59 in "${a1[@]}"; do [[ ${args[a59]} != "-" ]] || continue;a45="$(printf "   %-${ARGSH_FIELD_WIDTH}s%s" " " "${args[a59+1]}" | fmt::tty;)";printf "   %-${ARGSH_FIELD_WIDTH}s%s\n" "$(:args::fieldf "${args[a59]}")" "$(string::trim-left "${a45}")";done;};:args::text_flags;echo;};:args::text_flags() { local -a args=("${args[@]}");local -a a20=();array::contains 'help|h:+' "${args[@]}" || args+=('help|h:+' "Show this help message");:args::flags;(( ${#a20[@]} )) || return 0;[[ "${args[${a20[0]}]}" == "-" ]] || echo -e "\nOptions:";for a59 in "${a20[@]}"; do [[ "${args[a59]:0:1}" != "#" ]] || continue;[[ "${args[a59]}" != "-" ]] || { echo;echo "${args[a59+1]}";continue;};:args::fieldf "${args[a59]}";{ echo -n "           ";echo -e "${args[a59+1]}\n";} | fmt::tty;done;};:args::flags() { declare -p args &>/dev/null || local -a args;declare -p a20 &>/dev/null || local -a a20;for (( a59=0; a59 < "${#args[@]}"; a59+=2 )); do if [[ ${args[a59]} == *"|"* || ${args[a59]} == '-' ]]; then a20+=("${a59}");fi;done;};:args::positional() { declare -p args &>/dev/null || local -a args;declare -p a1 &>/dev/null || local -a a1;declare -p a9 &>/dev/null || local -a a9;local a58;for (( a59=0; a59 < "${#args[@]}"; a59+=2 )); do [[ ${args[a59]} != *"|"* && ${args[a59]} != '-' ]] || continue;a58="$(args::field_name "${args[a59]}")";a1+=("${a59}");if is::array "${a58}"; then a9+=("...${a58}");continue;fi;if ! is::uninitialized "${a58}"; then a9+=("[${a58}]");continue;fi;a9+=("<${a58}>");done;};:args::parse_flag() { declare -p a49 a32 &>/dev/null || return 1;local a42="${a49[0]/=*}";if [[ ${a42:0:2} == "--" ]]; then a32="$(:args::field_lookup "${a42:2}")" || return "${?}";elif [[ ${a42:0:1} == "-" ]]; then a42="${a42:0:2}";a32="$(:args::field_lookup "${a42:1}")" || return "${?}";fi;:args::field_set_flag "${a32}";};:args::check_required_flags() { declare -p a29 args &>/dev/null || return 1;local a32;local -a a21;for (( a59=0; a59 < ${#args[@]}; a59+=2 )); do a32="${args[a59]}";:args::field_attrs "${a32}";if (( a21[2] )) && ! (( a21[4] )); then local -n a58="${a21[0]}";a58=0;fi;if (( a21[6] )) && [[ -z ${a29[${args[a59]}]:-} ]]; then :args::error_usage "missing required a42: ${args[a59]/|*}";fi;done;};:args::field_set_flag() { local a32="${1}";declare -p a49 a42 &>/dev/null || return 1;local -a a21;:args::field_attrs "${a32}";local -n a58="${a21[0]}";local a4 a2;if (( a21[2] )); then a4=1;if [[ ${a42:0:2} == "--" ]]; then a49=("${a49[@]:1}");else a49[0]="-${a49[0]:2}";[[ ${a49[0]} != "-" ]] || a49=("${a49[@]:1}");fi;fi;[[ -n ${a4:-} ]] || { a2="${a49[0]/${a42}}";if [[ ${a2} == "" ]]; then (( ${#a49[@]} )) || :args::error "missing value for a42: ${a21[0]}";a4="${a49[1]}";a49=("${a49[@]:1}");else [[ "${a2:0:1}" != "=" ]] || a2="${a2:1}";a4="${a2}";fi;a4="$(:args::field_value "${a4}")" || exit "${?}";a49=("${a49[@]:1}");};if (( a21[5] )); then a58+=("${a4}");else a58="${a4}";fi;};:args::field_value() { local a19="${1}";declare -p a32 &>/dev/null || return 1;declare -p a21 &>/dev/null || { local -a a21;:args::field_attrs "${a32}";};declare -f "to::${a21[3]}" &>/dev/null || :args::_error "unknown type: ${a21[3]}";"to::${a21[3]}" "${a19}" "${a21[0]}" || :args::error_usage "invalid type (${a21[3]}): ${a19}";};:args::field_lookup() { local a32="${1}";declare -p args &>/dev/null || return 1;for (( a59=0; a59 < ${#args[@]}; a59+=2 )); do if [[ ${args[a59]} =~ (^${a32}\||\|${a32}:|\|${a32}$) ]]; then echo "${args[a59]}";return 0;fi;done;return 1;};:args::field_positional() { local a5="${1:-1}";declare -p args &>/dev/null || return 1;for (( a59=0; a59 < ${#args[@]}; a59+=2 )); do if [[ ${args[a59]} != *"|"* && ${args[a59]} != '-' ]]; then if is::array "$(args::field_name "${args[a59]}")" || (( --a5 == 0 )); then echo "${a59}";return 0;fi;fi;done;return 1;};args::field_name() { local a32="${1}";local a28="${2:-1}";a32="${a32/[|:]*}";a32="${a32#\#}";if (( a28 )); then a32="${a32//-/_}";fi;echo "${a32}";};:args::field_attrs() { local a32="${1}";declare -p a21 &>/dev/null || local -a a21;a21=("" "" 0 "" 0 0 0 0 "" );local a43="+~!";local a37="${a32#*[:]}";[ "${a37}" != "${a32}" ] || a37="";a21[0]="$(args::field_name "${a32}")";a21[8]="$(args::field_name "${a32}" 0)";[[ ${a21[0]:0:1} != "#" ]] || { a21[7]=1;};local -n a58="${a21[0]}";local -a a20;mapfile -t a20 < <(echo "${a32/[:]*}" | tr '|' '\n');[[ ${#a20[@]} -eq 1 ]] || { a21[1]="${a20[1]}";};if is::array "${a21[0]}"; then a21[5]=1;! is::uninitialized "${a21[0]}" || a58=();! (( ${#a58[@]} )) || a21[4]=1;elif ! is::uninitialized "${a21[0]}"; then a21[4]=1;fi;while (( ${#a37} > 0 )); do if [[ ${a37:0:1} == "+" ]]; then [[ -z ${a21[3]} ]] || :args::_error "cannot have multiple types: ${a21[3]} and boolean";a21[2]=1;a37="${a37:1}";continue;fi;if [[ ${a37:0:1} == "~" ]]; then ! (( a21[2] )) || :args::_error "already flagged as boolean";a37="${a37:1}";a21[3]="${a37/[$a43]*}";a37="${a37:${#a21[3]}}";continue;fi;if [[ ${a37:0:1} == "!" ]]; then ! (( a21[6] )) || :args::_error "field already flagged as required";a21[6]=1;a37="${a37:1}";continue;fi;echo ":args error: unknown modifier: ${a37:0:1}" >&2;exit 2;done;if [[ -z ${a21[3]} && ${a21[2]} -eq 0 ]]; then a21[3]="string";fi;};:args::fieldf() { local a32="${1}";declare -p a21 &>/dev/null || { local -a a21;:args::field_attrs "${a32}";};[[ ${a32} == *"|"* ]] || { echo "${a21[8]} ${a21[3]}";return 0;};local -n a58="${a21[0]}";a10="   ";! (( a21[6] )) || a10=" ! ";if [[ -n ${a21[1]} ]]; then a10+="-${a21[1]}, --${a21[8]}";else a10+="    --${a21[8]}";fi;a10+=" ";! (( a21[5] )) || a10+="...";a10+="${a21[3]}";if (( a21[4] )) && ! (( a21[2] )); then a10+=" (default: ${a58[*]})";fi;echo "${a10}";};args::run() { local a57="${1}"; shift;for (( a59=0; a59<${#}; a59++ )); do local a55="${1}"; shift;local a44="${1}"; shift;if ! (( a57 )) || (( a55 )); then "${a44}";fi;done;};array::contains() { local -r a14="${1}"; shift;for a6 in "${@}"; do [[ "${a6}" != "${a14}" ]] || return 0;done;return 1;};array::join() { local -r a3="${1}"; shift;local a11;printf -v a11 "${a3}%s" "${@}";echo "${a11:${#a3}}";};array::nth() { local -n a50="${1}";local -r a53="${2}";shift 2;for (( a59=1; a59<=${#}; a59++ )); do (( a59 % a53 )) || a50+=("${!a59}");done;};bash::version() { local a30="${1:-4}";local a31="${2:-3}";local a25="${3:-0}";local -a a7;read -ra a7 <<< "$(echo "${BASH_VERSION}" | tr '.' ' ')";if [[ "${a7[0]}" -lt "${a30}" ]]; then return 1;elif [[ "${a7[0]}" -gt "${a30}" ]]; then return 0;fi;if [[ "${a7[1]}" -lt "${a31}" ]]; then return 1;elif [[ "${a7[1]}" -gt "${a31}" ]]; then return 0;fi;if [[ "${a7[2]}" -lt "${a25}" ]]; then return 1;fi;return 0;};binary::exists() { local a13="${1}";command -v "${a13}" &> /dev/null || { echo "${a13} is required to run this script" >&2;return 1;};};binary::github() { local a39="${1}";local -r a13="$(basename "${a39}")";local a35="${2}";local a36="${3}";local a51="${4:-}";curl -Lso /dev/stdout "https://github.com/${a35}/releases/download/${a36}" | { if [[ -n "${a51}" ]]; then tar -xz -C "$(dirname "${a39}")" "${a51}";else tee "${a39}" &> /dev/null;fi;chmod +x "${a39}";};};binary::arch() { local a24="${1}";local -r a34="$(uname -m)";case "${a34}" in
x86_64|amd64) if (( a24 )); then echo "64-bit"; else echo "amd64"; fi ;;
armv7l) echo "arm" ;;
aarch64) echo "arm64" ;;
*) echo "${a34}" ;;
esac;};binary::jq() { binary::exists "jq" 2>/dev/null || { local -r a12="$(github::latest "stedolan/jq")" system="$(uname -s)";binary::github "${PATH_BIN?}/jq" "stedolan/jq" "${a12}/jq-${system,,}-$(binary::arch)";};};binary::vale() { binary::exists "vale" 2>/dev/null || { local -r a12="$(github::latest "errata-ai/vale")" system="$(uname -s)";binary::github "${PATH_BIN?}/vale" "errata-ai/vale" "${a12}/vale_${a12:1}_$(uname -s)_$(binary::arch 1).tar.gz" "vale";};};docker::user() { local a52="${1:-"$(id -u)"}";local a56="${2:-"$(id -g)"}";local a33="${3:-"$(whoami)"}";local a41="${4:-"/workspace"}";local a17="${5:-"/bin/sh"}";echo "${a33}:x:${a52}:${a56}::${a41}:${a17}" > /tmp/docker_passwd;echo "${a33}:x:${a56}:" > /tmp/docker_group;echo -v "${PATH_BASE:-.}:${a41}";echo -v /tmp/docker_passwd:/etc/passwd -v /tmp/docker_group:/etc/group;echo -u "${a52}:${a56}";echo -w "${a41}";};error::stacktrace() { local -r a38="${1:-${?}}";if (( a38 )); then echo -e "\n\033[38;5;196m■■ Stacktrace(${a38}): \e[1m${BASH_COMMAND}\e[22m";for a59 in $(seq 1 $((${#FUNCNAME[@]} - 2))); do echo -e "${a59}. ${BASH_SOURCE[a59]}:${BASH_LINENO[a59-1]} ➜ ${FUNCNAME[a59]}()";done;echo -e "\033[0m";return "${a38}";fi;};:args::_error() { declare -p a32 &>/dev/null || local a32="???";echo ":args error [${a32}] ➜ ${1}" >&2;exit 2;};:args::error() { declare -p a32 &>/dev/null || local a32="???";echo -e "[ ${a32/[:|]*} ] invalid argument\n➜ ${1}\n" >&2;exit 2;};:args::error_usage() { declare -p a32 &>/dev/null || local a32="???";echo -e "[ ${a32/[:|]*} ] invalid usage\n➜ ${1}\n" >&2;echo -e "Use \"${0##*/} -h\" for more information" >&2;exit 2;};fmt::tty() { local a54="${1:-"$(cat)"}";command -v fmt &>/dev/null || { echo "${a54}";return 0;};local a46;a46="$(tput cols)";echo "${a54}" | fmt -w "${a46}";};github::latest() { local a35="${1}";curl -fsSLI -o /dev/null -w "%{url_effective}" "https://github.com/${a35}/releases/latest" | rev | cut -d'/' -f1 | rev;};is::tty() { [[ -t 1 ]];};is::array() { declare -p "${1}" &>/dev/null && [[ $(declare -p "${1}") == "declare -a"* ]];};is::uninitialized() { local a47="${1}";if is::array "${a47}"; then [[ $(declare -p "${a47}") == "declare -a ${a47}" ]];else [[ ! ${!a47+x} ]];fi;};is::set() { ! is::uninitialized "${1}";};argsh::shebang() { local -r a36="${1}";: "${ARGSH_SOURCE="${a36}"}";export ARGSH_SOURCE;[[ "${BASH_SOURCE[-1]}" != "${a36}" && -f "${a36}" ]] || { binary::exists docker || { echo "This script requires Docker to be installed";return 1;} >&2;docker run --rm -it $(docker::user) -e "BATS_LOAD" -e "ARGSH_SOURCE" -e "GIT_COMMIT_SHA=$(git rev-parse HEAD || :)" -e "GIT_VERSION=$(git describe --tags --dirty || :)" ghcr.io/arg-sh/argsh:latest "${@}" ;return 0;} >&2;bash::version 4 3 0 || { echo "This script requires bash 4.3.0 or later";return 1;} >&2;shift;. "${a36}";};string::drop-index() { local a15="${1}";local a18="${2}";local a16="${3:-1}";echo "${a15:0:a18}${a15:a18+a16}";};string::random() { local a16="${1:-42}";local a26="${2:-"a-zA-Z0-9"}";local a54;until [[ "${a54:-}" =~ ^[:alpha:] ]]; do a54=$(tr -dc "${a26}" < /dev/urandom | fold -w "${a16}" | head -n 1 || :);done;echo "${a54}";};string::indent() { local a15="${1:-'-'}";local a8="${2:-0}";local a40 a22;[[ ${a15} != '-' ]] || a15="$(cat)";mapfile -t a22 < <(echo "${a15}");for a40 in "${a22[@]}"; do a40="$(string::trim-left "${a40}")";(( a8 == 0 )) || printf "%${a8}s" " " ;echo "${a40}";done;};string::trim-left() { local a15="${1}";local a26="${2:-" "$'\n'$'\t'}";[[ -n ${a15:-} ]] || return 0;[[ ${a15} != '-' ]] || a15="$(cat)" ;while [[ -n "${a15}" ]]; do [[ ${a26} == *${a15:0:1}* ]] || break;a15="${a15:1}";done;echo "${a15}";};string::trim-right() { local a15="${1:-'-'}";local a26="${2:-" "$'\n'$'\t'}";[[ ${a15} != '-' ]] || a15="$(cat)";while [[ -n "${a15}" ]]; do [[ ${a26} == *${a15: -1}* ]] || break;a15="${a15:0: -1}";done;echo "${a15}";};string::trim() { local a15="${1:-'-'}";local a26="${2:-" "$'\n'$'\t'}";[[ ${a15} != '-' ]] || a15="$(cat)" ;echo "${a15}" | string::trim-left - "${a26}" | string::trim-right - "${a26}";};to::string() { local a19="${1}";echo "${a19}";};to::boolean() { local a19="${1}";case "${a19}" in
""|"false"|"0") a19="0" ;;
*) a19="1" ;;
esac;echo "${a19}";};to::int() { local a19="${1}";[[ ${a19} =~ ^-?[0-9]+$ ]] || return 1;echo "${a19}";};to::float() { local a19="${1}";[[ ${a19} =~ ^-?[0-9]+(\.[0-9]+)?$ ]] || return 1;echo "${a19}";};to::stdin() { local a19="${1}";[[ ${a19} != "-" ]] || a19="$(cat)";echo "${a19}";};to::file() { local a19="${1}";[[ -f "${a19}" ]] || return 1;echo "${a19}";};[[ "${BASH_SOURCE[0]}" != "${0}" ]] || argsh::shebang "${@}"