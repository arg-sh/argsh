#!/usr/bin/env bash
# shellcheck disable=SC2178 disable=SC2120 disable=SC1090
: "${ARGSH_FIELD_WIDTH:=24}";: "${ARGSH_PATH_IMPORT:=${BASH_SOURCE[0]%/*}}";:usage() { local a19="${1}"; shift;declare -p usage &>/dev/null || local -a usage=();declare -p args &>/dev/null || local -a args=();[[ $(( ${#usage[@]} % 2 )) -eq 0 ]] || :args::_error "usage must be an associative array";if [[ -z ${1:-} || ${1} == "-h" || ${1} == "--help" ]]; then :usage::text "${a19}";exit 0;fi;local -A a21=();local -a a47=("${@}");local a44 a24;while (( ${#a47[@]} )); do if [[ ${a47[0]:0:1} != "-" ]]; then [[ -z "${a44:-}" ]] || break;a44="${a47[0]}";a47=("${a47[@]:1}");continue;fi;:args::parse-flag || break;a21["${a24}"]=1;done;:args::check-required-flags;local a30;for (( a56=0; a56 < ${#usage[@]}; a56+=2 )); do for a17 in $(echo "${usage[a56]/:*}" | tr '|' "\n"); do a17="${a17#\#}";[[ "${a44}" == "${a17}" ]] || continue;a30="${usage[a56]/*:-}";a30="${a30#\#}";[[ "${a30}" == "${usage[a56]}" ]] || break 2;a30="${a30/|*}";break 2;done;done;[[ -n "${a30:-}" ]] || :args::error_usage "Invalid command: ${a44}";usage=("${a30}" "${a47[@]}");};:usage::text() { local a19="${1:-}";local a34="${ARGSH_SOURCE:-"${0}"}";a34="${a34##*/}";echo "${a19}";echo;echo "Usage: ${a34} <command> [args]";[[ ${usage[0]:-} == '-' ]] || echo -e "\nAvailable Commands:";for (( a56=0; a56 < ${#usage[@]}; a56+=2 )); do [[ "${usage[a56]:0:1}" != "#" ]] || continue;[[ "${usage[a56]}" != "-" ]] || { echo;echo "${usage[a56+1]}";continue;};printf "  %-${ARGSH_FIELD_WIDTH}s %s\n" "${usage[a56]/[:|]*}" "${usage[a56+1]}";done;:args::text_flags;echo;echo "Use \"${a34} [command] --help\" for more information about a command.";};:args() { local a19="${1}"; shift;declare -p args &>/dev/null || local -a args=();[[ $(( ${#args[@]} % 2 )) -eq 0 ]] || :args::_error "args must be an associative array";if [[ ${1:-} == "-h" || ${1:-} == "--help" ]]; then :args::text;exit 0;fi;local a24 a56 a0=1;local -A a21=();local -a a47=("${@}");while (( ${#a47[@]} )); do if [[ ${a47[0]:0:1} != "-" ]]; then a56="$(:args::field-positional "${a0}")" || :args::error_usage "too many arguments: ${a47[0]}";a24="${args[a56]}";local -n a51="${a24/:*}";a51="$(:args::field-value "${a47[0]}")" || exit "${?}";a47=("${a47[@]:1}");(( ++a0 ));continue;fi;:args::parse-flag || :args::error_usage "unknown a37: ${a47[0]}";a21["${a24}"]=1;done;if a56="$(:args::field-positional "${a0}")"; then a24="${args[a56]}";is::uninitialized "${a24/:*}" || :args::error_usage "missing required argument: ${a24/:*}";fi;:args::check-required-flags;[[ ${#a47[@]} -eq 0 ]] || :args::error_usage "too many arguments: ${a47[*]}";};:args::text() { declare -p args &>/dev/null || return 0;local -a a1=() a12=();:args::positional;local a34="${0##*/}";echo "${a19}";echo;echo "Usage:";echo "  ${a34} ${FUNCNAME[2]/::*} ${a12[*]}";(( ${#a1[@]} == 0 )) || { echo;echo "Arguments:";for a56 in "${a1[@]}"; do [[ ${args[a56]} != "-" ]] || continue;a31="$(printf "   %-${ARGSH_FIELD_WIDTH}s%s" " " "${args[a56+1]}" | fmt::tty;)";printf "   %-${ARGSH_FIELD_WIDTH}s%s\n" "$(:args::fieldf "${args[a56]}")" "$(string::trim-left "${a31}")";done;};:args::text_flags;echo;};:args::text_flags() { local -a args=("${args[@]}");local -a a29=();array::contains 'help|h:+' "${args[@]}" || args+=('help|h:+' "Show this help message");:args::flags;(( ${#a29[@]} )) || return 0;[[ "${args[${a29[0]}]}" == "-" ]] || echo -e "\nOptions:";for a56 in "${a29[@]}"; do [[ "${args[a56]:0:1}" != "#" ]] || continue;[[ "${args[a56]}" != "-" ]] || { echo;echo "${args[a56+1]}";continue;};:args::fieldf "${args[a56]}";{ echo -n "           ";echo -e "${args[a56+1]}\n";} | fmt::tty;done;};:args::flags() { declare -p args &>/dev/null || local -a args;declare -p a29 &>/dev/null || local -a a29;for (( a56=0; a56 < "${#args[@]}"; a56+=2 )); do if [[ ${args[a56]} == *"|"* || ${args[a56]} == '-' ]]; then a29+=("${a56}");fi;done;};:args::positional() { declare -p args &>/dev/null || local -a args;declare -p a1 &>/dev/null || local -a a1;declare -p a12 &>/dev/null || local -a a12;for (( a56=0; a56 < "${#args[@]}"; a56+=2 )); do [[ ${args[a56]} != *"|"* && ${args[a56]} != '-' ]] || continue;a1+=("${a56}");if is::uninitialized "${args[a56]/:*}"; then a12+=("[${args[a56]/:*}]");continue;fi;a12+=("<${args[a56]/:*}>");done;};:args::parse-flag() { declare -p a47 a24 &>/dev/null || return 1;local a37="${a47[0]/=*}";if [[ ${a37:0:2} == "--" ]]; then a24="$(:args::field-lookup "${a37:2}")" || return "${?}";elif [[ ${a37:0:1} == "-" ]]; then a37="${a37:0:2}";a24="$(:args::field-lookup "${a37:1}")" || return "${?}";fi;:args::field-set-flag "${a24}";};:args::check-required-flags() { declare -p a21 args &>/dev/null || return 1;for (( a56=0; a56 < ${#args[@]}; a56+=2 )); do [[ ${args[a56]: -1} == "!" ]] || continue;if [[ -z ${a21[${args[a56]}]:-} ]]; then :args::error_usage "missing required a37: ${args[a56]/|*}";fi;done;};:args::field-set-flag() { local a24="${1}";declare -p a47 a37 &>/dev/null || return 1;local -a a23;:args::field-attrs "${a24}";local -n a51="${a23[0]}";local a3 a4;if (( a23[2] )); then a3=1;if [[ ${a37:0:2} == "--" ]]; then a47=("${a47[@]:1}");else a47[0]="-${a47[0]:2}";[[ ${a47[0]} != "-" ]] || a47=("${a47[@]:1}");fi;fi;[[ -n ${a3:-} ]] || { a4="${a47[0]/${a37}}";if [[ ${a4} == "" ]]; then (( ${#a47[@]} )) || :args::error "missing value for a37: ${a23[0]}";a3="${a47[1]}";a47=("${a47[@]:1}");else [[ "${a4:0:1}" != "=" ]] || a4="${a4:1}";a3="${a4}";fi;a3="$(:args::field-value "${a3}")" || exit "${?}";a47=("${a47[@]:1}");};if (( a23[5] )); then a51+=("${a3}");else a51="${a3}";fi;};:args::field-value() { local a22="${1}";declare -p a24 &>/dev/null || return 1;declare -p a23 &>/dev/null || { local -a a23;:args::field-attrs "${a24}";};declare -f "to::${a23[3]}" &>/dev/null || :args::_error "unknown type: ${a23[3]}";"to::${a23[3]}" "${a22}" "${a23[0]}" || :args::error_usage "invalid type (${a23[3]}): ${a22}";};:args::field-lookup() { local a24="${1}";declare -p args &>/dev/null || return 1;for (( a56=0; a56 < ${#args[@]}; a56+=2 )); do if [[ ${args[a56]} =~ (^${a24}\||\|${a24}:|\|${a24}$) ]]; then echo "${args[a56]}";return 0;fi;done;return 1;};:args::field-positional() { local a5="${1:-1}";declare -p args &>/dev/null || return 1;for (( a56=0; a56 < ${#args[@]}; a56+=2 )); do if [[ ${args[a56]} != *"|"* && ${args[a56]} != '-' ]]; then (( --a5 == 0 )) || continue;echo "${a56}";return 0;fi;done;return 1;};:args::field-attrs() { local a24="${1}";declare -p a23 &>/dev/null || local -a a23;a23=("" "" 0 "" 0 0 0 0 );local a43="+~!";local a38="${a24#*[:]}";[ "${a38}" != "${a24}" ] || a38="";a23[0]="${a24/[|:]*}";[[ ${a23[0]:0:1} != "#" ]] || { a23[7]=1;a23[0]="${a23[0]:1}";};local -n a51="${a23[0]}";local -a a29;mapfile -t a29 < <(echo "${a24/[:]*}" | tr '|' '\n');[[ ${#a29[@]} -eq 1 ]] || { a23[0]="${a29[0]}";a23[1]="${a29[1]}";};if is::array "${a23[0]}"; then a23[5]=1;! is::uninitialized "${a23[0]}" || a51=();! (( ${#a51[@]} )) || a23[4]=1;elif is::uninitialized "${a23[0]}"; then a23[4]=1;fi;while (( ${#a38} > 0 )); do if [[ ${a38:0:1} == "+" ]]; then [[ -z ${a23[3]} ]] || :args::_error "cannot have multiple types: ${a23[3]} and boolean";a23[2]=1;a38="${a38:1}";continue;fi;if [[ ${a38:0:1} == "~" ]]; then ! (( a23[2] )) || :args::_error "already flagged as boolean";a38="${a38:1}";a23[3]="${a38/[$a43]*}";a38="${a38:${#a23[3]}}";continue;fi;if [[ ${a38:0:1} == "!" ]]; then ! (( a23[4] )) || :args::_error "cannot be required with default value";! (( a23[6] )) || :args::_error "field already flagged as required";a23[6]=1;a38="${a38:1}";continue;fi;echo ":args error: unknown modifier: ${a38:0:1}" >&2;exit 2;done;if [[ -z ${a23[3]} && ${a23[2]} -eq 0 ]]; then a23[3]="string";fi;};:args::fieldf() { local a24="${1}";declare -p a23 &>/dev/null || { local -a a23;:args::field-attrs "${a24}";};[[ ${a24} == *"|"* ]] || { echo "${a23[0]} ${a23[3]}";return 0;};local -n a51="${a23[0]}";a14="   ";! (( a23[6] )) || a14=" ! ";if [[ -n ${a23[1]} ]]; then a14+="-${a23[1]}, --${a23[0]}";else a14+="    --${a23[0]}";fi;a14+=" ";! (( a23[5] )) || a14+="...";a14+="${a23[3]}";! (( a23[4] )) || a14+=" (default: ${a51[*]})";echo "${a14}";};args::run() { local a50="${1}"; shift;for (( a56=0; a56<${#}; a56++ )); do local a53="${1}"; shift;local a30="${1}"; shift;if ! (( a50 )) || (( a53 )); then "${a30}";fi;done;};array::contains() { local -r a10="${1}"; shift;for a7 in "${@}"; do [[ "${a7}" != "${a10}" ]] || return 0;done;return 1;};array::join() { local -r a2="${1}"; shift;local a13;printf -v a13 "${a2}%s" "${@}";echo "${a13:${#a2}}";};array::nth() { local -n a48="${1}";local -r a46="${2}";shift 2;for (( a56=1; a56<=${#}; a56++ )); do (( a56 % a46 )) || a48+=("${!a56}");done;};binary::exists() { local a15="${1}";command -v "${a15}" &> /dev/null || { echo "${a15} is required to run this script" >&2;return 1;};};binary::github() { local a39="${1}";local -r a15="$(basename "${a39}")";local a32="${2}";local a42="${3}";local a55="${4:-}";curl -Lso /dev/stdout "https://github.com/${a32}/releases/download/${a42}" | { if [[ -n "${a55}" ]]; then tar -xz -C "$(dirname "${a39}")" "${a55}";else tee "${a39}" &> /dev/null;fi;chmod +x "${a39}";};};binary::arch() { local a28="${1}";local -r a35="$(uname -m)";case "${a35}" in
x86_64|amd64) if (( a28 )); then echo "64-bit"; else echo "amd64"; fi ;;
armv7l) echo "arm" ;;
aarch64) echo "arm64" ;;
*) echo "${a35}" ;;
esac;};binary::jq() { binary::exists "jq" 2>/dev/null || { local -r a8="$(github::latest "stedolan/jq")" system="$(uname -s)";binary::github "${PATH_BIN?}/jq" "stedolan/jq" "${a8}/jq-${system,,}-$(binary::arch)";};};binary::vale() { binary::exists "vale" 2>/dev/null || { local -r a8="$(github::latest "errata-ai/vale")" system="$(uname -s)";binary::github "${PATH_BIN?}/vale" "errata-ai/vale" "${a8}/vale_${a8:1}_$(uname -s)_$(binary::arch 1).tar.gz" "vale";};};docker::user() { local a49="${1:-"$(id -u)"}";local a54="${2:-"$(id -g)"}";local a40="${3:-"$(whoami)"}";local a41="${4:-"/workspace"}";local a27="${5:-"/bin/sh"}";echo "${a40}:x:${a49}:${a54}::${a41}:${a27}" > /tmp/docker_passwd;echo "${a40}:x:${a54}:" > /tmp/docker_group;echo -v "${PATH_BASE:-.}:${a41}";echo -v /tmp/docker_passwd:/etc/passwd -v /tmp/docker_group:/etc/group;echo -u "${a49}:${a54}";echo -w "${a41}";};error::stacktrace() { local -r a33="${1:-${?}}";if (( a33 )); then echo -e "\n\033[38;5;196m■■ Stacktrace(${a33}): \e[1m${BASH_COMMAND}\e[22m";for a56 in $(seq 1 $((${#FUNCNAME[@]} - 2))); do echo -e "${a56}. ${BASH_SOURCE[a56]}:${BASH_LINENO[a56-1]} ➜ ${FUNCNAME[a56]}()";done;echo -e "\033[0m";return "${a33}";fi;};:args::_error() { declare -p a24 &>/dev/null || local a24="???";echo ":args error [${a24}] ➜ ${1}" >&2;exit 2;};:args::error() { echo -e "[ ${a24/:*} ] invalid argument\n➜ ${1}\n" >&2;exit 2;};:args::error_usage() { declare -p a24 &>/dev/null || local a24="???";echo -e "[ ${a24/:*} ] invalid usage\n➜ ${1}\n" >&2;echo -e "Use \"${0##*/} -h\" for more information" >&2;exit 2;};fmt::tty() { local a45="${1:-"$(cat)"}";command -v fmt &>/dev/null || { echo "${a45}";return 0;};local a36;a36="$(tput cols)";echo "${a45}" | fmt -w "${a36}";};github::latest() { local a32="${1}";curl -fsSLI -o /dev/null -w "%{url_effective}" "https://github.com/${a32}/releases/latest" | rev | cut -d'/' -f1 | rev;};is::tty() { [[ -t 1 ]];};is::array() { declare -p "${1}" &>/dev/null && [[ $(declare -p "${1}") == "declare -a"* ]];};is::uninitialized() { local a52="${1}";if is::array "${a52}"; then [[ $(declare -p "${a52}") == "declare -a ${a52}" ]];else [[ ${!a52+x} ]];fi;};is::set() { ! is::uninitialized "${1}";};bash::version() { local a20="${1:-4}";local a18="${2:-3}";local a26="${3:-0}";local -a a6;read -ra a6 <<< "$(echo "${BASH_VERSION}" | tr '.' ' ')";if [[ "${a6[0]}" -lt "${a20}" ]]; then return 1;elif [[ "${a6[0]}" -gt "${a20}" ]]; then return 0;fi;if [[ "${a6[1]}" -lt "${a18}" ]]; then return 1;elif [[ "${a6[1]}" -gt "${a18}" ]]; then return 0;fi;if [[ "${a6[2]}" -lt "${a26}" ]]; then return 1;fi;return 0;};argsh::shebang() { local -r a42="${*: -1}";[[ -e "${a42}" && "${BASH_SOURCE[-1]}" != "${a42}" ]] || { echo "This is intended to be used in a shebang";echo "#!/usr/bin/env argsh";return 1;} >&2;bash::version 4 3 0 || { echo "This script requires bash 4.3.0 or later";return 1;} >&2;ARGSH_SOURCE="${a42}";export ARGSH_SOURCE;. "${a42}";};string::drop-index() { local a9="${1}";local a25="${2}";local a11="${3:-1}";echo "${a9:0:a25}${a9:a25+a11}";};string::random() { local a11="${1:-42}";local a16="${2:-"a-zA-Z0-9"}";local a45;until [[ "${a45:-}" =~ ^[:alpha:] ]]; do a45=$(tr -dc "${a16}" < /dev/urandom | fold -w "${a11}" | head -n 1 || :);done;echo "${a45}";};string::trim-left() { local a9="${1:-'-'}";local a16="${2:-" "$'\n'$'\t'}";[[ ${a9} != '-' ]] || a9="$(cat)" ;while [[ -n "${a9}" ]]; do [[ ${a16} == *${a9:0:1}* ]] || break;a9="${a9:1}";done;echo "${a9}";};string::trim-right() { local a9="${1:-'-'}";local a16="${2:-" "$'\n'$'\t'}";[[ ${a9} != '-' ]] || a9="$(cat)";while [[ -n "${a9}" ]]; do [[ ${a16} == *${a9: -1}* ]] || break;a9="${a9:0: -1}";done;echo "${a9}";};string::trim() { local a9="${1:-'-'}";local a16="${2:-" \n\t"}";[[ ${a9} != '-' ]] || a9="$(cat)" ;echo "${a9}" | string::trim-left - "${a16}" | string::trim-right - "${a16}";};to::string() { local a22="${1}";echo "${a22}";};to::boolean() { local a22="${1}";case "${a22}" in
""|"false"|"0") a22="0" ;;
*) a22="1" ;;
esac;echo "${a22}";};to::int() { local a22="${1}";[[ ${a22} =~ ^-?[0-9]+$ ]] || return 1;echo "${a22}";};to::float() { local a22="${1}";[[ ${a22} =~ ^-?[0-9]+(\.[0-9]+)?$ ]] || return 1;echo "${a22}";};to::stdin() { local a22="${1}";[[ ${a22} != "-" ]] || a22="$(cat)";echo "${a22}";}; [[ "${BASH_SOURCE[0]}" != "${0}" ]] || argsh::shebang "${@}"