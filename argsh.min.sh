#!/usr/bin/env bash
# shellcheck disable=SC2178 disable=SC2120 disable=SC1090 disable=SC2046 disable=SC2155
set -euo pipefail; ARGSH_COMMIT_SHA="c75d1824f605eeb25c9076790d22b2f7d647348b"; ARGSH_VERSION="v0.2.0"
: "${ARGSH_VERSION:=unknown}";: "${ARGSH_COMMIT_SHA:=unknown}";: "${ARGSH_FIELD_WIDTH:=24}";COMMANDNAME=("$(s="${ARGSH_SOURCE:-"${0}"}"; echo "${s##*/}")");:usage() { local a24="${1}"; shift;declare -p usage &>/dev/null || local -a usage=();declare -p args &>/dev/null || local -a args=();[[ $(( ${#usage[@]} % 2 )) -eq 0 ]] || :args::_error "usage must be an associative array";[[ $(( ${#usage[@]} % 2 )) -eq 0 ]] || :args::_error "usage must be an associative array";if [[ -z ${1:-} || ${1} == "-h" || ${1} == "--help" ]];then :usage::text "${a24}";exit 0;fi;if ! (( ${#COMMANDNAME[@]} )) && [[ ${1:-} == "--argsh" ]];then echo "https://arg.sh ${ARGSH_COMMIT_SHA:-} ${ARGSH_VERSION:-}";exit 0;fi;local -A a33=();local -a a52=("${@}");local a63 a28="";while (( ${#a52[@]} ));do if [[ ${a52[0]:0:1} != "-" ]];then [[ -z "${a63:-}" ]] || break;a63="${a52[0]}";a52=("${a52[@]:1}");continue;fi;:args::parse_flag || break;a33["${a28}"]=1;done;:args::check_required_flags;local a40;for (( a65=0; a65 < ${#usage[@]}; a65+=2 ));do for a17 in $(echo "${usage[a65]/:*}" | tr '|' "\n");do a17="${a17#\#}";[[ "${a63}" == "${a17}" ]] || continue;a28="${usage[a65]#\#}";a40="${usage[a65]/*:-}";a40="${a40#\#}";[[ "${a40}" == "${usage[a65]}" ]] || break 2;a40="${a40/|*}";break 2;done;done;[[ -n "${a40:-}" ]] || :args::error_usage "Invalid command: ${a63}";COMMANDNAME+=("${a28/[|:]*}");usage=("${a40}" "${a52[@]}");};:usage::text() { local a24="${1:-}";string::indent "${a24}";echo;echo "Usage: ${COMMANDNAME[*]} <command> [args]";[[ ${usage[0]:-} == '-' ]] || echo -e "\nAvailable Commands:";for (( a65=0; a65 < ${#usage[@]}; a65+=2 ));do [[ "${usage[a65]:0:1}" != "#" ]] || continue;[[ "${usage[a65]}" != "-" ]] || { echo;echo "${usage[a65+1]}";continue;};printf "  %-${ARGSH_FIELD_WIDTH}s %s\n" "${usage[a65]/[:|]*}" "${usage[a65+1]}";done;:args::text_flags;echo;echo "Use \"${COMMANDNAME[*]} <command> --help\" for more information about a command.";};:args() { local a24="${1}"; shift;declare -p args &>/dev/null || local -a args=();[[ $(( ${#args[@]} % 2 )) -eq 0 ]] || :args::_error "args must be an associative array";if [[ ${1:-} == "-h" || ${1:-} == "--help" ]];then :args::text;exit 0;fi;local a18=0 a28="" a65 a0=1;local -A a33=();local -a a52=("${@}");while (( ${#a52[@]} ));do if [[ ${a52[0]:0:1} != "-" ]];then local a49 a26;a65="$(:args::field_positional "${a0}")" || :args::error_usage "too many arguments: ${a52[0]}";a28="${args[a65]}";a49="$(args::field_name "${a28}")";a26="$(:args::field_value "${a52[0]}")" || exit "${?}";local -n a57="${a49}";if is::array "${a49}";then (( a18 )) || { a57=();a18=1;};a57+=("${a26}");else a57="${a26}";fi;a52=("${a52[@]:1}");(( ++a0 ));continue;fi;:args::parse_flag || :args::error_usage "unknown a38: ${a52[0]}";a33["${a28}"]=1;done;if a65="$(:args::field_positional "${a0}")";then a28="$(args::field_name "${args[a65]}")";if is::uninitialized "${a28}" && ! is::array "${a28}";then :args::error_usage "missing required argument: ${a28}";fi;fi;:args::check_required_flags;[[ ${#a52[@]} -eq 0 ]] || :args::error_usage "too many arguments: ${a52[*]}";};:args::text() { declare -p args &>/dev/null || return 0;local -a a2=() a10=();:args::positional;string::indent "${a24}";echo;echo "Usage:";echo "  ${COMMANDNAME[*]} ${a10[*]}";(( ${#a2[@]} == 0 )) || { echo;echo "Arguments:";for a65 in "${a2[@]}";do [[ ${args[a65]} != "-" ]] || continue;a46="$( printf "   %-${ARGSH_FIELD_WIDTH}s%s" " " "${args[a65+1]}" | fmt::tty;)";printf "   %-${ARGSH_FIELD_WIDTH}s%s\n" "$(:args::fieldf "${args[a65]}")" "$(string::trim-left "${a46}")";done;};:args::text_flags;echo;};:args::text_flags() { local -a args=("${args[@]}");local -a a22=();array::contains 'help|h:+' "${args[@]}" || args+=('help|h:+' "Show this help message");:args::flags;(( ${#a22[@]} )) || return 0;[[ "${args[${a22[0]}]}" == "-" ]] || echo -e "\nOptions:";for a65 in "${a22[@]}";do [[ "${args[a65]:0:1}" != "#" ]] || continue;[[ "${args[a65]}" != "-" ]] || { echo;echo "${args[a65+1]}";continue;};:args::fieldf "${args[a65]}";{ echo -n "           ";echo -e "${args[a65+1]}\n";} | fmt::tty;done;};:args::flags() { declare -p args &>/dev/null || local -a args;declare -p a22 &>/dev/null || local -a a22;for (( a65=0; a65 < "${#args[@]}"; a65+=2 ));do if [[ ${args[a65]} == *"|"* || ${args[a65]} == '-' ]];then a22+=("${a65}");fi;done;};:args::positional() { declare -p args &>/dev/null || local -a args;declare -p a2 &>/dev/null || local -a a2;declare -p a10 &>/dev/null || local -a a10;local a57;for (( a65=0; a65 < "${#args[@]}"; a65+=2 ));do [[ ${args[a65]} != *"|"* && ${args[a65]} != '-' ]] || continue;a57="$(args::field_name "${args[a65]}")";a2+=("${a65}");if is::array "${a57}";then a10+=("...${a57}");continue;fi;if ! is::uninitialized "${a57}";then a10+=("[${a57}]");continue;fi;a10+=("<${a57}>");done;};:args::parse_flag() { declare -p a52 a28 &>/dev/null || return 1;local a38="${a52[0]/=*}";if [[ ${a38:0:2} == "--" ]];then a28="$(:args::field_lookup "${a38:2}")" || return "${?}";elif [[ ${a38:0:1} == "-" ]];then a38="${a38:0:2}";a28="$(:args::field_lookup "${a38:1}")" || return "${?}";fi;:args::field_set_flag "${a28}";};:args::check_required_flags() { declare -p a33 args &>/dev/null || return 1;local a28;local -a a25;for (( a65=0; a65 < ${#args[@]}; a65+=2 ));do a28="${args[a65]}";:args::field_attrs "${a28}";if (( a25[2] )) && ! (( a25[4] ));then local -n a57="${a25[0]}";a57=0;fi;if (( a25[6] )) && [[ -z ${a33[${args[a65]}]:-} ]];then :args::error_usage "missing required a38: ${args[a65]/|*}";fi;done;};:args::field_set_flag() { local a28="${1}";declare -p a52 a38 &>/dev/null || return 1;local -a a25;:args::field_attrs "${a28}";local -n a57="${a25[0]}";local a3 a5;if (( a25[2] ));then a3=1;if [[ ${a38:0:2} == "--" ]];then a52=("${a52[@]:1}");else a52[0]="-${a52[0]:2}";[[ ${a52[0]} != "-" ]] || a52=("${a52[@]:1}");fi;fi;[[ -n ${a3:-} ]] || { a5="${a52[0]/${a38}}";if [[ ${a5} == "" ]];then (( ${#a52[@]} )) || :args::error "missing value for a38: ${a25[0]}";a3="${a52[1]}";a52=("${a52[@]:1}");else [[ "${a5:0:1}" != "=" ]] || a5="${a5:1}";a3="${a5}";fi;a3="$(:args::field_value "${a3}")" || exit "${?}";a52=("${a52[@]:1}");};if (( a25[5] ));then a57+=("${a3}");else a57="${a3}";fi;};:args::field_value() { local a26="${1}";declare -p a28 &>/dev/null || return 1;declare -p a25 &>/dev/null || { local -a a25;:args::field_attrs "${a28}";};declare -f "to::${a25[3]}" &>/dev/null || :args::_error "unknown type: ${a25[3]}";"to::${a25[3]}" "${a26}" "${a25[0]}" || :args::error_usage "invalid type (${a25[3]}): ${a26}";};:args::field_lookup() { local a28="${1}";declare -p args &>/dev/null || return 1;for (( a65=0; a65 < ${#args[@]}; a65+=2 ));do if [[ ${args[a65]} =~ (^${a28}\||\|${a28}:|\|${a28}$) ]];then echo "${args[a65]}";return 0;fi;done;return 1;};:args::field_positional() { local a6="${1:-1}";declare -p args &>/dev/null || return 1;for (( a65=0; a65 < ${#args[@]}; a65+=2 ));do if [[ ${args[a65]} != *"|"* && ${args[a65]} != '-' ]];then if is::array "$(args::field_name "${args[a65]}")" || (( --a6 == 0 ));then echo "${a65}";return 0;fi;fi;done;return 1;};args::field_name() { local a28="${1}";local a29="${2:-1}";a28="${a28/[|:]*}";a28="${a28#\#}";if (( a29 ));then a28="${a28//-/_}";fi;echo "${a28}";};:args::field_attrs() { local a28="${1}";declare -p a25 &>/dev/null || local -a a25;a25=( "" "" 0 "" 0 0 0 0 "" );local a34="+~!";local a47="${a28#*[:]}";[ "${a47}" != "${a28}" ] || a47="";a25[0]="$(args::field_name "${a28}")";a25[8]="$(args::field_name "${a28}" 0)";[[ ${a25[0]:0:1} != "#" ]] || { a25[7]=1;};local -n a57="${a25[0]}";local -a a22;mapfile -t a22 < <(echo "${a28/[:]*}" | tr '|' '\n');[[ ${#a22[@]} -eq 1 ]] || { a25[1]="${a22[1]}";};if is::array "${a25[0]}";then a25[5]=1;! is::uninitialized "${a25[0]}" || a57=();! (( ${#a57[@]} )) || a25[4]=1;elif ! is::uninitialized "${a25[0]}";then a25[4]=1;fi;while (( ${#a47} > 0 ));do if [[ ${a47:0:1} == "+" ]];then [[ -z ${a25[3]} ]] || :args::_error "cannot have multiple types: ${a25[3]} and boolean";a25[2]=1;a47="${a47:1}";continue;fi;if [[ ${a47:0:1} == "~" ]];then ! (( a25[2] )) || :args::_error "already flagged as boolean";a47="${a47:1}";a25[3]="${a47/[$a34]*}";a47="${a47:${#a25[3]}}";continue;fi;if [[ ${a47:0:1} == "!" ]];then ! (( a25[6] )) || :args::_error "field already flagged as required";a25[6]=1;a47="${a47:1}";continue;fi;echo ":args error: unknown modifier: ${a47:0:1}" >&2;exit 2;done;if [[ -z ${a25[3]} && ${a25[2]} -eq 0 ]];then a25[3]="string";fi;};:args::fieldf() { local a28="${1}";declare -p a25 &>/dev/null || { local -a a25;:args::field_attrs "${a28}";};[[ ${a28} == *"|"* ]] || { echo "${a25[8]} ${a25[3]}";return 0;};local -n a57="${a25[0]}";a14="   ";! (( a25[6] )) || a14=" ! ";if [[ -n ${a25[1]} ]];then a14+="-${a25[1]}, --${a25[8]}";else a14+="    --${a25[8]}";fi;a14+=" ";! (( a25[5] )) || a14+="...";a14+="${a25[3]}";if (( a25[4] )) && ! (( a25[2] ));then a14+=" (default: ${a57[*]})";fi;echo "${a14}";};args::run() { local a58="${1}"; shift;for (( a65=0; a65<${#}; a65++ ));do local a62="${1}"; shift;local a40="${1}"; shift;if ! (( a58 )) || (( a62 ));then "${a40}";fi;done;};array::contains() { local -r a11="${1}"; shift;for a7 in "${@}";do [[ "${a7}" != "${a11}" ]] || return 0;done;return 1;};array::join() { local -r a4="${1}"; shift;local a9;printf -v a9 "${a4}%s" "${@}";echo "${a9:${#a4}}";};array::nth() { local -n a53="${1}";local -r a60="${2}";shift 2;for (( a65=1; a65<=${#}; a65++ ));do (( a65 % a60 )) || a53+=("${!a65}");done;};bash::version() { local a31="${1:-4}";local a23="${2:-3}";local a21="${3:-0}";if [[ "${BASH_VERSINFO[0]}" -lt "${a31}" ]];then return 1;elif [[ "${BASH_VERSINFO[0]}" -gt "${a31}" ]];then return 0;fi;if [[ "${BASH_VERSINFO[1]}" -lt "${a23}" ]];then return 1;elif [[ "${BASH_VERSINFO[1]}" -gt "${a23}" ]];then return 0;fi;if [[ "${BASH_VERSINFO[2]}" -lt "${a21}" ]];then return 1;fi;return 0;};binary::exists() { local a15="${1}";command -v "${a15}" &> /dev/null || { echo "${a15} is required to run this script" >&2;return 1;};};binary::github() { local a45="${1}";local -r a15="$(basename "${a45}")";local a39="${2}";local a37="${3}";local a54="${4:-}";curl -Lso /dev/stdout "https://github.com/${a39}/releases/download/${a37}" | { if [[ -n "${a54}" ]];then tar -xz -C "$(dirname "${a45}")" "${a54}";else tee "${a45}" &> /dev/null;fi;chmod +x "${a45}";};};binary::arch() { local a20="${1}";local -r a48="$(uname -m)";case "${a48}" in
x86_64|amd64)if (( a20 )); then echo "64-bit"; else echo "amd64"; fi;;
armv7l)echo "arm";;
aarch64)echo "arm64";;
*)echo "${a48}";;
esac;};binary::jq() { binary::exists "jq" 2>/dev/null || { local -r a13="$(github::latest "stedolan/jq")" system="$(uname -s)";binary::github "${PATH_BIN?}/jq" "stedolan/jq" "${a13}/jq-${system,,}-$(binary::arch)";};};binary::vale() { binary::exists "vale" 2>/dev/null || { local -r a13="$(github::latest "errata-ai/vale")" system="$(uname -s)";binary::github "${PATH_BIN?}/vale" "errata-ai/vale" "${a13}/vale_${a13:1}_$(uname -s)_$(binary::arch 1).tar.gz" "vale";};};docker::user() { local a59="${1:-"$(id -u)"}";local a56="${2:-"$(id -g)"}";local a44="${3:-"$(whoami)"}";local a36="${4:-"/workspace"}";local a30="${5:-"/bin/sh"}";local a43;a43="$(pwd)";a43="${a43#"${PATH_BASE:-}"}";if [[ "${a43}" == "$(pwd)" ]];then a43="${a36}";else a43="${a36}${a43}";fi;echo "${a44}:x:${a59}:${a56}::${a36}:${a30}" > /tmp/docker_passwd;echo "${a44}:x:${a56}:" > /tmp/docker_group;echo "-v /tmp/docker_passwd:/etc/passwd -v /tmp/docker_group:/etc/group";echo "-u ${a59}:${a56}";echo "-v ${PATH_BASE:-"$(pwd)"}:${a36}";echo "-w ${a43}";};error::stacktrace() { local -r a41="${1:-${?}}";if (( a41 ));then echo -e "\n\033[38;5;196m■■ Stacktrace(${a41}): \e[1m${BASH_COMMAND}\e[22m";for a65 in $(seq 1 $((${#FUNCNAME[@]} - 2)));do echo -e "${a65}. ${BASH_SOURCE[a65]}:${BASH_LINENO[a65-1]} ➜ ${FUNCNAME[a65]}()";done;echo -e "\033[0m";return "${a41}";fi;};:args::_error() { declare -p a28 &>/dev/null || local a28="???";echo ":args error [${a28}] ➜ ${1}" >&2;exit 2;};:args::error() { declare -p a28 &>/dev/null || local a28="???";echo -e "[ ${a28/[:|]*} ] invalid argument\n➜ ${1}\n" >&2;exit 2;};:args::error_usage() { declare -p a28 &>/dev/null || local a28="???";echo -e "[ ${a28/[:|]*} ] invalid usage\n➜ ${1}\n" >&2;echo -e "Use \"${0##*/} -h\" for more information" >&2;exit 2;};fmt::tty() { local a64="${1:-"$(cat)"}";if ! command -v fmt &>/dev/null || [[ ! -t 1 ]];then echo "${a64}";return 0;fi;local a42;a42="$(tput cols)";echo "${a64}" | fmt -w "${a42}";};github::latest() { local a39="${1}";curl -fsSLI -o /dev/null -w "%{url_effective}" "https://github.com/${a39}/releases/latest" | rev | cut -d'/' -f1 | rev;};declare -gA a1=();import() { local a61="${1}";(( ${a1["${a61}"]:-} )) || { a1["${a61}"]=1;if [[ ${a61:0:1} == "@" ]];then a61="${PATH_BASE:?"PATH_BASE missing"}/${a61:1}";elif [[ ${a61:0:1} == "~" ]];then local _s="${ARGSH_SOURCE:-${BASH_SOURCE[-1]}}";a61="${_s%/*}/${a61:1}";else local _s="${ARGSH_SOURCE:-${BASH_SOURCE[0]}}";a61="${_s%/*}/${a61}";fi;import::source "${a61}" || exit 1;};};import::source() { local a61="${1}";for a55 in "" ".sh" ".bash";do if [[ -f "${a61}${a55}" ]];then . "${a61}${a55}";return;fi;done;echo "Library not found ${a61}" >&2;return 1;};import::clear() { a1=();};is::tty() { [[ -t 1 ]];};is::array() { declare -p "${1}" &>/dev/null && [[ $(declare -p "${1}") == "declare -a"* ]];};is::uninitialized() { local a51="${1}";if is::array "${a51}";then [[ $(declare -p "${a51}") == "declare -a ${a51}" ]];else [[ ! ${!a51+x} ]];fi;};is::set() { ! is::uninitialized "${1}";};argsh::shebang() { local -r a37="${1}";: "${ARGSH_SOURCE="${a37}"}";export ARGSH_SOURCE;[[ "${BASH_SOURCE[-1]}" != "${a37}" && -f "${a37}" ]] || { binary::exists docker || { echo "This script requires Docker to be installed";return 1;} >&2;local a50="";! tty -s || a50="-it";docker run --rm ${a50} $(docker::user) -e "BATS_LOAD" -e "ARGSH_SOURCE" -e "GIT_COMMIT_SHA=$(git rev-parse HEAD 2>/dev/null || :)" -e "GIT_VERSION=$(git describe --tags --dirty 2>/dev/null || :)" ghcr.io/arg-sh/argsh:latest "${@}";return 0;};bash::version 4 3 0 || { echo "This script requires bash 4.3.0 or later";return 1;} >&2;shift;. "${a37}";};string::drop-index() { local a12="${1}";local a32="${2}";local a16="${3:-1}";echo "${a12:0:a32}${a12:a32+a16}";};string::random() { local a16="${1:-42}";local a27="${2:-"a-zA-Z0-9"}";local a64;until [[ "${a64:-}" =~ ^[:alpha:] ]];do a64=$(tr -dc "${a27}" < /dev/urandom | fold -w "${a16}" | head -n 1 || :);done;echo "${a64}";};string::indent() { local a12="${1:-'-'}";local a8="${2:-0}";local a35 a19;[[ ${a12} != '-' ]] || a12="$(cat)";mapfile -t a19 < <(echo "${a12}");for a35 in "${a19[@]}";do a35="$(string::trim-left "${a35}")";(( a8 == 0 )) || printf "%${a8}s" " ";echo "${a35}";done;};string::trim-left() { local a12="${1}";local a27="${2:-" "$'\n'$'\t'}";[[ -n ${a12:-} ]] || return 0;[[ ${a12} != '-' ]] || a12="$(cat)";while [[ -n "${a12}" ]];do [[ ${a27} == *${a12:0:1}* ]] || break;a12="${a12:1}";done;echo "${a12}";};string::trim-right() { local a12="${1:-'-'}";local a27="${2:-" "$'\n'$'\t'}";[[ ${a12} != '-' ]] || a12="$(cat)";while [[ -n "${a12}" ]];do [[ ${a27} == *${a12: -1}* ]] || break;a12="${a12:0: -1}";done;echo "${a12}";};string::trim() { local a12="${1:-'-'}";local a27="${2:-" "$'\n'$'\t'}";[[ ${a12} != '-' ]] || a12="$(cat)";echo "${a12}" | string::trim-left - "${a27}" | string::trim-right - "${a27}";};to::string() { local a26="${1}";echo "${a26}";};to::boolean() { local a26="${1}";case "${a26}" in
""|"false"|"0")a26="0";;
*)a26="1";;
esac;echo "${a26}";};to::int() { local a26="${1}";[[ ${a26} =~ ^-?[0-9]+$ ]] || return 1;echo "${a26}";};to::float() { local a26="${1}";[[ ${a26} =~ ^-?[0-9]+(\.[0-9]+)?$ ]] || return 1;echo "${a26}";};to::stdin() { local a26="${1}";[[ ${a26} != "-" ]] || a26="$(cat)";echo "${a26}";};to::file() { local a26="${1}";[[ -f "${a26}" ]] || return 1;echo "${a26}";};[[ "${BASH_SOURCE[0]}" != "${0}" ]] || argsh::shebang "${@}"