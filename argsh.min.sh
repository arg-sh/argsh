#!/usr/bin/env bash
# shellcheck disable=SC2178 disable=SC2120 disable=SC1090 disable=SC2046 disable=SC2155
set -euo pipefail; ARGSH_COMMIT_SHA="5e55b6b19a0e862ee7b252aacb4895fe7df514c4"; ARGSH_VERSION="v0.1.1"
: "${ARGSH_VERSION:=unknown}";: "${ARGSH_COMMIT_SHA:=unknown}";: "${ARGSH_FIELD_WIDTH:=24}";COMMANDNAME=("$(s="${ARGSH_SOURCE:-"${0}"}"; echo "${s##*/}")");:usage() { local a20="${1}"; shift;declare -p usage &>/dev/null || local -a usage=();declare -p args &>/dev/null || local -a args=();[[ $(( ${#usage[@]} % 2 )) -eq 0 ]] || :args::_error "usage must be an associative array";[[ $(( ${#usage[@]} % 2 )) -eq 0 ]] || :args::_error "usage must be an associative array";if [[ -z ${1:-} || ${1} == "-h" || ${1} == "--help" ]];then :usage::text "${a20}";exit 0;fi;if ! (( ${#COMMANDNAME[@]} )) && [[ ${1:-} == "--argsh" ]];then echo "https://arg.sh ${ARGSH_COMMIT_SHA:-} ${ARGSH_VERSION:-}";exit 0;fi;local -A a30=();local -a a58=("${@}");local a61 a23="";while (( ${#a58[@]} ));do if [[ ${a58[0]:0:1} != "-" ]];then [[ -z "${a61:-}" ]] || break;a61="${a58[0]}";a58=("${a58[@]:1}");continue;fi;:args::parse_flag || break;a30["${a23}"]=1;done;:args::check_required_flags;local a40;for (( a63=0; a63 < ${#usage[@]}; a63+=2 ));do for a25 in $(echo "${usage[a63]/:*}" | tr '|' "\n");do a25="${a25#\#}";[[ "${a61}" == "${a25}" ]] || continue;a23="${usage[a63]#\#}";a40="${usage[a63]/*:-}";a40="${a40#\#}";[[ "${a40}" == "${usage[a63]}" ]] || break 2;a40="${a40/|*}";break 2;done;done;[[ -n "${a40:-}" ]] || :args::error_usage "Invalid command: ${a61}";COMMANDNAME+=("${a23/[|:]*}");usage=("${a40}" "${a58[@]}");};:usage::text() { local a20="${1:-}";string::indent "${a20}";echo;echo "Usage: ${COMMANDNAME[*]} <command> [args]";[[ ${usage[0]:-} == '-' ]] || echo -e "\nAvailable Commands:";for (( a63=0; a63 < ${#usage[@]}; a63+=2 ));do [[ "${usage[a63]:0:1}" != "#" ]] || continue;[[ "${usage[a63]}" != "-" ]] || { echo;echo "${usage[a63+1]}";continue;};printf "  %-${ARGSH_FIELD_WIDTH}s %s\n" "${usage[a63]/[:|]*}" "${usage[a63+1]}";done;:args::text_flags;echo;echo "Use \"${COMMANDNAME[*]} <command> --help\" for more information about a command.";};:args() { local a20="${1}"; shift;declare -p args &>/dev/null || local -a args=();[[ $(( ${#args[@]} % 2 )) -eq 0 ]] || :args::_error "args must be an associative array";if [[ ${1:-} == "-h" || ${1:-} == "--help" ]];then :args::text;exit 0;fi;local a23="" a63 a0=1;local -A a30=();local -a a58=("${@}");while (( ${#a58[@]} ));do if [[ ${a58[0]:0:1} != "-" ]];then a63="$(:args::field_positional "${a0}")" || :args::error_usage "too many arguments: ${a58[0]}";a23="${args[a63]}";local -n a48="$(args::field_name "${a23}")";a48="$(:args::field_value "${a58[0]}")" || exit "${?}";a58=("${a58[@]:1}");(( ++a0 ));continue;fi;:args::parse_flag || :args::error_usage "unknown a37: ${a58[0]}";a30["${a23}"]=1;done;if a63="$(:args::field_positional "${a0}")";then a23="$(args::field_name "${args[a63]}")";if is::uninitialized "${a23}" && ! is::array "${a23}";then :args::error_usage "missing required argument: ${a23}";fi;fi;:args::check_required_flags;[[ ${#a58[@]} -eq 0 ]] || :args::error_usage "too many arguments: ${a58[*]}";};:args::text() { declare -p args &>/dev/null || return 0;local -a a2=() a10=();:args::positional;string::indent "${a20}";echo;echo "Usage:";echo "  ${COMMANDNAME[*]} ${a10[*]}";(( ${#a2[@]} == 0 )) || { echo;echo "Arguments:";for a63 in "${a2[@]}";do [[ ${args[a63]} != "-" ]] || continue;a43="$( printf "   %-${ARGSH_FIELD_WIDTH}s%s" " " "${args[a63+1]}" | fmt::tty;)";printf "   %-${ARGSH_FIELD_WIDTH}s%s\n" "$(:args::fieldf "${args[a63]}")" "$(string::trim-left "${a43}")";done;};:args::text_flags;echo;};:args::text_flags() { local -a args=("${args[@]}");local -a a26=();array::contains 'help|h:+' "${args[@]}" || args+=('help|h:+' "Show this help message");:args::flags;(( ${#a26[@]} )) || return 0;[[ "${args[${a26[0]}]}" == "-" ]] || echo -e "\nOptions:";for a63 in "${a26[@]}";do [[ "${args[a63]:0:1}" != "#" ]] || continue;[[ "${args[a63]}" != "-" ]] || { echo;echo "${args[a63+1]}";continue;};:args::fieldf "${args[a63]}";{ echo -n "           ";echo -e "${args[a63+1]}\n";} | fmt::tty;done;};:args::flags() { declare -p args &>/dev/null || local -a args;declare -p a26 &>/dev/null || local -a a26;for (( a63=0; a63 < "${#args[@]}"; a63+=2 ));do if [[ ${args[a63]} == *"|"* || ${args[a63]} == '-' ]];then a26+=("${a63}");fi;done;};:args::positional() { declare -p args &>/dev/null || local -a args;declare -p a2 &>/dev/null || local -a a2;declare -p a10 &>/dev/null || local -a a10;local a48;for (( a63=0; a63 < "${#args[@]}"; a63+=2 ));do [[ ${args[a63]} != *"|"* && ${args[a63]} != '-' ]] || continue;a48="$(args::field_name "${args[a63]}")";a2+=("${a63}");if is::array "${a48}";then a10+=("...${a48}");continue;fi;if ! is::uninitialized "${a48}";then a10+=("[${a48}]");continue;fi;a10+=("<${a48}>");done;};:args::parse_flag() { declare -p a58 a23 &>/dev/null || return 1;local a37="${a58[0]/=*}";if [[ ${a37:0:2} == "--" ]];then a23="$(:args::field_lookup "${a37:2}")" || return "${?}";elif [[ ${a37:0:1} == "-" ]];then a37="${a37:0:2}";a23="$(:args::field_lookup "${a37:1}")" || return "${?}";fi;:args::field_set_flag "${a23}";};:args::check_required_flags() { declare -p a30 args &>/dev/null || return 1;local a23;local -a a27;for (( a63=0; a63 < ${#args[@]}; a63+=2 ));do a23="${args[a63]}";:args::field_attrs "${a23}";if (( a27[2] )) && ! (( a27[4] ));then local -n a48="${a27[0]}";a48=0;fi;if (( a27[6] )) && [[ -z ${a30[${args[a63]}]:-} ]];then :args::error_usage "missing required a37: ${args[a63]/|*}";fi;done;};:args::field_set_flag() { local a23="${1}";declare -p a58 a37 &>/dev/null || return 1;local -a a27;:args::field_attrs "${a23}";local -n a48="${a27[0]}";local a5 a4;if (( a27[2] ));then a5=1;if [[ ${a37:0:2} == "--" ]];then a58=("${a58[@]:1}");else a58[0]="-${a58[0]:2}";[[ ${a58[0]} != "-" ]] || a58=("${a58[@]:1}");fi;fi;[[ -n ${a5:-} ]] || { a4="${a58[0]/${a37}}";if [[ ${a4} == "" ]];then (( ${#a58[@]} )) || :args::error "missing value for a37: ${a27[0]}";a5="${a58[1]}";a58=("${a58[@]:1}");else [[ "${a4:0:1}" != "=" ]] || a4="${a4:1}";a5="${a4}";fi;a5="$(:args::field_value "${a5}")" || exit "${?}";a58=("${a58[@]:1}");};if (( a27[5] ));then a48+=("${a5}");else a48="${a5}";fi;};:args::field_value() { local a18="${1}";declare -p a23 &>/dev/null || return 1;declare -p a27 &>/dev/null || { local -a a27;:args::field_attrs "${a23}";};declare -f "to::${a27[3]}" &>/dev/null || :args::_error "unknown type: ${a27[3]}";"to::${a27[3]}" "${a18}" "${a27[0]}" || :args::error_usage "invalid type (${a27[3]}): ${a18}";};:args::field_lookup() { local a23="${1}";declare -p args &>/dev/null || return 1;for (( a63=0; a63 < ${#args[@]}; a63+=2 ));do if [[ ${args[a63]} =~ (^${a23}\||\|${a23}:|\|${a23}$) ]];then echo "${args[a63]}";return 0;fi;done;return 1;};:args::field_positional() { local a6="${1:-1}";declare -p args &>/dev/null || return 1;for (( a63=0; a63 < ${#args[@]}; a63+=2 ));do if [[ ${args[a63]} != *"|"* && ${args[a63]} != '-' ]];then if is::array "$(args::field_name "${args[a63]}")" || (( --a6 == 0 ));then echo "${a63}";return 0;fi;fi;done;return 1;};args::field_name() { local a23="${1}";local a29="${2:-1}";a23="${a23/[|:]*}";a23="${a23#\#}";if (( a29 ));then a23="${a23//-/_}";fi;echo "${a23}";};:args::field_attrs() { local a23="${1}";declare -p a27 &>/dev/null || local -a a27;a27=( "" "" 0 "" 0 0 0 0 "" );local a38="+~!";local a35="${a23#*[:]}";[ "${a35}" != "${a23}" ] || a35="";a27[0]="$(args::field_name "${a23}")";a27[8]="$(args::field_name "${a23}" 0)";[[ ${a27[0]:0:1} != "#" ]] || { a27[7]=1;};local -n a48="${a27[0]}";local -a a26;mapfile -t a26 < <(echo "${a23/[:]*}" | tr '|' '\n');[[ ${#a26[@]} -eq 1 ]] || { a27[1]="${a26[1]}";};if is::array "${a27[0]}";then a27[5]=1;! is::uninitialized "${a27[0]}" || a48=();! (( ${#a48[@]} )) || a27[4]=1;elif ! is::uninitialized "${a27[0]}";then a27[4]=1;fi;while (( ${#a35} > 0 ));do if [[ ${a35:0:1} == "+" ]];then [[ -z ${a27[3]} ]] || :args::_error "cannot have multiple types: ${a27[3]} and boolean";a27[2]=1;a35="${a35:1}";continue;fi;if [[ ${a35:0:1} == "~" ]];then ! (( a27[2] )) || :args::_error "already flagged as boolean";a35="${a35:1}";a27[3]="${a35/[$a38]*}";a35="${a35:${#a27[3]}}";continue;fi;if [[ ${a35:0:1} == "!" ]];then ! (( a27[6] )) || :args::_error "field already flagged as required";a27[6]=1;a35="${a35:1}";continue;fi;echo ":args error: unknown modifier: ${a35:0:1}" >&2;exit 2;done;if [[ -z ${a27[3]} && ${a27[2]} -eq 0 ]];then a27[3]="string";fi;};:args::fieldf() { local a23="${1}";declare -p a27 &>/dev/null || { local -a a27;:args::field_attrs "${a23}";};[[ ${a23} == *"|"* ]] || { echo "${a27[8]} ${a27[3]}";return 0;};local -n a48="${a27[0]}";a15="   ";! (( a27[6] )) || a15=" ! ";if [[ -n ${a27[1]} ]];then a15+="-${a27[1]}, --${a27[8]}";else a15+="    --${a27[8]}";fi;a15+=" ";! (( a27[5] )) || a15+="...";a15+="${a27[3]}";if (( a27[4] )) && ! (( a27[2] ));then a15+=" (default: ${a48[*]})";fi;echo "${a15}";};args::run() { local a56="${1}"; shift;for (( a63=0; a63<${#}; a63++ ));do local a50="${1}"; shift;local a40="${1}"; shift;if ! (( a56 )) || (( a50 ));then "${a40}";fi;done;};array::contains() { local -r a8="${1}"; shift;for a7 in "${@}";do [[ "${a7}" != "${a8}" ]] || return 0;done;return 1;};array::join() { local -r a3="${1}"; shift;local a16;printf -v a16 "${a3}%s" "${@}";echo "${a16:${#a3}}";};array::nth() { local -n a51="${1}";local -r a54="${2}";shift 2;for (( a63=1; a63<=${#}; a63++ ));do (( a63 % a54 )) || a51+=("${!a63}");done;};bash::version() { local a28="${1:-4}";local a19="${2:-3}";local a31="${3:-0}";if [[ "${BASH_VERSINFO[0]}" -lt "${a28}" ]];then return 1;elif [[ "${BASH_VERSINFO[0]}" -gt "${a28}" ]];then return 0;fi;if [[ "${BASH_VERSINFO[1]}" -lt "${a19}" ]];then return 1;elif [[ "${BASH_VERSINFO[1]}" -gt "${a19}" ]];then return 0;fi;if [[ "${BASH_VERSINFO[2]}" -lt "${a31}" ]];then return 1;fi;return 0;};binary::exists() { local a13="${1}";command -v "${a13}" &> /dev/null || { echo "${a13} is required to run this script" >&2;return 1;};};binary::github() { local a36="${1}";local -r a13="$(basename "${a36}")";local a33="${2}";local a39="${3}";local a60="${4:-}";curl -Lso /dev/stdout "https://github.com/${a33}/releases/download/${a39}" | { if [[ -n "${a60}" ]];then tar -xz -C "$(dirname "${a36}")" "${a60}";else tee "${a36}" &> /dev/null;fi;chmod +x "${a36}";};};binary::arch() { local a22="${1}";local -r a45="$(uname -m)";case "${a45}" in
x86_64|amd64)if (( a22 )); then echo "64-bit"; else echo "amd64"; fi;;
armv7l)echo "arm";;
aarch64)echo "arm64";;
*)echo "${a45}";;
esac;};binary::jq() { binary::exists "jq" 2>/dev/null || { local -r a9="$(github::latest "stedolan/jq")" system="$(uname -s)";binary::github "${PATH_BIN?}/jq" "stedolan/jq" "${a9}/jq-${system,,}-$(binary::arch)";};};binary::vale() { binary::exists "vale" 2>/dev/null || { local -r a9="$(github::latest "errata-ai/vale")" system="$(uname -s)";binary::github "${PATH_BIN?}/vale" "errata-ai/vale" "${a9}/vale_${a9:1}_$(uname -s)_$(binary::arch 1).tar.gz" "vale";};};docker::user() { local a59="${1:-"$(id -u)"}";local a57="${2:-"$(id -g)"}";local a44="${3:-"$(whoami)"}";local a42="${4:-"/workspace"}";local a21="${5:-"/bin/sh"}";local a34;a34="$(pwd)";a34="${a34#"${PATH_BASE:-}"}";if [[ "${a34}" == "$(pwd)" ]];then a34="${a42}";else a34="${a42}${a34}";fi;echo "${a44}:x:${a59}:${a57}::${a42}:${a21}" > /tmp/docker_passwd;echo "${a44}:x:${a57}:" > /tmp/docker_group;echo "-v /tmp/docker_passwd:/etc/passwd -v /tmp/docker_group:/etc/group";echo "-u ${a59}:${a57}";echo "-v ${PATH_BASE:-"$(pwd)"}:${a42}";echo "-w ${a34}";};error::stacktrace() { local -r a41="${1:-${?}}";if (( a41 ));then echo -e "\n\033[38;5;196m■■ Stacktrace(${a41}): \e[1m${BASH_COMMAND}\e[22m";for a63 in $(seq 1 $((${#FUNCNAME[@]} - 2)));do echo -e "${a63}. ${BASH_SOURCE[a63]}:${BASH_LINENO[a63-1]} ➜ ${FUNCNAME[a63]}()";done;echo -e "\033[0m";return "${a41}";fi;};:args::_error() { declare -p a23 &>/dev/null || local a23="???";echo ":args error [${a23}] ➜ ${1}" >&2;exit 2;};:args::error() { declare -p a23 &>/dev/null || local a23="???";echo -e "[ ${a23/[:|]*} ] invalid argument\n➜ ${1}\n" >&2;exit 2;};:args::error_usage() { declare -p a23 &>/dev/null || local a23="???";echo -e "[ ${a23/[:|]*} ] invalid usage\n➜ ${1}\n" >&2;echo -e "Use \"${0##*/} -h\" for more information" >&2;exit 2;};fmt::tty() { local a53="${1:-"$(cat)"}";if ! command -v fmt &>/dev/null || [[ ! -t 1 ]];then echo "${a53}";return 0;fi;local a47;a47="$(tput cols)";echo "${a53}" | fmt -w "${a47}";};github::latest() { local a33="${1}";curl -fsSLI -o /dev/null -w "%{url_effective}" "https://github.com/${a33}/releases/latest" | rev | cut -d'/' -f1 | rev;};declare -gA a1=();import() { local a52="${1}";(( ${a1["${a52}"]:-} )) || { a1["${a52}"]=1;if [[ ${a52:0:1} == "@" ]];then a52="${PATH_BASE:?"PATH_BASE missing"}/${a52:1}";elif [[ ${a52:0:1} == "~" ]];then local _s="${ARGSH_SOURCE:-${BASH_SOURCE[-1]}}";a52="${_s%/*}/${a52:1}";else a52="${BASH_SOURCE[0]%/*}/${a52}";fi;import::source "${a52}" || exit 1;};};import::source() { local a52="${1}";for a62 in "" ".sh" ".bash";do if [[ -f "${a52}${a62}" ]];then . "${a52}${a62}";return;fi;done;echo "Library not found ${a52}" >&2;return 1;};import::clear() { a1=();};is::tty() { [[ -t 1 ]];};is::array() { declare -p "${1}" &>/dev/null && [[ $(declare -p "${1}") == "declare -a"* ]];};is::uninitialized() { local a49="${1}";if is::array "${a49}";then [[ $(declare -p "${a49}") == "declare -a ${a49}" ]];else [[ ! ${!a49+x} ]];fi;};is::set() { ! is::uninitialized "${1}";};argsh::shebang() { local -r a39="${1}";: "${ARGSH_SOURCE="${a39}"}";export ARGSH_SOURCE;[[ "${BASH_SOURCE[-1]}" != "${a39}" && -f "${a39}" ]] || { binary::exists docker || { echo "This script requires Docker to be installed";return 1;} >&2;local a55="";! tty -s || a55="-it";docker run --rm ${a55} $(docker::user) -e "BATS_LOAD" -e "ARGSH_SOURCE" -e "GIT_COMMIT_SHA=$(git rev-parse HEAD 2>/dev/null || :)" -e "GIT_VERSION=$(git describe --tags --dirty 2>/dev/null || :)" ghcr.io/arg-sh/argsh:latest "${@}";return 0;};bash::version 4 3 0 || { echo "This script requires bash 4.3.0 or later";return 1;} >&2;shift;. "${a39}";};string::drop-index() { local a14="${1}";local a17="${2}";local a12="${3:-1}";echo "${a14:0:a17}${a14:a17+a12}";};string::random() { local a12="${1:-42}";local a24="${2:-"a-zA-Z0-9"}";local a53;until [[ "${a53:-}" =~ ^[:alpha:] ]];do a53=$(tr -dc "${a24}" < /dev/urandom | fold -w "${a12}" | head -n 1 || :);done;echo "${a53}";};string::indent() { local a14="${1:-'-'}";local a11="${2:-0}";local a46 a32;[[ ${a14} != '-' ]] || a14="$(cat)";mapfile -t a32 < <(echo "${a14}");for a46 in "${a32[@]}";do a46="$(string::trim-left "${a46}")";(( a11 == 0 )) || printf "%${a11}s" " ";echo "${a46}";done;};string::trim-left() { local a14="${1}";local a24="${2:-" "$'\n'$'\t'}";[[ -n ${a14:-} ]] || return 0;[[ ${a14} != '-' ]] || a14="$(cat)";while [[ -n "${a14}" ]];do [[ ${a24} == *${a14:0:1}* ]] || break;a14="${a14:1}";done;echo "${a14}";};string::trim-right() { local a14="${1:-'-'}";local a24="${2:-" "$'\n'$'\t'}";[[ ${a14} != '-' ]] || a14="$(cat)";while [[ -n "${a14}" ]];do [[ ${a24} == *${a14: -1}* ]] || break;a14="${a14:0: -1}";done;echo "${a14}";};string::trim() { local a14="${1:-'-'}";local a24="${2:-" "$'\n'$'\t'}";[[ ${a14} != '-' ]] || a14="$(cat)";echo "${a14}" | string::trim-left - "${a24}" | string::trim-right - "${a24}";};to::string() { local a18="${1}";echo "${a18}";};to::boolean() { local a18="${1}";case "${a18}" in
""|"false"|"0")a18="0";;
*)a18="1";;
esac;echo "${a18}";};to::int() { local a18="${1}";[[ ${a18} =~ ^-?[0-9]+$ ]] || return 1;echo "${a18}";};to::float() { local a18="${1}";[[ ${a18} =~ ^-?[0-9]+(\.[0-9]+)?$ ]] || return 1;echo "${a18}";};to::stdin() { local a18="${1}";[[ ${a18} != "-" ]] || a18="$(cat)";echo "${a18}";};to::file() { local a18="${1}";[[ -f "${a18}" ]] || return 1;echo "${a18}";};[[ "${BASH_SOURCE[0]}" != "${0}" ]] || argsh::shebang "${@}"