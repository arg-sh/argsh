#!/usr/bin/env bash
# shellcheck disable=SC2178 disable=SC2120 disable=SC1090 disable=SC2046 disable=SC2155
set -euo pipefail; ARGSH_COMMIT_SHA="539d109487a40cf66dc290a22192c74290472475"; ARGSH_VERSION="v0.0.4"
: "${ARGSH_VERSION:=unknown}";: "${ARGSH_COMMIT_SHA:=unknown}";: "${ARGSH_FIELD_WIDTH:=24}";COMMANDNAME=("$(s="${ARGSH_SOURCE:-"${0}"}"; echo "${s##*/}")");:usage() { local a25="${1}"; shift;declare -p usage &>/dev/null || local -a usage=();declare -p args &>/dev/null || local -a args=();[[ $(( ${#usage[@]} % 2 )) -eq 0 ]] || :args::_error "usage must be an associative array";[[ $(( ${#usage[@]} % 2 )) -eq 0 ]] || :args::_error "usage must be an associative array";if [[ -z ${1:-} || ${1} == "-h" || ${1} == "--help" ]]; then :usage::text "${a25}";exit 0;fi;if ! (( ${#COMMANDNAME[@]} )) && [[ ${1:-} == "--argsh" ]]; then echo "https://arg.sh ${ARGSH_COMMIT_SHA:-} ${ARGSH_VERSION:-}";exit 0;fi;local -A a27=();local -a a53=("${@}");local a56 a26="";while (( ${#a53[@]} )); do if [[ ${a53[0]:0:1} != "-" ]]; then [[ -z "${a56:-}" ]] || break;a56="${a53[0]}";a53=("${a53[@]:1}");continue;fi;:args::parse_flag || break;a27["${a26}"]=1;done;:args::check_required_flags;local a43;for (( a62=0; a62 < ${#usage[@]}; a62+=2 )); do for a28 in $(echo "${usage[a62]/:*}" | tr '|' "\n"); do a28="${a28#\#}";[[ "${a56}" == "${a28}" ]] || continue;a26="${usage[a62]#\#}";a43="${usage[a62]/*:-}";a43="${a43#\#}";[[ "${a43}" == "${usage[a62]}" ]] || break 2;a43="${a43/|*}";break 2;done;done;[[ -n "${a43:-}" ]] || :args::error_usage "Invalid command: ${a56}";COMMANDNAME+=("${a26/[|:]*}");usage=("${a43}" "${a53[@]}");};:usage::text() { local a25="${1:-}";string::indent "${a25}";echo;echo "Usage: ${COMMANDNAME[*]} <command> [args]";[[ ${usage[0]:-} == '-' ]] || echo -e "\nAvailable Commands:";for (( a62=0; a62 < ${#usage[@]}; a62+=2 )); do [[ "${usage[a62]:0:1}" != "#" ]] || continue;[[ "${usage[a62]}" != "-" ]] || { echo;echo "${usage[a62+1]}";continue;};printf "  %-${ARGSH_FIELD_WIDTH}s %s\n" "${usage[a62]/[:|]*}" "${usage[a62+1]}";done;:args::text_flags;echo;echo "Use \"${COMMANDNAME[*]} <command> --help\" for more information about a command.";};:args() { local a25="${1}"; shift;declare -p args &>/dev/null || local -a args=();[[ $(( ${#args[@]} % 2 )) -eq 0 ]] || :args::_error "args must be an associative array";if [[ ${1:-} == "-h" || ${1:-} == "--help" ]]; then :args::text;exit 0;fi;local a26="" a62 a0=1;local -A a27=();local -a a53=("${@}");while (( ${#a53[@]} )); do if [[ ${a53[0]:0:1} != "-" ]]; then a62="$(:args::field_positional "${a0}")" || :args::error_usage "too many arguments: ${a53[0]}";a26="${args[a62]}";local -n a50="$(args::field_name "${a26}")";a50="$(:args::field_value "${a53[0]}")" || exit "${?}";a53=("${a53[@]:1}");(( ++a0 ));continue;fi;:args::parse_flag || :args::error_usage "unknown a35: ${a53[0]}";a27["${a26}"]=1;done;if a62="$(:args::field_positional "${a0}")"; then a26="$(args::field_name "${args[a62]}")";if is::uninitialized "${a26}" && ! is::array "${a26}"; then :args::error_usage "missing required argument: ${a26}";fi;fi;:args::check_required_flags;[[ ${#a53[@]} -eq 0 ]] || :args::error_usage "too many arguments: ${a53[*]}";};:args::text() { declare -p args &>/dev/null || return 0;local -a a2=() a11=();:args::positional
string::indent "${a25}";echo;echo "Usage:";echo "  ${COMMANDNAME[*]} ${a11[*]}";(( ${#a2[@]} == 0 )) || { echo;echo "Arguments:";for a62 in "${a2[@]}"; do [[ ${args[a62]} != "-" ]] || continue;a40="$(printf "   %-${ARGSH_FIELD_WIDTH}s%s" " " "${args[a62+1]}" | fmt::tty;)";printf "   %-${ARGSH_FIELD_WIDTH}s%s\n" "$(:args::fieldf "${args[a62]}")" "$(string::trim-left "${a40}")";done;};:args::text_flags;echo;};:args::text_flags() { local -a args=("${args[@]}");local -a a17=();array::contains 'help|h:+' "${args[@]}" || args+=('help|h:+' "Show this help message");:args::flags;(( ${#a17[@]} )) || return 0;[[ "${args[${a17[0]}]}" == "-" ]] || echo -e "\nOptions:";for a62 in "${a17[@]}"; do [[ "${args[a62]:0:1}" != "#" ]] || continue;[[ "${args[a62]}" != "-" ]] || { echo;echo "${args[a62+1]}";continue;};:args::fieldf "${args[a62]}";{ echo -n "           ";echo -e "${args[a62+1]}\n";} | fmt::tty;done;};:args::flags() { declare -p args &>/dev/null || local -a args;declare -p a17 &>/dev/null || local -a a17;for (( a62=0; a62 < "${#args[@]}"; a62+=2 )); do if [[ ${args[a62]} == *"|"* || ${args[a62]} == '-' ]]; then a17+=("${a62}");fi;done;};:args::positional() { declare -p args &>/dev/null || local -a args;declare -p a2 &>/dev/null || local -a a2;declare -p a11 &>/dev/null || local -a a11;local a50;for (( a62=0; a62 < "${#args[@]}"; a62+=2 )); do [[ ${args[a62]} != *"|"* && ${args[a62]} != '-' ]] || continue;a50="$(args::field_name "${args[a62]}")";a2+=("${a62}");if is::array "${a50}"; then a11+=("...${a50}");continue;fi;if ! is::uninitialized "${a50}"; then a11+=("[${a50}]");continue;fi;a11+=("<${a50}>");done;};:args::parse_flag() { declare -p a53 a26 &>/dev/null || return 1;local a35="${a53[0]/=*}";if [[ ${a35:0:2} == "--" ]]; then a26="$(:args::field_lookup "${a35:2}")" || return "${?}";elif [[ ${a35:0:1} == "-" ]]; then a35="${a35:0:2}";a26="$(:args::field_lookup "${a35:1}")" || return "${?}";fi;:args::field_set_flag "${a26}";};:args::check_required_flags() { declare -p a27 args &>/dev/null || return 1;local a26;local -a a29;for (( a62=0; a62 < ${#args[@]}; a62+=2 )); do a26="${args[a62]}";:args::field_attrs "${a26}";if (( a29[2] )) && ! (( a29[4] )); then local -n a50="${a29[0]}";a50=0;fi;if (( a29[6] )) && [[ -z ${a27[${args[a62]}]:-} ]]; then :args::error_usage "missing required a35: ${args[a62]/|*}";fi;done;};:args::field_set_flag() { local a26="${1}";declare -p a53 a35 &>/dev/null || return 1;local -a a29;:args::field_attrs "${a26}";local -n a50="${a29[0]}";local a3 a4;if (( a29[2] )); then a3=1;if [[ ${a35:0:2} == "--" ]]; then a53=("${a53[@]:1}");else a53[0]="-${a53[0]:2}";[[ ${a53[0]} != "-" ]] || a53=("${a53[@]:1}");fi;fi;[[ -n ${a3:-} ]] || { a4="${a53[0]/${a35}}";if [[ ${a4} == "" ]]; then (( ${#a53[@]} )) || :args::error "missing value for a35: ${a29[0]}";a3="${a53[1]}";a53=("${a53[@]:1}");else [[ "${a4:0:1}" != "=" ]] || a4="${a4:1}";a3="${a4}";fi;a3="$(:args::field_value "${a3}")" || exit "${?}";a53=("${a53[@]:1}");};if (( a29[5] )); then a50+=("${a3}");else a50="${a3}";fi;};:args::field_value() { local a32="${1}";declare -p a26 &>/dev/null || return 1;declare -p a29 &>/dev/null || { local -a a29;:args::field_attrs "${a26}";};declare -f "to::${a29[3]}" &>/dev/null || :args::_error "unknown type: ${a29[3]}";"to::${a29[3]}" "${a32}" "${a29[0]}" || :args::error_usage "invalid type (${a29[3]}): ${a32}";};:args::field_lookup() { local a26="${1}";declare -p args &>/dev/null || return 1;for (( a62=0; a62 < ${#args[@]}; a62+=2 )); do if [[ ${args[a62]} =~ (^${a26}\||\|${a26}:|\|${a26}$) ]]; then echo "${args[a62]}";return 0;fi;done;return 1;};:args::field_positional() { local a6="${1:-1}";declare -p args &>/dev/null || return 1;for (( a62=0; a62 < ${#args[@]}; a62+=2 )); do if [[ ${args[a62]} != *"|"* && ${args[a62]} != '-' ]]; then if is::array "$(args::field_name "${args[a62]}")" || (( --a6 == 0 )); then echo "${a62}";return 0;fi;fi;done;return 1;};args::field_name() { local a26="${1}";local a31="${2:-1}";a26="${a26/[|:]*}";a26="${a26#\#}";if (( a31 )); then a26="${a26//-/_}";fi;echo "${a26}";};:args::field_attrs() { local a26="${1}";declare -p a29 &>/dev/null || local -a a29;a29=("" "" 0 "" 0 0 0 0 "" );local a45="+~!";local a44="${a26#*[:]}";[ "${a44}" != "${a26}" ] || a44="";a29[0]="$(args::field_name "${a26}")";a29[8]="$(args::field_name "${a26}" 0)";[[ ${a29[0]:0:1} != "#" ]] || { a29[7]=1;};local -n a50="${a29[0]}";local -a a17;mapfile -t a17 < <(echo "${a26/[:]*}" | tr '|' '\n');[[ ${#a17[@]} -eq 1 ]] || { a29[1]="${a17[1]}";};if is::array "${a29[0]}"; then a29[5]=1;! is::uninitialized "${a29[0]}" || a50=();! (( ${#a50[@]} )) || a29[4]=1;elif ! is::uninitialized "${a29[0]}"; then a29[4]=1;fi;while (( ${#a44} > 0 )); do if [[ ${a44:0:1} == "+" ]]; then [[ -z ${a29[3]} ]] || :args::_error "cannot have multiple types: ${a29[3]} and boolean";a29[2]=1;a44="${a44:1}";continue;fi;if [[ ${a44:0:1} == "~" ]]; then ! (( a29[2] )) || :args::_error "already flagged as boolean";a44="${a44:1}";a29[3]="${a44/[$a45]*}";a44="${a44:${#a29[3]}}";continue;fi;if [[ ${a44:0:1} == "!" ]]; then ! (( a29[6] )) || :args::_error "field already flagged as required";a29[6]=1;a44="${a44:1}";continue;fi;echo ":args error: unknown modifier: ${a44:0:1}" >&2;exit 2;done;if [[ -z ${a29[3]} && ${a29[2]} -eq 0 ]]; then a29[3]="string";fi;};:args::fieldf() { local a26="${1}";declare -p a29 &>/dev/null || { local -a a29;:args::field_attrs "${a26}";};[[ ${a26} == *"|"* ]] || { echo "${a29[8]} ${a29[3]}";return 0;};local -n a50="${a29[0]}";a9="   ";! (( a29[6] )) || a9=" ! ";if [[ -n ${a29[1]} ]]; then a9+="-${a29[1]}, --${a29[8]}";else a9+="    --${a29[8]}";fi;a9+=" ";! (( a29[5] )) || a9+="...";a9+="${a29[3]}";if (( a29[4] )) && ! (( a29[2] )); then a9+=" (default: ${a50[*]})";fi;echo "${a9}";};args::run() { local a54="${1}"; shift;for (( a62=0; a62<${#}; a62++ )); do local a59="${1}"; shift;local a43="${1}"; shift;if ! (( a54 )) || (( a59 )); then "${a43}";fi;done;};array::contains() { local -r a16="${1}"; shift;for a7 in "${@}"; do [[ "${a7}" != "${a16}" ]] || return 0;done;return 1;};array::join() { local -r a5="${1}"; shift;local a15;printf -v a15 "${a5}%s" "${@}";echo "${a15:${#a5}}";};array::nth() { local -n a55="${1}";local -r a61="${2}";shift 2;for (( a62=1; a62<=${#}; a62++ )); do (( a62 % a61 )) || a55+=("${!a62}");done;};bash::version() { local a19="${1:-4}";local a20="${2:-3}";local a21="${3:-0}";if [[ "${BASH_VERSINFO[0]}" -lt "${a19}" ]]; then return 1;elif [[ "${BASH_VERSINFO[0]}" -gt "${a19}" ]]; then return 0;fi;if [[ "${BASH_VERSINFO[1]}" -lt "${a20}" ]]; then return 1;elif [[ "${BASH_VERSINFO[1]}" -gt "${a20}" ]]; then return 0;fi;if [[ "${BASH_VERSINFO[2]}" -lt "${a21}" ]]; then return 1;fi;return 0;};binary::exists() { local a10="${1}";command -v "${a10}" &> /dev/null || { echo "${a10} is required to run this script" >&2;return 1;};};binary::github() { local a34="${1}";local -r a10="$(basename "${a34}")";local a39="${2}";local a33="${3}";local a48="${4:-}";curl -Lso /dev/stdout "https://github.com/${a39}/releases/download/${a33}" | { if [[ -n "${a48}" ]]; then tar -xz -C "$(dirname "${a34}")" "${a48}";else tee "${a34}" &> /dev/null;fi;chmod +x "${a34}";};};binary::arch() { local a18="${1}";local -r a41="$(uname -m)";case "${a41}" in
x86_64|amd64) if (( a18 )); then echo "64-bit"; else echo "amd64"; fi ;;
armv7l) echo "arm" ;;
aarch64) echo "arm64" ;;
*) echo "${a41}" ;;
esac;};binary::jq() { binary::exists "jq" 2>/dev/null || { local -r a13="$(github::latest "stedolan/jq")" system="$(uname -s)";binary::github "${PATH_BIN?}/jq" "stedolan/jq" "${a13}/jq-${system,,}-$(binary::arch)";};};binary::vale() { binary::exists "vale" 2>/dev/null || { local -r a13="$(github::latest "errata-ai/vale")" system="$(uname -s)";binary::github "${PATH_BIN?}/vale" "errata-ai/vale" "${a13}/vale_${a13:1}_$(uname -s)_$(binary::arch 1).tar.gz" "vale";};};docker::user() { local a60="${1:-"$(id -u)"}";local a49="${2:-"$(id -g)"}";local a36="${3:-"$(whoami)"}";local a42="${4:-"/workspace"}";local a22="${5:-"/bin/sh"}";echo "${a36}:x:${a60}:${a49}::${a42}:${a22}" > /tmp/docker_passwd;echo "${a36}:x:${a49}:" > /tmp/docker_group;echo "-v /tmp/docker_passwd:/etc/passwd -v /tmp/docker_group:/etc/group";echo "-u ${a60}:${a49}";echo "-v ${PATH_BASE:-.}:${a42}";echo "-w ${a42}";};error::stacktrace() { local -r a38="${1:-${?}}";if (( a38 )); then echo -e "\n\033[38;5;196m■■ Stacktrace(${a38}): \e[1m${BASH_COMMAND}\e[22m";for a62 in $(seq 1 $((${#FUNCNAME[@]} - 2))); do echo -e "${a62}. ${BASH_SOURCE[a62]}:${BASH_LINENO[a62-1]} ➜ ${FUNCNAME[a62]}()";done;echo -e "\033[0m";return "${a38}";fi;};:args::_error() { declare -p a26 &>/dev/null || local a26="???";echo ":args error [${a26}] ➜ ${1}" >&2;exit 2;};:args::error() { declare -p a26 &>/dev/null || local a26="???";echo -e "[ ${a26/[:|]*} ] invalid argument\n➜ ${1}\n" >&2;exit 2;};:args::error_usage() { declare -p a26 &>/dev/null || local a26="???";echo -e "[ ${a26/[:|]*} ] invalid usage\n➜ ${1}\n" >&2;echo -e "Use \"${0##*/} -h\" for more information" >&2;exit 2;};fmt::tty() { local a47="${1:-"$(cat)"}";if ! command -v fmt &>/dev/null || [[ ! -t 1 ]]; then echo "${a47}";return 0;fi;local a46;a46="$(tput cols)";echo "${a47}" | fmt -w "${a46}";};github::latest() { local a39="${1}";curl -fsSLI -o /dev/null -w "%{url_effective}" "https://github.com/${a39}/releases/latest" | rev | cut -d'/' -f1 | rev;};declare -gA a1=();import() { local a57="${1}";(( ${a1["${a57}"]:-} )) || { a1["${a57}"]=1;if [[ ${a57:0:1} == "@" ]]; then a57="${PATH_BASE:?"PATH_BASE missing"}/${a57:1}";elif [[ ${a57:0:1} == "~" ]]; then local _s="${ARGSH_SOURCE:-${BASH_SOURCE[-1]}}";a57="${_s%/*}/${a57:1}";else a57="${BASH_SOURCE[0]%/*}/${a57}";fi;import::source "${a57}" || exit 1;};};import::source() { local a57="${1}";for a52 in "" ".sh" ".bash"; do if [[ -f "${a57}${a52}" ]]; then . "${a57}${a52}";return;fi;done;echo "Library not found ${a57}" >&2;return 1;};import::clear() { a1=();};is::tty() { [[ -t 1 ]];};is::array() { declare -p "${1}" &>/dev/null && [[ $(declare -p "${1}") == "declare -a"* ]];};is::uninitialized() { local a58="${1}";if is::array "${a58}"; then [[ $(declare -p "${a58}") == "declare -a ${a58}" ]];else [[ ! ${!a58+x} ]];fi;};is::set() { ! is::uninitialized "${1}";};argsh::shebang() { local -r a33="${1}";: "${ARGSH_SOURCE="${a33}"}";export ARGSH_SOURCE;[[ "${BASH_SOURCE[-1]}" != "${a33}" && -f "${a33}" ]] || { binary::exists docker || { echo "This script requires Docker to be installed";return 1;} >&2;local a51="";[[ ! -t 1 ]] || a51="-it";docker run --rm ${a51} $(docker::user) -e "BATS_LOAD" -e "ARGSH_SOURCE" -e "GIT_COMMIT_SHA=$(git rev-parse HEAD || :)" -e "GIT_VERSION=$(git describe --tags --dirty || :)" ghcr.io/arg-sh/argsh:latest "${@}" ;return 0;} >&2;bash::version 4 3 0 || { echo "This script requires bash 4.3.0 or later";return 1;} >&2;shift;. "${a33}";};string::drop-index() { local a8="${1}";local a23="${2}";local a14="${3:-1}";echo "${a8:0:a23}${a8:a23+a14}";};string::random() { local a14="${1:-42}";local a30="${2:-"a-zA-Z0-9"}";local a47;until [[ "${a47:-}" =~ ^[:alpha:] ]]; do a47=$(tr -dc "${a30}" < /dev/urandom | fold -w "${a14}" | head -n 1 || :);done;echo "${a47}";};string::indent() { local a8="${1:-'-'}";local a12="${2:-0}";local a37 a24;[[ ${a8} != '-' ]] || a8="$(cat)";mapfile -t a24 < <(echo "${a8}");for a37 in "${a24[@]}"; do a37="$(string::trim-left "${a37}")";(( a12 == 0 )) || printf "%${a12}s" " " ;echo "${a37}";done;};string::trim-left() { local a8="${1}";local a30="${2:-" "$'\n'$'\t'}";[[ -n ${a8:-} ]] || return 0;[[ ${a8} != '-' ]] || a8="$(cat)" ;while [[ -n "${a8}" ]]; do [[ ${a30} == *${a8:0:1}* ]] || break;a8="${a8:1}";done;echo "${a8}";};string::trim-right() { local a8="${1:-'-'}";local a30="${2:-" "$'\n'$'\t'}";[[ ${a8} != '-' ]] || a8="$(cat)";while [[ -n "${a8}" ]]; do [[ ${a30} == *${a8: -1}* ]] || break;a8="${a8:0: -1}";done;echo "${a8}";};string::trim() { local a8="${1:-'-'}";local a30="${2:-" "$'\n'$'\t'}";[[ ${a8} != '-' ]] || a8="$(cat)" ;echo "${a8}" | string::trim-left - "${a30}" | string::trim-right - "${a30}";};to::string() { local a32="${1}";echo "${a32}";};to::boolean() { local a32="${1}";case "${a32}" in
""|"false"|"0") a32="0" ;;
*) a32="1" ;;
esac;echo "${a32}";};to::int() { local a32="${1}";[[ ${a32} =~ ^-?[0-9]+$ ]] || return 1;echo "${a32}";};to::float() { local a32="${1}";[[ ${a32} =~ ^-?[0-9]+(\.[0-9]+)?$ ]] || return 1;echo "${a32}";};to::stdin() { local a32="${1}";[[ ${a32} != "-" ]] || a32="$(cat)";echo "${a32}";};to::file() { local a32="${1}";[[ -f "${a32}" ]] || return 1;echo "${a32}";};[[ "${BASH_SOURCE[0]}" != "${0}" ]] || argsh::shebang "${@}"