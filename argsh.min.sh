#!/usr/bin/env bash
# shellcheck disable=SC2178 disable=SC2120 disable=SC1090
: "${ARGSH_FIELD_WIDTH:=24}";: "${ARGSH_PATH_IMPORT:=${BASH_SOURCE[0]%/*}}";:usage() { local a26="${1}"; shift;declare -p usage &>/dev/null || local -a usage=();declare -p args &>/dev/null || local -a args=();[[ $(( ${#usage[@]} % 2 )) -eq 0 ]] || :args::_error "usage must be an associative array";if [[ -z ${1:-} || ${1} == "-h" || ${1} == "--help" ]]; then :usage::text "${a26}";exit 0;fi;local -A a19=();local -a a46=("${@}");local a44 a23="";while (( ${#a46[@]} )); do if [[ ${a46[0]:0:1} != "-" ]]; then [[ -z "${a44:-}" ]] || break;a44="${a46[0]}";a46=("${a46[@]:1}");continue;fi;:args::parse-flag || break;a19["${a23}"]=1;done;:args::check-required-flags;local a33;for (( a56=0; a56 < ${#usage[@]}; a56+=2 )); do for a17 in $(echo "${usage[a56]/:*}" | tr '|' "\n"); do a17="${a17#\#}";[[ "${a44}" == "${a17}" ]] || continue;a33="${usage[a56]/*:-}";a33="${a33#\#}";[[ "${a33}" == "${usage[a56]}" ]] || break 2;a33="${a33/|*}";break 2;done;done;[[ -n "${a33:-}" ]] || :args::error_usage "Invalid command: ${a44}";usage=("${a33}" "${a46[@]}");};:usage::text() { local a26="${1:-}";local a43="${ARGSH_SOURCE:-"${0}"}";a43="${a43##*/}";echo "${a26}";echo;echo "Usage: ${a43} <command> [args]";[[ ${usage[0]:-} == '-' ]] || echo -e "\nAvailable Commands:";for (( a56=0; a56 < ${#usage[@]}; a56+=2 )); do [[ "${usage[a56]:0:1}" != "#" ]] || continue;[[ "${usage[a56]}" != "-" ]] || { echo;echo "${usage[a56+1]}";continue;};printf "  %-${ARGSH_FIELD_WIDTH}s %s\n" "${usage[a56]/[:|]*}" "${usage[a56+1]}";done;:args::text_flags;echo;echo "Use \"${a43} [command] --help\" for more information about a command.";};:args() { local a26="${1}"; shift;declare -p args &>/dev/null || local -a args=();[[ $(( ${#args[@]} % 2 )) -eq 0 ]] || :args::_error "args must be an associative array";if [[ ${1:-} == "-h" || ${1:-} == "--help" ]]; then :args::text;exit 0;fi;local a23="" a56 a0=1;local -A a19=();local -a a46=("${@}");while (( ${#a46[@]} )); do if [[ ${a46[0]:0:1} != "-" ]]; then a56="$(:args::field-positional "${a0}")" || :args::error_usage "too many arguments: ${a46[0]}";a23="${args[a56]}";local -n a45="${a23/:*}";a45="$(:args::field-value "${a46[0]}")" || exit "${?}";a46=("${a46[@]:1}");(( ++a0 ));continue;fi;:args::parse-flag || :args::error_usage "unknown a37: ${a46[0]}";a19["${a23}"]=1;done;if a56="$(:args::field-positional "${a0}")"; then a23="$(args::field_name "${args[a56]}")";is::uninitialized "${a23}" || is::array "${a23}" || :args::error_usage "missing required argument: ${a23}";fi;:args::check-required-flags;[[ ${#a46[@]} -eq 0 ]] || :args::error_usage "too many arguments: ${a46[*]}";};:args::text() { declare -p args &>/dev/null || return 0;local -a a1=() a15=();:args::positional;local a43="${0##*/}";echo "${a26}";echo;echo "Usage:";echo "  ${a43} ${FUNCNAME[2]/::*} ${a15[*]}";(( ${#a1[@]} == 0 )) || { echo;echo "Arguments:";for a56 in "${a1[@]}"; do [[ ${args[a56]} != "-" ]] || continue;a41="$(printf "   %-${ARGSH_FIELD_WIDTH}s%s" " " "${args[a56+1]}" | fmt::tty;)";printf "   %-${ARGSH_FIELD_WIDTH}s%s\n" "$(:args::fieldf "${args[a56]}")" "$(string::trim-left "${a41}")";done;};:args::text_flags;echo;};:args::text_flags() { local -a args=("${args[@]}");local -a a16=();array::contains 'help|h:+' "${args[@]}" || args+=('help|h:+' "Show this help message");:args::flags;(( ${#a16[@]} )) || return 0;[[ "${args[${a16[0]}]}" == "-" ]] || echo -e "\nOptions:";for a56 in "${a16[@]}"; do [[ "${args[a56]:0:1}" != "#" ]] || continue;[[ "${args[a56]}" != "-" ]] || { echo;echo "${args[a56+1]}";continue;};:args::fieldf "${args[a56]}";{ echo -n "           ";echo -e "${args[a56+1]}\n";} | fmt::tty;done;};:args::flags() { declare -p args &>/dev/null || local -a args;declare -p a16 &>/dev/null || local -a a16;for (( a56=0; a56 < "${#args[@]}"; a56+=2 )); do if [[ ${args[a56]} == *"|"* || ${args[a56]} == '-' ]]; then a16+=("${a56}");fi;done;};:args::positional() { declare -p args &>/dev/null || local -a args;declare -p a1 &>/dev/null || local -a a1;declare -p a15 &>/dev/null || local -a a15;local a45;for (( a56=0; a56 < "${#args[@]}"; a56+=2 )); do [[ ${args[a56]} != *"|"* && ${args[a56]} != '-' ]] || continue;a45="$(args::field_name "${args[a56]}")";a1+=("${a56}");if is::array "${a45}"; then a15+=("...${a45}");continue;fi;if is::uninitialized "${a45}"; then a15+=("[${a45}]");continue;fi;a15+=("<${a45}>");done;};:args::parse-flag() { declare -p a46 a23 &>/dev/null || return 1;local a37="${a46[0]/=*}";if [[ ${a37:0:2} == "--" ]]; then a23="$(:args::field-lookup "${a37:2}")" || return "${?}";elif [[ ${a37:0:1} == "-" ]]; then a37="${a37:0:2}";a23="$(:args::field-lookup "${a37:1}")" || return "${?}";fi;:args::field-set-flag "${a23}";};:args::check-required-flags() { declare -p a19 args &>/dev/null || return 1;for (( a56=0; a56 < ${#args[@]}; a56+=2 )); do [[ ${args[a56]: -1} == "!" ]] || continue;if [[ -z ${a19[${args[a56]}]:-} ]]; then :args::error_usage "missing required a37: ${args[a56]/|*}";fi;done;};:args::field-set-flag() { local a23="${1}";declare -p a46 a37 &>/dev/null || return 1;local -a a18;:args::field-attrs "${a23}";local -n a45="${a18[0]}";local a4 a3;if (( a18[2] )); then a4=1;if [[ ${a37:0:2} == "--" ]]; then a46=("${a46[@]:1}");else a46[0]="-${a46[0]:2}";[[ ${a46[0]} != "-" ]] || a46=("${a46[@]:1}");fi;fi;[[ -n ${a4:-} ]] || { a3="${a46[0]/${a37}}";if [[ ${a3} == "" ]]; then (( ${#a46[@]} )) || :args::error "missing value for a37: ${a18[0]}";a4="${a46[1]}";a46=("${a46[@]:1}");else [[ "${a3:0:1}" != "=" ]] || a3="${a3:1}";a4="${a3}";fi;a4="$(:args::field-value "${a4}")" || exit "${?}";a46=("${a46[@]:1}");};if (( a18[5] )); then a45+=("${a4}");else a45="${a4}";fi;};:args::field-value() { local a28="${1}";declare -p a23 &>/dev/null || return 1;declare -p a18 &>/dev/null || { local -a a18;:args::field-attrs "${a23}";};declare -f "to::${a18[3]}" &>/dev/null || :args::_error "unknown type: ${a18[3]}";"to::${a18[3]}" "${a28}" "${a18[0]}" || :args::error_usage "invalid type (${a18[3]}): ${a28}";};:args::field-lookup() { local a23="${1}";declare -p args &>/dev/null || return 1;for (( a56=0; a56 < ${#args[@]}; a56+=2 )); do if [[ ${args[a56]} =~ (^${a23}\||\|${a23}:|\|${a23}$) ]]; then echo "${args[a56]}";return 0;fi;done;return 1;};:args::field-positional() { local a5="${1:-1}";declare -p args &>/dev/null || return 1;for (( a56=0; a56 < ${#args[@]}; a56+=2 )); do if [[ ${args[a56]} != *"|"* && ${args[a56]} != '-' ]]; then if is::array "$(args::field_name "${args[a56]}")" || (( --a5 == 0 )); then echo "${a56}";return 0;fi;fi;done;return 1;};args::field_name() { local a23="${1}";a23="${a23/[|:]*}";a23="${a23#\#}";echo "${a23}";};:args::field-attrs() { local a23="${1}";declare -p a18 &>/dev/null || local -a a18;a18=("" "" 0 "" 0 0 0 0 );local a31="+~!";local a36="${a23#*[:]}";[ "${a36}" != "${a23}" ] || a36="";a18[0]="$(args::field_name "${a23}")";[[ ${a18[0]:0:1} != "#" ]] || { a18[7]=1;};local -n a45="${a18[0]}";local -a a16;mapfile -t a16 < <(echo "${a23/[:]*}" | tr '|' '\n');[[ ${#a16[@]} -eq 1 ]] || { a18[0]="${a16[0]}";a18[1]="${a16[1]}";};if is::array "${a18[0]}"; then a18[5]=1;! is::uninitialized "${a18[0]}" || a45=();! (( ${#a45[@]} )) || a18[4]=1;elif is::uninitialized "${a18[0]}"; then a18[4]=1;fi;while (( ${#a36} > 0 )); do if [[ ${a36:0:1} == "+" ]]; then [[ -z ${a18[3]} ]] || :args::_error "cannot have multiple types: ${a18[3]} and boolean";a18[2]=1;a36="${a36:1}";continue;fi;if [[ ${a36:0:1} == "~" ]]; then ! (( a18[2] )) || :args::_error "already flagged as boolean";a36="${a36:1}";a18[3]="${a36/[$a31]*}";a36="${a36:${#a18[3]}}";continue;fi;if [[ ${a36:0:1} == "!" ]]; then ! (( a18[4] )) || :args::_error "cannot be required with default value";! (( a18[6] )) || :args::_error "field already flagged as required";a18[6]=1;a36="${a36:1}";continue;fi;echo ":args error: unknown modifier: ${a36:0:1}" >&2;exit 2;done;if [[ -z ${a18[3]} && ${a18[2]} -eq 0 ]]; then a18[3]="string";fi;};:args::fieldf() { local a23="${1}";declare -p a18 &>/dev/null || { local -a a18;:args::field-attrs "${a23}";};[[ ${a23} == *"|"* ]] || { echo "${a18[0]} ${a18[3]}";return 0;};local -n a45="${a18[0]}";a11="   ";! (( a18[6] )) || a11=" ! ";if [[ -n ${a18[1]} ]]; then a11+="-${a18[1]}, --${a18[0]}";else a11+="    --${a18[0]}";fi;a11+=" ";! (( a18[5] )) || a11+="...";a11+="${a18[3]}";! (( a18[4] )) || a11+=" (default: ${a45[*]})";echo "${a11}";};args::run() { local a52="${1}"; shift;for (( a56=0; a56<${#}; a56++ )); do local a51="${1}"; shift;local a33="${1}"; shift;if ! (( a52 )) || (( a51 )); then "${a33}";fi;done;};array::contains() { local -r a13="${1}"; shift;for a6 in "${@}"; do [[ "${a6}" != "${a13}" ]] || return 0;done;return 1;};array::join() { local -r a2="${1}"; shift;local a14;printf -v a14 "${a2}%s" "${@}";echo "${a14:${#a2}}";};array::nth() { local -n a53="${1}";local -r a49="${2}";shift 2;for (( a56=1; a56<=${#}; a56++ )); do (( a56 % a49 )) || a53+=("${!a56}");done;};binary::exists() { local a12="${1}";command -v "${a12}" &> /dev/null || { echo "${a12} is required to run this script" >&2;return 1;};};binary::github() { local a38="${1}";local -r a12="$(basename "${a38}")";local a39="${2}";local a35="${3}";local a55="${4:-}";curl -Lso /dev/stdout "https://github.com/${a39}/releases/download/${a35}" | { if [[ -n "${a55}" ]]; then tar -xz -C "$(dirname "${a38}")" "${a55}";else tee "${a38}" &> /dev/null;fi;chmod +x "${a38}";};};binary::arch() { local a21="${1}";local -r a32="$(uname -m)";case "${a32}" in
x86_64|amd64) if (( a21 )); then echo "64-bit"; else echo "amd64"; fi ;;
armv7l) echo "arm" ;;
aarch64) echo "arm64" ;;
*) echo "${a32}" ;;
esac;};binary::jq() { binary::exists "jq" 2>/dev/null || { local -r a10="$(github::latest "stedolan/jq")" system="$(uname -s)";binary::github "${PATH_BIN?}/jq" "stedolan/jq" "${a10}/jq-${system,,}-$(binary::arch)";};};binary::vale() { binary::exists "vale" 2>/dev/null || { local -r a10="$(github::latest "errata-ai/vale")" system="$(uname -s)";binary::github "${PATH_BIN?}/vale" "errata-ai/vale" "${a10}/vale_${a10:1}_$(uname -s)_$(binary::arch 1).tar.gz" "vale";};};docker::user() { local a48="${1:-"$(id -u)"}";local a50="${2:-"$(id -g)"}";local a40="${3:-"$(whoami)"}";local a42="${4:-"/workspace"}";local a25="${5:-"/bin/sh"}";echo "${a40}:x:${a48}:${a50}::${a42}:${a25}" > /tmp/docker_passwd;echo "${a40}:x:${a50}:" > /tmp/docker_group;echo -v "${PATH_BASE:-.}:${a42}";echo -v /tmp/docker_passwd:/etc/passwd -v /tmp/docker_group:/etc/group;echo -u "${a48}:${a50}";echo -w "${a42}";};error::stacktrace() { local -r a34="${1:-${?}}";if (( a34 )); then echo -e "\n\033[38;5;196m■■ Stacktrace(${a34}): \e[1m${BASH_COMMAND}\e[22m";for a56 in $(seq 1 $((${#FUNCNAME[@]} - 2))); do echo -e "${a56}. ${BASH_SOURCE[a56]}:${BASH_LINENO[a56-1]} ➜ ${FUNCNAME[a56]}()";done;echo -e "\033[0m";return "${a34}";fi;};:args::_error() { declare -p a23 &>/dev/null || local a23="???";echo ":args error [${a23}] ➜ ${1}" >&2;exit 2;};:args::error() { echo -e "[ ${a23/:*} ] invalid argument\n➜ ${1}\n" >&2;exit 2;};:args::error_usage() { declare -p a23 &>/dev/null || local a23="???";echo -e "[ ${a23/:*} ] invalid usage\n➜ ${1}\n" >&2;echo -e "Use \"${0##*/} -h\" for more information" >&2;exit 2;};fmt::tty() { local a54="${1:-"$(cat)"}";command -v fmt &>/dev/null || { echo "${a54}";return 0;};local a30;a30="$(tput cols)";echo "${a54}" | fmt -w "${a30}";};github::latest() { local a39="${1}";curl -fsSLI -o /dev/null -w "%{url_effective}" "https://github.com/${a39}/releases/latest" | rev | cut -d'/' -f1 | rev;};is::tty() { [[ -t 1 ]];};is::array() { declare -p "${1}" &>/dev/null && [[ $(declare -p "${1}") == "declare -a"* ]];};is::uninitialized() { local a47="${1}";if is::array "${a47}"; then [[ $(declare -p "${a47}") == "declare -a ${a47}" ]];else [[ ${!a47+x} ]];fi;};is::set() { ! is::uninitialized "${1}";};bash::version() { local a22="${1:-4}";local a27="${2:-3}";local a29="${3:-0}";local -a a7;read -ra a7 <<< "$(echo "${BASH_VERSION}" | tr '.' ' ')";if [[ "${a7[0]}" -lt "${a22}" ]]; then return 1;elif [[ "${a7[0]}" -gt "${a22}" ]]; then return 0;fi;if [[ "${a7[1]}" -lt "${a27}" ]]; then return 1;elif [[ "${a7[1]}" -gt "${a27}" ]]; then return 0;fi;if [[ "${a7[2]}" -lt "${a29}" ]]; then return 1;fi;return 0;};argsh::shebang() { local -r a35="${*: -1}";[[ -e "${a35}" && "${BASH_SOURCE[-1]}" != "${a35}" ]] || { echo "This is intended to be used in a shebang";echo "#!/usr/bin/env argsh";return 1;} >&2;bash::version 4 3 0 || { echo "This script requires bash 4.3.0 or later";return 1;} >&2;ARGSH_SOURCE="${a35}";export ARGSH_SOURCE;. "${a35}";};string::drop-index() { local a8="${1}";local a20="${2}";local a9="${3:-1}";echo "${a8:0:a20}${a8:a20+a9}";};string::random() { local a9="${1:-42}";local a24="${2:-"a-zA-Z0-9"}";local a54;until [[ "${a54:-}" =~ ^[:alpha:] ]]; do a54=$(tr -dc "${a24}" < /dev/urandom | fold -w "${a9}" | head -n 1 || :);done;echo "${a54}";};string::trim-left() { local a8="${1:-'-'}";local a24="${2:-" "$'\n'$'\t'}";[[ ${a8} != '-' ]] || a8="$(cat)" ;while [[ -n "${a8}" ]]; do [[ ${a24} == *${a8:0:1}* ]] || break;a8="${a8:1}";done;echo "${a8}";};string::trim-right() { local a8="${1:-'-'}";local a24="${2:-" "$'\n'$'\t'}";[[ ${a8} != '-' ]] || a8="$(cat)";while [[ -n "${a8}" ]]; do [[ ${a24} == *${a8: -1}* ]] || break;a8="${a8:0: -1}";done;echo "${a8}";};string::trim() { local a8="${1:-'-'}";local a24="${2:-" \n\t"}";[[ ${a8} != '-' ]] || a8="$(cat)" ;echo "${a8}" | string::trim-left - "${a24}" | string::trim-right - "${a24}";};to::string() { local a28="${1}";echo "${a28}";};to::boolean() { local a28="${1}";case "${a28}" in
""|"false"|"0") a28="0" ;;
*) a28="1" ;;
esac;echo "${a28}";};to::int() { local a28="${1}";[[ ${a28} =~ ^-?[0-9]+$ ]] || return 1;echo "${a28}";};to::float() { local a28="${1}";[[ ${a28} =~ ^-?[0-9]+(\.[0-9]+)?$ ]] || return 1;echo "${a28}";};to::stdin() { local a28="${1}";[[ ${a28} != "-" ]] || a28="$(cat)";echo "${a28}";}; [[ "${BASH_SOURCE[0]}" != "${0}" ]] || argsh::shebang "${@}"