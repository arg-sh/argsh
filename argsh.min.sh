#!/usr/bin/env bash
# shellcheck disable=SC2178 disable=SC2120 disable=SC1090 disable=SC2046 disable=SC2155
set -euo pipefail; ARGSH_COMMIT_SHA="f8b95ed335b3efdaf3fa9a2adda1239a31b3f992"; ARGSH_VERSION="v0.0.3-6-gf8b95ed-dirty"
: "${ARGSH_VERSION:=unknown}";: "${ARGSH_COMMIT_SHA:=unknown}";: "${ARGSH_FIELD_WIDTH:=24}";COMMANDNAME=("$(s="${ARGSH_SOURCE:-"${0}"}"; echo "${s##*/}")");:usage() { local a21="${1}"; shift;declare -p usage &>/dev/null || local -a usage=();declare -p args &>/dev/null || local -a args=();[[ $(( ${#usage[@]} % 2 )) -eq 0 ]] || :args::_error "usage must be an associative array";[[ $(( ${#usage[@]} % 2 )) -eq 0 ]] || :args::_error "usage must be an associative array";if [[ -z ${1:-} || ${1} == "-h" || ${1} == "--help" ]]; then :usage::text "${a21}";exit 0;fi;if ! (( ${#COMMANDNAME[@]} )) && [[ ${1:-} == "--argsh" ]]; then echo "https://arg.sh ${ARGSH_COMMIT_SHA:-} ${ARGSH_VERSION:-}";exit 0;fi;local -A a18=();local -a a58=("${@}");local a48 a20="";while (( ${#a58[@]} )); do if [[ ${a58[0]:0:1} != "-" ]]; then [[ -z "${a48:-}" ]] || break;a48="${a58[0]}";a58=("${a58[@]:1}");continue;fi;:args::parse_flag || break;a18["${a20}"]=1;done;:args::check_required_flags;local a42;for (( a62=0; a62 < ${#usage[@]}; a62+=2 )); do for a28 in $(echo "${usage[a62]/:*}" | tr '|' "\n"); do a28="${a28#\#}";[[ "${a48}" == "${a28}" ]] || continue;a20="${usage[a62]#\#}";a42="${usage[a62]/*:-}";a42="${a42#\#}";[[ "${a42}" == "${usage[a62]}" ]] || break 2;a42="${a42/|*}";break 2;done;done;[[ -n "${a42:-}" ]] || :args::error_usage "Invalid command: ${a48}";COMMANDNAME+=("${a20/[|:]*}");usage=("${a42}" "${a58[@]}");};:usage::text() { local a21="${1:-}";string::indent "${a21}";echo;echo "Usage: ${COMMANDNAME[*]} <command> [args]";[[ ${usage[0]:-} == '-' ]] || echo -e "\nAvailable Commands:";for (( a62=0; a62 < ${#usage[@]}; a62+=2 )); do [[ "${usage[a62]:0:1}" != "#" ]] || continue;[[ "${usage[a62]}" != "-" ]] || { echo;echo "${usage[a62+1]}";continue;};printf "  %-${ARGSH_FIELD_WIDTH}s %s\n" "${usage[a62]/[:|]*}" "${usage[a62+1]}";done;:args::text_flags;echo;echo "Use \"${COMMANDNAME[*]} <command> --help\" for more information about a command.";};:args() { local a21="${1}"; shift;declare -p args &>/dev/null || local -a args=();[[ $(( ${#args[@]} % 2 )) -eq 0 ]] || :args::_error "args must be an associative array";if [[ ${1:-} == "-h" || ${1:-} == "--help" ]]; then :args::text;exit 0;fi;local a20="" a62 a0=1;local -A a18=();local -a a58=("${@}");while (( ${#a58[@]} )); do if [[ ${a58[0]:0:1} != "-" ]]; then a62="$(:args::field_positional "${a0}")" || :args::error_usage "too many arguments: ${a58[0]}";a20="${args[a62]}";local -n a59="$(args::field_name "${a20}")";a59="$(:args::field_value "${a58[0]}")" || exit "${?}";a58=("${a58[@]:1}");(( ++a0 ));continue;fi;:args::parse_flag || :args::error_usage "unknown a44: ${a58[0]}";a18["${a20}"]=1;done;if a62="$(:args::field_positional "${a0}")"; then a20="$(args::field_name "${args[a62]}")";if is::uninitialized "${a20}" && ! is::array "${a20}"; then :args::error_usage "missing required argument: ${a20}";fi;fi;:args::check_required_flags;[[ ${#a58[@]} -eq 0 ]] || :args::error_usage "too many arguments: ${a58[*]}";};:args::text() { declare -p args &>/dev/null || return 0;local -a a2=() a9=();:args::positional
string::indent "${a21}";echo;echo "Usage:";echo "  ${COMMANDNAME[*]} ${a9[*]}";(( ${#a2[@]} == 0 )) || { echo;echo "Arguments:";for a62 in "${a2[@]}"; do [[ ${args[a62]} != "-" ]] || continue;a33="$(printf "   %-${ARGSH_FIELD_WIDTH}s%s" " " "${args[a62+1]}" | fmt::tty;)";printf "   %-${ARGSH_FIELD_WIDTH}s%s\n" "$(:args::fieldf "${args[a62]}")" "$(string::trim-left "${a33}")";done;};:args::text_flags;echo;};:args::text_flags() { local -a args=("${args[@]}");local -a a24=();array::contains 'help|h:+' "${args[@]}" || args+=('help|h:+' "Show this help message");:args::flags;(( ${#a24[@]} )) || return 0;[[ "${args[${a24[0]}]}" == "-" ]] || echo -e "\nOptions:";for a62 in "${a24[@]}"; do [[ "${args[a62]:0:1}" != "#" ]] || continue;[[ "${args[a62]}" != "-" ]] || { echo;echo "${args[a62+1]}";continue;};:args::fieldf "${args[a62]}";{ echo -n "           ";echo -e "${args[a62+1]}\n";} | fmt::tty;done;};:args::flags() { declare -p args &>/dev/null || local -a args;declare -p a24 &>/dev/null || local -a a24;for (( a62=0; a62 < "${#args[@]}"; a62+=2 )); do if [[ ${args[a62]} == *"|"* || ${args[a62]} == '-' ]]; then a24+=("${a62}");fi;done;};:args::positional() { declare -p args &>/dev/null || local -a args;declare -p a2 &>/dev/null || local -a a2;declare -p a9 &>/dev/null || local -a a9;local a59;for (( a62=0; a62 < "${#args[@]}"; a62+=2 )); do [[ ${args[a62]} != *"|"* && ${args[a62]} != '-' ]] || continue;a59="$(args::field_name "${args[a62]}")";a2+=("${a62}");if is::array "${a59}"; then a9+=("...${a59}");continue;fi;if ! is::uninitialized "${a59}"; then a9+=("[${a59}]");continue;fi;a9+=("<${a59}>");done;};:args::parse_flag() { declare -p a58 a20 &>/dev/null || return 1;local a44="${a58[0]/=*}";if [[ ${a44:0:2} == "--" ]]; then a20="$(:args::field_lookup "${a44:2}")" || return "${?}";elif [[ ${a44:0:1} == "-" ]]; then a44="${a44:0:2}";a20="$(:args::field_lookup "${a44:1}")" || return "${?}";fi;:args::field_set_flag "${a20}";};:args::check_required_flags() { declare -p a18 args &>/dev/null || return 1;local a20;local -a a23;for (( a62=0; a62 < ${#args[@]}; a62+=2 )); do a20="${args[a62]}";:args::field_attrs "${a20}";if (( a23[2] )) && ! (( a23[4] )); then local -n a59="${a23[0]}";a59=0;fi;if (( a23[6] )) && [[ -z ${a18[${args[a62]}]:-} ]]; then :args::error_usage "missing required a44: ${args[a62]/|*}";fi;done;};:args::field_set_flag() { local a20="${1}";declare -p a58 a44 &>/dev/null || return 1;local -a a23;:args::field_attrs "${a20}";local -n a59="${a23[0]}";local a5 a4;if (( a23[2] )); then a5=1;if [[ ${a44:0:2} == "--" ]]; then a58=("${a58[@]:1}");else a58[0]="-${a58[0]:2}";[[ ${a58[0]} != "-" ]] || a58=("${a58[@]:1}");fi;fi;[[ -n ${a5:-} ]] || { a4="${a58[0]/${a44}}";if [[ ${a4} == "" ]]; then (( ${#a58[@]} )) || :args::error "missing value for a44: ${a23[0]}";a5="${a58[1]}";a58=("${a58[@]:1}");else [[ "${a4:0:1}" != "=" ]] || a4="${a4:1}";a5="${a4}";fi;a5="$(:args::field_value "${a5}")" || exit "${?}";a58=("${a58[@]:1}");};if (( a23[5] )); then a59+=("${a5}");else a59="${a5}";fi;};:args::field_value() { local a31="${1}";declare -p a20 &>/dev/null || return 1;declare -p a23 &>/dev/null || { local -a a23;:args::field_attrs "${a20}";};declare -f "to::${a23[3]}" &>/dev/null || :args::_error "unknown type: ${a23[3]}";"to::${a23[3]}" "${a31}" "${a23[0]}" || :args::error_usage "invalid type (${a23[3]}): ${a31}";};:args::field_lookup() { local a20="${1}";declare -p args &>/dev/null || return 1;for (( a62=0; a62 < ${#args[@]}; a62+=2 )); do if [[ ${args[a62]} =~ (^${a20}\||\|${a20}:|\|${a20}$) ]]; then echo "${args[a62]}";return 0;fi;done;return 1;};:args::field_positional() { local a6="${1:-1}";declare -p args &>/dev/null || return 1;for (( a62=0; a62 < ${#args[@]}; a62+=2 )); do if [[ ${args[a62]} != *"|"* && ${args[a62]} != '-' ]]; then if is::array "$(args::field_name "${args[a62]}")" || (( --a6 == 0 )); then echo "${a62}";return 0;fi;fi;done;return 1;};args::field_name() { local a20="${1}";local a26="${2:-1}";a20="${a20/[|:]*}";a20="${a20#\#}";if (( a26 )); then a20="${a20//-/_}";fi;echo "${a20}";};:args::field_attrs() { local a20="${1}";declare -p a23 &>/dev/null || local -a a23;a23=("" "" 0 "" 0 0 0 0 "" );local a39="+~!";local a37="${a20#*[:]}";[ "${a37}" != "${a20}" ] || a37="";a23[0]="$(args::field_name "${a20}")";a23[8]="$(args::field_name "${a20}" 0)";[[ ${a23[0]:0:1} != "#" ]] || { a23[7]=1;};local -n a59="${a23[0]}";local -a a24;mapfile -t a24 < <(echo "${a20/[:]*}" | tr '|' '\n');[[ ${#a24[@]} -eq 1 ]] || { a23[1]="${a24[1]}";};if is::array "${a23[0]}"; then a23[5]=1;! is::uninitialized "${a23[0]}" || a59=();! (( ${#a59[@]} )) || a23[4]=1;elif ! is::uninitialized "${a23[0]}"; then a23[4]=1;fi;while (( ${#a37} > 0 )); do if [[ ${a37:0:1} == "+" ]]; then [[ -z ${a23[3]} ]] || :args::_error "cannot have multiple types: ${a23[3]} and boolean";a23[2]=1;a37="${a37:1}";continue;fi;if [[ ${a37:0:1} == "~" ]]; then ! (( a23[2] )) || :args::_error "already flagged as boolean";a37="${a37:1}";a23[3]="${a37/[$a39]*}";a37="${a37:${#a23[3]}}";continue;fi;if [[ ${a37:0:1} == "!" ]]; then ! (( a23[6] )) || :args::_error "field already flagged as required";a23[6]=1;a37="${a37:1}";continue;fi;echo ":args error: unknown modifier: ${a37:0:1}" >&2;exit 2;done;if [[ -z ${a23[3]} && ${a23[2]} -eq 0 ]]; then a23[3]="string";fi;};:args::fieldf() { local a20="${1}";declare -p a23 &>/dev/null || { local -a a23;:args::field_attrs "${a20}";};[[ ${a20} == *"|"* ]] || { echo "${a23[8]} ${a23[3]}";return 0;};local -n a59="${a23[0]}";a16="   ";! (( a23[6] )) || a16=" ! ";if [[ -n ${a23[1]} ]]; then a16+="-${a23[1]}, --${a23[8]}";else a16+="    --${a23[8]}";fi;a16+=" ";! (( a23[5] )) || a16+="...";a16+="${a23[3]}";if (( a23[4] )) && ! (( a23[2] )); then a16+=" (default: ${a59[*]})";fi;echo "${a16}";};args::run() { local a50="${1}"; shift;for (( a62=0; a62<${#}; a62++ )); do local a53="${1}"; shift;local a42="${1}"; shift;if ! (( a50 )) || (( a53 )); then "${a42}";fi;done;};array::contains() { local -r a13="${1}"; shift;for a7 in "${@}"; do [[ "${a7}" != "${a13}" ]] || return 0;done;return 1;};array::join() { local -r a3="${1}"; shift;local a10;printf -v a10 "${a3}%s" "${@}";echo "${a10:${#a3}}";};array::nth() { local -n a51="${1}";local -r a55="${2}";shift 2;for (( a62=1; a62<=${#}; a62++ )); do (( a62 % a55 )) || a51+=("${!a62}");done;};bash::version() { local a25="${1:-4}";local a22="${2:-3}";local a29="${3:-0}";if [[ "${BASH_VERSINFO[0]}" -lt "${a25}" ]]; then return 1;elif [[ "${BASH_VERSINFO[0]}" -gt "${a25}" ]]; then return 0;fi;if [[ "${BASH_VERSINFO[1]}" -lt "${a22}" ]]; then return 1;elif [[ "${BASH_VERSINFO[1]}" -gt "${a22}" ]]; then return 0;fi;if [[ "${BASH_VERSINFO[2]}" -lt "${a29}" ]]; then return 1;fi;return 0;};binary::exists() { local a15="${1}";command -v "${a15}" &> /dev/null || { echo "${a15} is required to run this script" >&2;return 1;};};binary::github() { local a45="${1}";local -r a15="$(basename "${a45}")";local a38="${2}";local a40="${3}";local a47="${4:-}";curl -Lso /dev/stdout "https://github.com/${a38}/releases/download/${a40}" | { if [[ -n "${a47}" ]]; then tar -xz -C "$(dirname "${a45}")" "${a47}";else tee "${a45}" &> /dev/null;fi;chmod +x "${a45}";};};binary::arch() { local a32="${1}";local -r a43="$(uname -m)";case "${a43}" in
x86_64|amd64) if (( a32 )); then echo "64-bit"; else echo "amd64"; fi ;;
armv7l) echo "arm" ;;
aarch64) echo "arm64" ;;
*) echo "${a43}" ;;
esac;};binary::jq() { binary::exists "jq" 2>/dev/null || { local -r a8="$(github::latest "stedolan/jq")" system="$(uname -s)";binary::github "${PATH_BIN?}/jq" "stedolan/jq" "${a8}/jq-${system,,}-$(binary::arch)";};};binary::vale() { binary::exists "vale" 2>/dev/null || { local -r a8="$(github::latest "errata-ai/vale")" system="$(uname -s)";binary::github "${PATH_BIN?}/vale" "errata-ai/vale" "${a8}/vale_${a8:1}_$(uname -s)_$(binary::arch 1).tar.gz" "vale";};};docker::user() { local a57="${1:-"$(id -u)"}";local a60="${2:-"$(id -g)"}";local a41="${3:-"$(whoami)"}";local a34="${4:-"/workspace"}";local a17="${5:-"/bin/sh"}";echo "${a41}:x:${a57}:${a60}::${a34}:${a17}" > /tmp/docker_passwd;echo "${a41}:x:${a60}:" > /tmp/docker_group;echo "-v /tmp/docker_passwd:/etc/passwd -v /tmp/docker_group:/etc/group";echo "-u ${a57}:${a60}";echo "-v ${PATH_BASE:-.}:${a34}";echo "-w ${a34}";};error::stacktrace() { local -r a46="${1:-${?}}";if (( a46 )); then echo -e "\n\033[38;5;196m■■ Stacktrace(${a46}): \e[1m${BASH_COMMAND}\e[22m";for a62 in $(seq 1 $((${#FUNCNAME[@]} - 2))); do echo -e "${a62}. ${BASH_SOURCE[a62]}:${BASH_LINENO[a62-1]} ➜ ${FUNCNAME[a62]}()";done;echo -e "\033[0m";return "${a46}";fi;};:args::_error() { declare -p a20 &>/dev/null || local a20="???";echo ":args error [${a20}] ➜ ${1}" >&2;exit 2;};:args::error() { declare -p a20 &>/dev/null || local a20="???";echo -e "[ ${a20/[:|]*} ] invalid argument\n➜ ${1}\n" >&2;exit 2;};:args::error_usage() { declare -p a20 &>/dev/null || local a20="???";echo -e "[ ${a20/[:|]*} ] invalid usage\n➜ ${1}\n" >&2;echo -e "Use \"${0##*/} -h\" for more information" >&2;exit 2;};fmt::tty() { local a61="${1:-"$(cat)"}";if ! command -v fmt &>/dev/null || [[ ! -t 1 ]]; then echo "${a61}";return 0;fi;local a35;a35="$(tput cols)";echo "${a61}" | fmt -w "${a35}";};github::latest() { local a38="${1}";curl -fsSLI -o /dev/null -w "%{url_effective}" "https://github.com/${a38}/releases/latest" | rev | cut -d'/' -f1 | rev;};declare -gA a1=();import() { local a49="${1}";(( ${a1["${a49}"]:-} )) || { a1["${a49}"]=1;if [[ ${a49:0:1} == "@" ]]; then a49="${PATH_BASE:?"PATH_BASE missing"}/${a49:1}";elif [[ ${a49:0:1} == "~" ]]; then local _s="${ARGSH_SOURCE:-${BASH_SOURCE[-1]}}";a49="${_s%/*}/${a49:1}";else a49="${BASH_SOURCE[0]%/*}/${a49}";fi;import::source "${a49}" || exit 1;};};import::source() { local a49="${1}";for a52 in "" ".sh" ".bash"; do if [[ -f "${a49}${a52}" ]]; then . "${a49}${a52}";return;fi;done;echo "Library not found ${a49}" >&2;return 1;};import::clear() { a1=();};is::tty() { [[ -t 1 ]];};is::array() { declare -p "${1}" &>/dev/null && [[ $(declare -p "${1}") == "declare -a"* ]];};is::uninitialized() { local a54="${1}";if is::array "${a54}"; then [[ $(declare -p "${a54}") == "declare -a ${a54}" ]];else [[ ! ${!a54+x} ]];fi;};is::set() { ! is::uninitialized "${1}";};argsh::shebang() { local -r a40="${1}";: "${ARGSH_SOURCE="${a40}"}";export ARGSH_SOURCE;[[ "${BASH_SOURCE[-1]}" != "${a40}" && -f "${a40}" ]] || { binary::exists docker || { echo "This script requires Docker to be installed";return 1;} >&2;local a56="";[[ ! -t 1 ]] || a56="-it";docker run --rm ${a56} $(docker::user) -e "BATS_LOAD" -e "ARGSH_SOURCE" -e "GIT_COMMIT_SHA=$(git rev-parse HEAD || :)" -e "GIT_VERSION=$(git describe --tags --dirty || :)" ghcr.io/arg-sh/argsh:latest "${@}" ;return 0;} >&2;bash::version 4 3 0 || { echo "This script requires bash 4.3.0 or later";return 1;} >&2;shift;. "${a40}";};string::drop-index() { local a11="${1}";local a30="${2}";local a12="${3:-1}";echo "${a11:0:a30}${a11:a30+a12}";};string::random() { local a12="${1:-42}";local a27="${2:-"a-zA-Z0-9"}";local a61;until [[ "${a61:-}" =~ ^[:alpha:] ]]; do a61=$(tr -dc "${a27}" < /dev/urandom | fold -w "${a12}" | head -n 1 || :);done;echo "${a61}";};string::indent() { local a11="${1:-'-'}";local a14="${2:-0}";local a36 a19;[[ ${a11} != '-' ]] || a11="$(cat)";mapfile -t a19 < <(echo "${a11}");for a36 in "${a19[@]}"; do a36="$(string::trim-left "${a36}")";(( a14 == 0 )) || printf "%${a14}s" " " ;echo "${a36}";done;};string::trim-left() { local a11="${1}";local a27="${2:-" "$'\n'$'\t'}";[[ -n ${a11:-} ]] || return 0;[[ ${a11} != '-' ]] || a11="$(cat)" ;while [[ -n "${a11}" ]]; do [[ ${a27} == *${a11:0:1}* ]] || break;a11="${a11:1}";done;echo "${a11}";};string::trim-right() { local a11="${1:-'-'}";local a27="${2:-" "$'\n'$'\t'}";[[ ${a11} != '-' ]] || a11="$(cat)";while [[ -n "${a11}" ]]; do [[ ${a27} == *${a11: -1}* ]] || break;a11="${a11:0: -1}";done;echo "${a11}";};string::trim() { local a11="${1:-'-'}";local a27="${2:-" "$'\n'$'\t'}";[[ ${a11} != '-' ]] || a11="$(cat)" ;echo "${a11}" | string::trim-left - "${a27}" | string::trim-right - "${a27}";};to::string() { local a31="${1}";echo "${a31}";};to::boolean() { local a31="${1}";case "${a31}" in
""|"false"|"0") a31="0" ;;
*) a31="1" ;;
esac;echo "${a31}";};to::int() { local a31="${1}";[[ ${a31} =~ ^-?[0-9]+$ ]] || return 1;echo "${a31}";};to::float() { local a31="${1}";[[ ${a31} =~ ^-?[0-9]+(\.[0-9]+)?$ ]] || return 1;echo "${a31}";};to::stdin() { local a31="${1}";[[ ${a31} != "-" ]] || a31="$(cat)";echo "${a31}";};to::file() { local a31="${1}";[[ -f "${a31}" ]] || return 1;echo "${a31}";};[[ "${BASH_SOURCE[0]}" != "${0}" ]] || argsh::shebang "${@}"