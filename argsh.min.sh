#!/usr/bin/env bash
# shellcheck disable=SC2178 disable=SC2120 disable=SC1090
: "${ARGSH_FIELD_WIDTH:=24}";: "${ARGSH_PATH_IMPORT:=${BASH_SOURCE[0]%/*}}";:usage() { local a28="${1}"; shift;declare -p usage &>/dev/null || local -a usage=();declare -p args &>/dev/null || local -a args=();[[ $(( ${#usage[@]} % 2 )) -eq 0 ]] || :args::_error "usage must be an associative array";if [[ -z ${1:-} || ${1} == "-h" || ${1} == "--help" ]]; then :usage::text "${a28}";exit 0;fi;local -A a20=();local -a a46=("${@}");local a55 a23;while (( ${#a46[@]} )); do if [[ ${a46[0]:0:1} != "-" ]]; then [[ -z "${a55:-}" ]] || break;a55="${a46[0]}";a46=("${a46[@]:1}");continue;fi;:args::parse-flag || break;a20["${a23}"]=1;done;:args::check-required-flags;local a41;for (( a56=0; a56 < ${#usage[@]}; a56+=2 )); do for a22 in $(echo "${usage[a56]/:*}" | tr '|' "\n"); do a22="${a22#\#}";[[ "${a55}" == "${a22}" ]] || continue;a41="${usage[a56]/*:-}";a41="${a41#\#}";[[ "${a41}" == "${usage[a56]}" ]] || break 2;a41="${a41/|*}";break 2;done;done;[[ -n "${a41:-}" ]] || :args::error_usage "Invalid command: ${a55}";usage=("${a41}" "${a46[@]}");};:usage::text() { local a28="${1:-}";local a33="${ARGSH_SOURCE:-"${0}"}";a33="${a33##*/}";echo "${a28}";echo;echo "Usage: ${a33} <command> [args]";[[ ${usage[0]:-} == '-' ]] || echo -e "\nAvailable Commands:";for (( a56=0; a56 < ${#usage[@]}; a56+=2 )); do [[ "${usage[a56]:0:1}" != "#" ]] || continue;[[ "${usage[a56]}" != "-" ]] || { echo;echo "${usage[a56+1]}";continue;};printf "  %-${ARGSH_FIELD_WIDTH}s %s\n" "${usage[a56]/[:|]*}" "${usage[a56+1]}";done;:args::text_flags;echo;echo "Use \"${a33} [command] --help\" for more information about a command.";};:args() { local a28="${1}"; shift;declare -p args &>/dev/null || local -a args=();[[ $(( ${#args[@]} % 2 )) -eq 0 ]] || :args::_error "args must be an associative array";if [[ ${1:-} == "-h" || ${1:-} == "--help" ]]; then :args::text;exit 0;fi;local a23 a56 a0=1;local -A a20=();local -a a46=("${@}");while (( ${#a46[@]} )); do if [[ ${a46[0]:0:1} != "-" ]]; then a56="$(:args::field-positional "${a0}")" || :args::error_usage "too many arguments: ${a46[0]}";a23="${args[a56]}";local -n a52="${a23/:*}";a52="$(:args::field-value "${a46[0]}")" || exit "${?}";a46=("${a46[@]:1}");(( ++a0 ));continue;fi;:args::parse-flag || :args::error_usage "unknown a38: ${a46[0]}";a20["${a23}"]=1;done;if a56="$(:args::field-positional "${a0}")"; then a23="${args[a56]}";is::uninitialized "${a23/:*}" || :args::error_usage "missing required argument: ${a23/:*}";fi;:args::check-required-flags;[[ ${#a46[@]} -eq 0 ]] || :args::error_usage "too many arguments: ${a46[*]}";};:args::text() { declare -p args &>/dev/null || return 0;local -a a1=() a11=();:args::positional;local a33="${0##*/}";echo "${a28}";echo;echo "Usage:";echo "  ${a33} ${FUNCNAME[2]/::*} ${a11[*]}";(( ${#a1[@]} == 0 )) || { echo;echo "Arguments:";for a56 in "${a1[@]}"; do [[ ${args[a56]} != "-" ]] || continue;a36="$(printf "   %-${ARGSH_FIELD_WIDTH}s%s" " " "${args[a56+1]}" | fmt::tty;)";printf "   %-${ARGSH_FIELD_WIDTH}s%s\n" "$(:args::fieldf "${args[a56]}")" "$(string::trim-left "${a36}")";done;};:args::text_flags;echo;};:args::text_flags() { local -a args=("${args[@]}");local -a a26=()
array::contains 'help|h:+' "${args[@]}" || args+=('help|h:+' "Show this help message");:args::flags;(( ${#a26[@]} )) || return 0;[[ "${args[${a26[0]}]}" == "-" ]] || echo -e "\nOptions:";for a56 in "${a26[@]}"; do [[ "${args[a56]:0:1}" != "#" ]] || continue;[[ "${args[a56]}" != "-" ]] || { echo;echo "${args[a56+1]}";continue;};:args::fieldf "${args[a56]}";{ echo -n "           ";echo -e "${args[a56+1]}\n";} | fmt::tty;done;};:args::flags() { declare -p args &>/dev/null || local -a args;declare -p a26 &>/dev/null || local -a a26;for (( a56=0; a56 < "${#args[@]}"; a56+=2 )); do if [[ ${args[a56]} == *"|"* || ${args[a56]} == '-' ]]; then a26+=("${a56}");fi;done;};:args::positional() { declare -p args &>/dev/null || local -a args;declare -p a1 &>/dev/null || local -a a1;declare -p a11 &>/dev/null || local -a a11;for (( a56=0; a56 < "${#args[@]}"; a56+=2 )); do [[ ${args[a56]} != *"|"* && ${args[a56]} != '-' ]] || continue;a1+=("${a56}");if is::uninitialized "${args[a56]/:*}"; then a11+=("[${args[a56]/:*}]");continue;fi;a11+=("<${args[a56]/:*}>");done;};:args::parse-flag() { declare -p a46 a23 &>/dev/null || return 1;local a38="${a46[0]/=*}";if [[ ${a38:0:2} == "--" ]]; then a23="$(:args::field-lookup "${a38:2}")" || return "${?}";elif [[ ${a38:0:1} == "-" ]]; then a38="${a38:0:2}";a23="$(:args::field-lookup "${a38:1}")" || return "${?}";fi;:args::field-set-flag "${a23}";};:args::check-required-flags() { declare -p a20 args &>/dev/null || return 1;for (( a56=0; a56 < ${#args[@]}; a56+=2 )); do [[ ${args[a56]: -1} == "!" ]] || continue;if [[ -z ${a20[${args[a56]}]:-} ]]; then :args::error_usage "missing required a38: ${args[a56]/|*}";fi;done;};:args::field-set-flag() { local a23="${1}";declare -p a46 a38 &>/dev/null || return 1;local -a a16;:args::field-attrs "${a23}";local -n a52="${a16[0]}";local a3 a4;if (( a16[2] )); then a3=1;if [[ ${a38:0:2} == "--" ]]; then a46=("${a46[@]:1}");else a46[0]="-${a46[0]:2}";[[ ${a46[0]} != "-" ]] || a46=("${a46[@]:1}");fi;fi;[[ -n ${a3:-} ]] || { a4="${a46[0]/${a38}}";if [[ ${a4} == "" ]]; then (( ${#a46[@]} )) || :args::error "missing value for a38: ${a16[0]}";a3="${a46[1]}";a46=("${a46[@]:1}");else [[ "${a4:0:1}" != "=" ]] || a4="${a4:1}";a3="${a4}";fi;a3="$(:args::field-value "${a3}")" || exit "${?}";a46=("${a46[@]:1}");};if (( a16[5] )); then a52+=("${a3}");else a52="${a3}";fi;};:args::field-value() { local a17="${1}";declare -p a23 &>/dev/null || return 1;declare -p a16 &>/dev/null || { local -a a16;:args::field-attrs "${a23}";};declare -f "to::${a16[3]}" &>/dev/null || :args::_error "unknown type: ${a16[3]}";"to::${a16[3]}" "${a17}" "${a16[0]}" || :args::error_usage "invalid type (${a16[3]}): ${a17}";};:args::field-lookup() { local a23="${1}";declare -p args &>/dev/null || return 1;for (( a56=0; a56 < ${#args[@]}; a56+=2 )); do if [[ ${args[a56]} =~ (^${a23}\||\|${a23}:|\|${a23}$) ]]; then echo "${args[a56]}";return 0;fi;done;return 1;};:args::field-positional() { local a5="${1:-1}";declare -p args &>/dev/null || return 1;for (( a56=0; a56 < ${#args[@]}; a56+=2 )); do if [[ ${args[a56]} != *"|"* && ${args[a56]} != '-' ]]; then (( --a5 == 0 )) || continue;echo "${a56}";return 0;fi;done;return 1;};:args::field-attrs() { local a23="${1}";declare -p a16 &>/dev/null || local -a a16;a16=("" "" 0 "" 0 0 0 0 );local a31="+~!";local a35="${a23#*[:]}";[ "${a35}" != "${a23}" ] || a35="";a16[0]="${a23/[|:]*}";[[ ${a16[0]:0:1} != "#" ]] || { a16[7]=1
a16[0]="${a16[0]:1}";};local -n a52="${a16[0]}";local -a a26;mapfile -t a26 < <(echo "${a23/[:]*}" | tr '|' '\n');[[ ${#a26[@]} -eq 1 ]] || { a16[0]="${a26[0]}";a16[1]="${a26[1]}";};if is::array "${a16[0]}"; then a16[5]=1;! is::uninitialized "${a16[0]}" || a52=();! (( ${#a52[@]} )) || a16[4]=1;elif is::uninitialized "${a16[0]}"; then a16[4]=1;fi;while (( ${#a35} > 0 )); do if [[ ${a35:0:1} == "+" ]]; then [[ -z ${a16[3]} ]] || :args::_error "cannot have multiple types: ${a16[3]} and boolean";a16[2]=1;a35="${a35:1}";continue;fi;if [[ ${a35:0:1} == "~" ]]; then ! (( a16[2] )) || :args::_error "already flagged as boolean";a35="${a35:1}";a16[3]="${a35/[$a31]*}";a35="${a35:${#a16[3]}}";continue;fi;if [[ ${a35:0:1} == "!" ]]; then ! (( a16[4] )) || :args::_error "cannot be required with default value";! (( a16[6] )) || :args::_error "field already flagged as required";a16[6]=1;a35="${a35:1}";continue;fi;echo ":args error: unknown modifier: ${a35:0:1}" >&2;exit 2;done;if [[ -z ${a16[3]} && ${a16[2]} -eq 0 ]]; then a16[3]="string";fi;};:args::fieldf() { local a23="${1}";declare -p a16 &>/dev/null || { local -a a16;:args::field-attrs "${a23}";};[[ ${a23} == *"|"* ]] || { echo "${a16[0]} ${a16[3]}";return 0;};local -n a52="${a16[0]}";a9="   ";! (( a16[6] )) || a9=" ! ";if [[ -n ${a16[1]} ]]; then a9+="-${a16[1]}, --${a16[0]}";else a9+="    --${a16[0]}";fi;a9+=" ";! (( a16[5] )) || a9+="...";a9+="${a16[3]}";! (( a16[4] )) || a9+=" (default: ${a52[*]})";echo "${a9}";};args::run() { local a48="${1}"; shift;for (( a56=0; a56<${#}; a56++ )); do local a44="${1}"; shift;local a41="${1}"; shift;if ! (( a48 )) || (( a44 )); then "${a41}";fi;done;};array::contains() { local -r a10="${1}"; shift;for a6 in "${@}"; do [[ "${a6}" != "${a10}" ]] || return 0;done;return 1;};array::join() { local -r a2="${1}"; shift;local a13;printf -v a13 "${a2}%s" "${@}";echo "${a13:${#a2}}";};array::nth() { local -n a47="${1}";local -r a51="${2}";shift 2;for (( a56=1; a56<=${#}; a56++ )); do (( a56 % a51 )) || a47+=("${!a56}");done;};binary::exists() { local a8="${1}";command -v "${a8}" &> /dev/null || { echo "${a8} is required to run this script" >&2;return 1;};};binary::github() { local a34="${1}";local -r a8="$(basename "${a34}")";local a37="${2}";local a43="${3}";local a54="${4:-}";curl -Lso /dev/stdout "https://github.com/${a37}/releases/download/${a43}" | { if [[ -n "${a54}" ]]; then tar -xz -C "$(dirname "${a34}")" "${a54}";else tee "${a34}" &> /dev/null;fi;chmod +x "${a34}";};};binary::arch() { local a21="${1}";local -r a42="$(uname -m)";case "${a42}" in
x86_64|amd64) if (( a21 )); then echo "64-bit"; else echo "amd64"; fi ;;
armv7l) echo "arm" ;;
aarch64) echo "arm64" ;;
*) echo "${a42}" ;;
esac;};binary::jq() { binary::exists "jq" 2>/dev/null || { local -r a15="$(github::latest "stedolan/jq")" system="$(uname -s)";binary::github "${PATH_BIN?}/jq" "stedolan/jq" "${a15}/jq-${system,,}-$(binary::arch)";};};binary::vale() { binary::exists "vale" 2>/dev/null || { local -r a15="$(github::latest "errata-ai/vale")" system="$(uname -s)";binary::github "${PATH_BIN?}/vale" "errata-ai/vale" "${a15}/vale_${a15:1}_$(uname -s)_$(binary::arch 1).tar.gz" "vale";};};docker::user() { local a50="${1:-"$(id -u)"}";local a53="${2:-"$(id -g)"}";local a40="${3:-"$(whoami)"}";local a32="${4:-"/workspace"}";local a25="${5:-"/bin/sh"}";echo "${a40}:x:${a50}:${a53}::${a32}:${a25}" > /tmp/docker_passwd;echo "${a40}:x:${a53}:" > /tmp/docker_group;echo -v "${PATH_BASE:-.}:${a32}";echo -v /tmp/docker_passwd:/etc/passwd -v /tmp/docker_group:/etc/group;echo -u "${a50}:${a53}";echo -w "${a32}";};error::stacktrace() { local -r a39="${1:-${?}}";if (( a39 )); then echo -e "\n\033[38;5;196m■■ Stacktrace(${a39}): \e[1m${BASH_COMMAND}\e[22m";for a56 in $(seq 1 $((${#FUNCNAME[@]} - 2))); do echo -e "${a56}. ${BASH_SOURCE[a56]}:${BASH_LINENO[a56-1]} ➜ ${FUNCNAME[a56]}()";done;echo -e "\033[0m";return "${a39}";fi;};:args::_error() { declare -p a23 &>/dev/null || local a23="???";echo ":args error [${a23}] ➜ ${1}" >&2;exit 2;};:args::error() { echo -e "[ ${a23/:*} ] invalid argument\n➜ ${1}\n" >&2;exit 2;};:args::error_usage() { declare -p a23 &>/dev/null || local a23="???";echo -e "[ ${a23/:*} ] invalid usage\n➜ ${1}\n" >&2;echo -e "Use \"${0##*/} -h\" for more information" >&2;exit 2;};fmt::tty() { local a49="${1:-"$(cat)"}";command -v fmt &>/dev/null || { echo "${a49}";return 0;};local a30;a30="$(tput cols)";echo "${a49}" | fmt -w "${a30}";};github::latest() { local a37="${1}";curl -fsSLI -o /dev/null -w "%{url_effective}" "https://github.com/${a37}/releases/latest" | rev | cut -d'/' -f1 | rev;};is::tty() { [[ -t 1 ]];};is::array() { declare -p "${1}" &>/dev/null && [[ $(declare -p "${1}") == "declare -a"* ]];};is::uninitialized() { local a45="${1}";if is::array "${a45}"; then [[ $(declare -p "${a45}") == "declare -a ${a45}" ]];else [[ ${!a45+x} ]];fi;};is::set() { ! is::uninitialized "${1}";};bash::version() { local a18="${1:-4}";local a24="${2:-3}";local a27="${3:-0}";local -a a7;read -ra a7 <<< "$(echo "${BASH_VERSION}" | tr '.' ' ')";if [[ "${a7[0]}" -lt "${a18}" ]]; then return 1;elif [[ "${a7[0]}" -gt "${a18}" ]]; then return 0;fi;if [[ "${a7[1]}" -lt "${a24}" ]]; then return 1;elif [[ "${a7[1]}" -gt "${a24}" ]]; then return 0;fi;if [[ "${a7[2]}" -lt "${a27}" ]]; then return 1;fi;return 0;};argsh::shebang() { local -r a43="${*: -1}";[[ -e "${a43}" && "${BASH_SOURCE[-1]}" != "${a43}" ]] || { echo "This is intended to be used in a shebang";echo "#!/usr/bin/env argsh";return 1;} >&2;bash::version 4 3 0 || { echo "This script requires bash 4.3.0 or later";return 1;} >&2;ARGSH_SOURCE="${a43}";export ARGSH_SOURCE;. "${a43}";};string::drop-index() { local a14="${1}";local a19="${2}";local a12="${3:-1}";echo "${a14:0:a19}${a14:a19+a12}";};string::random() { local a12="${1:-42}";local a29="${2:-"a-zA-Z0-9"}";local a49;until [[ "${a49:-}" =~ ^[:alpha:] ]]; do a49=$(tr -dc "${a29}" < /dev/urandom | fold -w "${a12}" | head -n 1 || :);done;echo "${a49}";};string::trim-left() { local a14="${1:-'-'}";local a29="${2:-" "$'\n'$'\t'}";[[ ${a14} != '-' ]] || a14="$(cat)" ;while [[ -n "${a14}" ]]; do [[ ${a29} == *${a14:0:1}* ]] || break;a14="${a14:1}";done;echo "${a14}";};string::trim-right() { local a14="${1:-'-'}";local a29="${2:-" "$'\n'$'\t'}";[[ ${a14} != '-' ]] || a14="$(cat)";while [[ -n "${a14}" ]]; do [[ ${a29} == *${a14: -1}* ]] || break;a14="${a14:0: -1}";done;echo "${a14}";};string::trim() { local a14="${1:-'-'}";local a29="${2:-" \n\t"}";[[ ${a14} != '-' ]] || a14="$(cat)" ;echo "${a14}" | string::trim-left - "${a29}" | string::trim-right - "${a29}";};to::string() { local a17="${1}";echo "${a17}";};to::boolean() { local a17="${1}";case "${a17}" in
""|"false"|"0") a17="0" ;;
*) a17="1" ;;
esac;echo "${a17}";};to::int() { local a17="${1}";[[ ${a17} =~ ^-?[0-9]+$ ]] || return 1;echo "${a17}";};to::float() { local a17="${1}";[[ ${a17} =~ ^-?[0-9]+(\.[0-9]+)?$ ]] || return 1;echo "${a17}";};to::stdin() { local a17="${1}";[[ ${a17} != "-" ]] || a17="$(cat)";echo "${a17}";}; [[ "${BASH_SOURCE[0]}" != "${0}" ]] || argsh::shebang "${@}"