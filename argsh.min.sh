#!/usr/bin/env bash
# shellcheck disable=SC2178 disable=SC2120 disable=SC1090 disable=SC2046 disable=SC2155
: "${ARGSH_FIELD_WIDTH:=24}";COMMANDNAMES=("$(s="${ARGSH_SOURCE:-"${0}"}"; echo "${s##*/}")");:usage() { local a25="${1}"; shift;declare -p usage &>/dev/null || local -a usage=();declare -p args &>/dev/null || local -a args=();[[ $(( ${#usage[@]} % 2 )) -eq 0 ]] || :args::_error "usage must be an associative array";[[ $(( ${#usage[@]} % 2 )) -eq 0 ]] || :args::_error "usage must be an associative array";if [[ -z ${1:-} || ${1} == "-h" || ${1} == "--help" ]]; then :usage::text "${a25}";exit 0;fi;local -A a27=();local -a a51=("${@}");local a55 a24="";while (( ${#a51[@]} )); do if [[ ${a51[0]:0:1} != "-" ]]; then [[ -z "${a55:-}" ]] || break;a55="${a51[0]}";a51=("${a51[@]:1}");continue;fi;:args::parse_flag || break;a27["${a24}"]=1;done;:args::check_required_flags;local a33;for (( a58=0; a58 < ${#usage[@]}; a58+=2 )); do for a20 in $(echo "${usage[a58]/:*}" | tr '|' "\n"); do a20="${a20#\#}";[[ "${a55}" == "${a20}" ]] || continue;a24="${usage[a58]#\#}";a33="${usage[a58]/*:-}";a33="${a33#\#}";[[ "${a33}" == "${usage[a58]}" ]] || break 2;a33="${a33/|*}";break 2;done;done;[[ -n "${a33:-}" ]] || :args::error_usage "Invalid command: ${a55}";COMMANDNAMES+=("${a24/[|:]*}");usage=("${a33}" "${a51[@]}");};:usage::text() { local a25="${1:-}";string::trim-left-lines "${a25}";echo;echo "Usage: ${COMMANDNAMES[*]} <command> [args]";[[ ${usage[0]:-} == '-' ]] || echo -e "\nAvailable Commands:";for (( a58=0; a58 < ${#usage[@]}; a58+=2 )); do [[ "${usage[a58]:0:1}" != "#" ]] || continue;[[ "${usage[a58]}" != "-" ]] || { echo;echo "${usage[a58+1]}";continue;};printf "  %-${ARGSH_FIELD_WIDTH}s %s\n" "${usage[a58]/[:|]*}" "${usage[a58+1]}";done;:args::text_flags;echo;echo "Use \"${COMMANDNAMES[*]} <command> --help\" for more information about a command.";};:args() { local a25="${1}"; shift;declare -p args &>/dev/null || local -a args=();[[ $(( ${#args[@]} % 2 )) -eq 0 ]] || :args::_error "args must be an associative array";if [[ ${1:-} == "-h" || ${1:-} == "--help" ]]; then :args::text;exit 0;fi;local a24="" a58 a0=1;local -A a27=();local -a a51=("${@}");while (( ${#a51[@]} )); do if [[ ${a51[0]:0:1} != "-" ]]; then a58="$(:args::field_positional "${a0}")" || :args::error_usage "too many arguments: ${a51[0]}";a24="${args[a58]}";local -n a50="$(args::field_name "${a24}")";a50="$(:args::field_value "${a51[0]}")" || exit "${?}";a51=("${a51[@]:1}");(( ++a0 ));continue;fi;:args::parse_flag || :args::error_usage "unknown a37: ${a51[0]}";a27["${a24}"]=1;done;if a58="$(:args::field_positional "${a0}")"; then a24="$(args::field_name "${args[a58]}")";if is::uninitialized "${a24}" && ! is::array "${a24}"; then :args::error_usage "missing required argument: ${a24}";fi;fi;:args::check_required_flags;[[ ${#a51[@]} -eq 0 ]] || :args::error_usage "too many arguments: ${a51[*]}";};:args::text() { declare -p args &>/dev/null || return 0;local -a a1=() a13=();:args::positional
string::trim-left-lines "${a25}";echo;echo "Usage:";echo "  ${COMMANDNAMES[*]} ${a13[*]}";(( ${#a1[@]} == 0 )) || { echo;echo "Arguments:";for a58 in "${a1[@]}"; do [[ ${args[a58]} != "-" ]] || continue;a40="$(printf "   %-${ARGSH_FIELD_WIDTH}s%s" " " "${args[a58+1]}" | fmt::tty;)";printf "   %-${ARGSH_FIELD_WIDTH}s%s\n" "$(:args::fieldf "${args[a58]}")" "$(string::trim-left "${a40}")";done;};:args::text_flags;echo;};:args::text_flags() { local -a args=("${args[@]}");local -a a21=();array::contains 'help|h:+' "${args[@]}" || args+=('help|h:+' "Show this help message");:args::flags;(( ${#a21[@]} )) || return 0;[[ "${args[${a21[0]}]}" == "-" ]] || echo -e "\nOptions:";for a58 in "${a21[@]}"; do [[ "${args[a58]:0:1}" != "#" ]] || continue;[[ "${args[a58]}" != "-" ]] || { echo;echo "${args[a58+1]}";continue;};:args::fieldf "${args[a58]}";{ echo -n "           ";echo -e "${args[a58+1]}\n";} | fmt::tty;done;};:args::flags() { declare -p args &>/dev/null || local -a args;declare -p a21 &>/dev/null || local -a a21;for (( a58=0; a58 < "${#args[@]}"; a58+=2 )); do if [[ ${args[a58]} == *"|"* || ${args[a58]} == '-' ]]; then a21+=("${a58}");fi;done;};:args::positional() { declare -p args &>/dev/null || local -a args;declare -p a1 &>/dev/null || local -a a1;declare -p a13 &>/dev/null || local -a a13;local a50;for (( a58=0; a58 < "${#args[@]}"; a58+=2 )); do [[ ${args[a58]} != *"|"* && ${args[a58]} != '-' ]] || continue;a50="$(args::field_name "${args[a58]}")";a1+=("${a58}");if is::array "${a50}"; then a13+=("...${a50}");continue;fi;if ! is::uninitialized "${a50}"; then a13+=("[${a50}]");continue;fi;a13+=("<${a50}>");done;};:args::parse_flag() { declare -p a51 a24 &>/dev/null || return 1;local a37="${a51[0]/=*}";if [[ ${a37:0:2} == "--" ]]; then a24="$(:args::field_lookup "${a37:2}")" || return "${?}";elif [[ ${a37:0:1} == "-" ]]; then a37="${a37:0:2}";a24="$(:args::field_lookup "${a37:1}")" || return "${?}";fi;:args::field_set_flag "${a24}";};:args::check_required_flags() { declare -p a27 args &>/dev/null || return 1;local a24;local -a a30;for (( a58=0; a58 < ${#args[@]}; a58+=2 )); do a24="${args[a58]}";:args::field_attrs "${a24}";if (( a30[2] )) && ! (( a30[4] )); then local -n a50="${a30[0]}";a50=0;fi;if (( a30[6] )) && [[ -z ${a27[${args[a58]}]:-} ]]; then :args::error_usage "missing required a37: ${args[a58]/|*}";fi;done;};:args::field_set_flag() { local a24="${1}";declare -p a51 a37 &>/dev/null || return 1;local -a a30;:args::field_attrs "${a24}";local -n a50="${a30[0]}";local a3 a2;if (( a30[2] )); then a3=1;if [[ ${a37:0:2} == "--" ]]; then a51=("${a51[@]:1}");else a51[0]="-${a51[0]:2}";[[ ${a51[0]} != "-" ]] || a51=("${a51[@]:1}");fi;fi;[[ -n ${a3:-} ]] || { a2="${a51[0]/${a37}}";if [[ ${a2} == "" ]]; then (( ${#a51[@]} )) || :args::error "missing value for a37: ${a30[0]}";a3="${a51[1]}";a51=("${a51[@]:1}");else [[ "${a2:0:1}" != "=" ]] || a2="${a2:1}";a3="${a2}";fi;a3="$(:args::field_value "${a3}")" || exit "${?}";a51=("${a51[@]:1}");};if (( a30[5] )); then a50+=("${a3}");else a50="${a3}";fi;};:args::field_value() { local a31="${1}";declare -p a24 &>/dev/null || return 1;declare -p a30 &>/dev/null || { local -a a30;:args::field_attrs "${a24}";};declare -f "to::${a30[3]}" &>/dev/null || :args::_error "unknown type: ${a30[3]}";"to::${a30[3]}" "${a31}" "${a30[0]}" || :args::error_usage "invalid type (${a30[3]}): ${a31}";};:args::field_lookup() { local a24="${1}";declare -p args &>/dev/null || return 1;for (( a58=0; a58 < ${#args[@]}; a58+=2 )); do if [[ ${args[a58]} =~ (^${a24}\||\|${a24}:|\|${a24}$) ]]; then echo "${args[a58]}";return 0;fi;done;return 1;};:args::field_positional() { local a5="${1:-1}";declare -p args &>/dev/null || return 1;for (( a58=0; a58 < ${#args[@]}; a58+=2 )); do if [[ ${args[a58]} != *"|"* && ${args[a58]} != '-' ]]; then if is::array "$(args::field_name "${args[a58]}")" || (( --a5 == 0 )); then echo "${a58}";return 0;fi;fi;done;return 1;};args::field_name() { local a24="${1}";local a29="${2:-1}";a24="${a24/[|:]*}";a24="${a24#\#}";if (( a29 )); then a24="${a24//-/_}";fi;echo "${a24}";};:args::field_attrs() { local a24="${1}";declare -p a30 &>/dev/null || local -a a30;a30=("" "" 0 "" 0 0 0 0 "" );local a42="+~!";local a39="${a24#*[:]}";[ "${a39}" != "${a24}" ] || a39="";a30[0]="$(args::field_name "${a24}")";a30[8]="$(args::field_name "${a24}" 0)";[[ ${a30[0]:0:1} != "#" ]] || { a30[7]=1;};local -n a50="${a30[0]}";local -a a21;mapfile -t a21 < <(echo "${a24/[:]*}" | tr '|' '\n');[[ ${#a21[@]} -eq 1 ]] || { a30[1]="${a21[1]}";};if is::array "${a30[0]}"; then a30[5]=1;! is::uninitialized "${a30[0]}" || a50=();! (( ${#a50[@]} )) || a30[4]=1;elif ! is::uninitialized "${a30[0]}"; then a30[4]=1;fi;while (( ${#a39} > 0 )); do if [[ ${a39:0:1} == "+" ]]; then [[ -z ${a30[3]} ]] || :args::_error "cannot have multiple types: ${a30[3]} and boolean";a30[2]=1;a39="${a39:1}";continue;fi;if [[ ${a39:0:1} == "~" ]]; then ! (( a30[2] )) || :args::_error "already flagged as boolean";a39="${a39:1}";a30[3]="${a39/[$a42]*}";a39="${a39:${#a30[3]}}";continue;fi;if [[ ${a39:0:1} == "!" ]]; then ! (( a30[6] )) || :args::_error "field already flagged as required";a30[6]=1;a39="${a39:1}";continue;fi;echo ":args error: unknown modifier: ${a39:0:1}" >&2;exit 2;done;if [[ -z ${a30[3]} && ${a30[2]} -eq 0 ]]; then a30[3]="string";fi;};:args::fieldf() { local a24="${1}";declare -p a30 &>/dev/null || { local -a a30;:args::field_attrs "${a24}";};[[ ${a24} == *"|"* ]] || { echo "${a30[8]} ${a30[3]}";return 0;};local -n a50="${a30[0]}";a14="   ";! (( a30[6] )) || a14=" ! ";if [[ -n ${a30[1]} ]]; then a14+="-${a30[1]}, --${a30[8]}";else a14+="    --${a30[8]}";fi;a14+=" ";! (( a30[5] )) || a14+="...";a14+="${a30[3]}";if (( a30[4] )) && ! (( a30[2] )); then a14+=" (default: ${a50[*]})";fi;echo "${a14}";};args::run() { local a47="${1}"; shift;for (( a58=0; a58<${#}; a58++ )); do local a53="${1}"; shift;local a33="${1}"; shift;if ! (( a47 )) || (( a53 )); then "${a33}";fi;done;};array::contains() { local -r a8="${1}"; shift;for a6 in "${@}"; do [[ "${a6}" != "${a8}" ]] || return 0;done;return 1;};array::join() { local -r a4="${1}"; shift;local a10;printf -v a10 "${a4}%s" "${@}";echo "${a10:${#a4}}";};array::nth() { local -n a49="${1}";local -r a52="${2}";shift 2;for (( a58=1; a58<=${#}; a58++ )); do (( a58 % a52 )) || a49+=("${!a58}");done;};bash::version() { local a28="${1:-4}";local a26="${2:-3}";local a19="${3:-0}";local -a a7;read -ra a7 <<< "$(echo "${BASH_VERSION}" | tr '.' ' ')";if [[ "${a7[0]}" -lt "${a28}" ]]; then return 1;elif [[ "${a7[0]}" -gt "${a28}" ]]; then return 0;fi;if [[ "${a7[1]}" -lt "${a26}" ]]; then return 1;elif [[ "${a7[1]}" -gt "${a26}" ]]; then return 0;fi;if [[ "${a7[2]}" -lt "${a19}" ]]; then return 1;fi;return 0;};binary::exists() { local a11="${1}";command -v "${a11}" &> /dev/null || { echo "${a11} is required to run this script" >&2;return 1;};};binary::github() { local a41="${1}";local -r a11="$(basename "${a41}")";local a36="${2}";local a38="${3}";local a54="${4:-}";curl -Lso /dev/stdout "https://github.com/${a36}/releases/download/${a38}" | { if [[ -n "${a54}" ]]; then tar -xz -C "$(dirname "${a41}")" "${a54}";else tee "${a41}" &> /dev/null;fi;chmod +x "${a41}";};};binary::arch() { local a23="${1}";local -r a32="$(uname -m)";case "${a32}" in
x86_64|amd64) if (( a23 )); then echo "64-bit"; else echo "amd64"; fi ;;
armv7l) echo "arm" ;;
aarch64) echo "arm64" ;;
*) echo "${a32}" ;;
esac;};binary::jq() { binary::exists "jq" 2>/dev/null || { local -r a12="$(github::latest "stedolan/jq")" system="$(uname -s)";binary::github "${PATH_BIN?}/jq" "stedolan/jq" "${a12}/jq-${system,,}-$(binary::arch)";};};binary::vale() { binary::exists "vale" 2>/dev/null || { local -r a12="$(github::latest "errata-ai/vale")" system="$(uname -s)";binary::github "${PATH_BIN?}/vale" "errata-ai/vale" "${a12}/vale_${a12:1}_$(uname -s)_$(binary::arch 1).tar.gz" "vale";};};docker::user() { local a56="${1:-"$(id -u)"}";local a46="${2:-"$(id -g)"}";local a43="${3:-"$(whoami)"}";local a45="${4:-"/workspace"}";local a17="${5:-"/bin/sh"}";echo "${a43}:x:${a56}:${a46}::${a45}:${a17}" > /tmp/docker_passwd;echo "${a43}:x:${a46}:" > /tmp/docker_group;echo -v "${PATH_BASE:-.}:${a45}";echo -v /tmp/docker_passwd:/etc/passwd -v /tmp/docker_group:/etc/group;echo -u "${a56}:${a46}";echo -w "${a45}";};error::stacktrace() { local -r a34="${1:-${?}}";if (( a34 )); then echo -e "\n\033[38;5;196m■■ Stacktrace(${a34}): \e[1m${BASH_COMMAND}\e[22m";for a58 in $(seq 1 $((${#FUNCNAME[@]} - 2))); do echo -e "${a58}. ${BASH_SOURCE[a58]}:${BASH_LINENO[a58-1]} ➜ ${FUNCNAME[a58]}()";done;echo -e "\033[0m";return "${a34}";fi;};:args::_error() { declare -p a24 &>/dev/null || local a24="???";echo ":args error [${a24}] ➜ ${1}" >&2;exit 2;};:args::error() { declare -p a24 &>/dev/null || local a24="???";echo -e "[ ${a24/[:|]*} ] invalid argument\n➜ ${1}\n" >&2;exit 2;};:args::error_usage() { declare -p a24 &>/dev/null || local a24="???";echo -e "[ ${a24/[:|]*} ] invalid usage\n➜ ${1}\n" >&2;echo -e "Use \"${0##*/} -h\" for more information" >&2;exit 2;};fmt::tty() { local a48="${1:-"$(cat)"}";command -v fmt &>/dev/null || { echo "${a48}";return 0;};local a44;a44="$(tput cols)";echo "${a48}" | fmt -w "${a44}";};github::latest() { local a36="${1}";curl -fsSLI -o /dev/null -w "%{url_effective}" "https://github.com/${a36}/releases/latest" | rev | cut -d'/' -f1 | rev;};is::tty() { [[ -t 1 ]];};is::array() { declare -p "${1}" &>/dev/null && [[ $(declare -p "${1}") == "declare -a"* ]];};is::uninitialized() { local a57="${1}";if is::array "${a57}"; then [[ $(declare -p "${a57}") == "declare -a ${a57}" ]];else [[ ! ${!a57+x} ]];fi;};is::set() { ! is::uninitialized "${1}";};argsh::shebang() { local -r a38="${1}";: "${ARGSH_SOURCE="${a38}"}";export ARGSH_SOURCE;[[ "${BASH_SOURCE[-1]}" != "${a38}" && -f "${a38}" ]] || { binary::exists docker || { echo "This script requires Docker to be installed";return 1;} >&2;docker run --rm -it $(docker::user) -e "BATS_LOAD" -e "ARGSH_SOURCE" ghcr.io/arg-sh/argsh:latest "${@}" ;return 0;} >&2;bash::version 4 3 0 || { echo "This script requires bash 4.3.0 or later";return 1;} >&2;shift;. "${a38}";};string::drop-index() { local a9="${1}";local a22="${2}";local a15="${3:-1}";echo "${a9:0:a22}${a9:a22+a15}";};string::random() { local a15="${1:-42}";local a18="${2:-"a-zA-Z0-9"}";local a48;until [[ "${a48:-}" =~ ^[:alpha:] ]]; do a48=$(tr -dc "${a18}" < /dev/urandom | fold -w "${a15}" | head -n 1 || :);done;echo "${a48}";};string::trim-left-lines() { local a9="${1:-'-'}";local a18="${2:-" "$'\n'$'\t'}";local a35 a16;[[ ${a9} != '-' ]] || a9="$(cat)";mapfile -t a16 < <(echo "${a9}");for a35 in "${a16[@]}"; do string::trim-left "${a35}" "${a18}";done;};string::trim-left() { local a9="${1:-'-'}";local a18="${2:-" "$'\n'$'\t'}";[[ ${a9} != '-' ]] || a9="$(cat)" ;while [[ -n "${a9}" ]]; do [[ ${a18} == *${a9:0:1}* ]] || break;a9="${a9:1}";done;echo "${a9}";};string::trim-right() { local a9="${1:-'-'}";local a18="${2:-" "$'\n'$'\t'}";[[ ${a9} != '-' ]] || a9="$(cat)";while [[ -n "${a9}" ]]; do [[ ${a18} == *${a9: -1}* ]] || break;a9="${a9:0: -1}";done;echo "${a9}";};string::trim() { local a9="${1:-'-'}";local a18="${2:-" \n\t"}";[[ ${a9} != '-' ]] || a9="$(cat)" ;echo "${a9}" | string::trim-left - "${a18}" | string::trim-right - "${a18}";};to::string() { local a31="${1}";echo "${a31}";};to::boolean() { local a31="${1}";case "${a31}" in
""|"false"|"0") a31="0" ;;
*) a31="1" ;;
esac;echo "${a31}";};to::int() { local a31="${1}";[[ ${a31} =~ ^-?[0-9]+$ ]] || return 1;echo "${a31}";};to::float() { local a31="${1}";[[ ${a31} =~ ^-?[0-9]+(\.[0-9]+)?$ ]] || return 1;echo "${a31}";};to::stdin() { local a31="${1}";[[ ${a31} != "-" ]] || a31="$(cat)";echo "${a31}";};to::file() { local a31="${1}";[[ -f "${a31}" ]] || return 1;echo "${a31}";};[[ "${BASH_SOURCE[0]}" != "${0}" ]] || argsh::shebang "${@}"