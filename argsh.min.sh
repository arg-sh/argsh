#!/usr/bin/env bash
# shellcheck disable=SC2178 disable=SC2120 disable=SC1090
: "${ARGSH_FIELD_WIDTH:=24}";COMMANDNAMES=("$(s="${ARGSH_SOURCE:-"${0}"}"; echo "${s##*/}")");:usage() { local a19="${1}"; shift;declare -p usage &>/dev/null || local -a usage=();declare -p args &>/dev/null || local -a args=();[[ $(( ${#usage[@]} % 2 )) -eq 0 ]] || :args::_error "usage must be an associative array";[[ $(( ${#usage[@]} % 2 )) -eq 0 ]] || :args::_error "usage must be an associative array";if [[ -z ${1:-} || ${1} == "-h" || ${1} == "--help" ]]; then :usage::text "${a19}";exit 0;fi;local -A a24=();local -a a54=("${@}");local a56 a18="";while (( ${#a54[@]} )); do if [[ ${a54[0]:0:1} != "-" ]]; then [[ -z "${a56:-}" ]] || break;a56="${a54[0]}";a54=("${a54[@]:1}");continue;fi;:args::parse_flag || break;a24["${a18}"]=1;done;:args::check_required_flags;local a43;for (( a57=0; a57 < ${#usage[@]}; a57+=2 )); do for a28 in $(echo "${usage[a57]/:*}" | tr '|' "\n"); do a28="${a28#\#}";[[ "${a56}" == "${a28}" ]] || continue;a18="${usage[a57]#\#}";a43="${usage[a57]/*:-}";a43="${a43#\#}";[[ "${a43}" == "${usage[a57]}" ]] || break 2;a43="${a43/|*}";break 2;done;done;[[ -n "${a43:-}" ]] || :args::error_usage "Invalid command: ${a56}";COMMANDNAMES+=("${a18/[|:]*}");usage=("${a43}" "${a54[@]}");};:usage::text() { local a19="${1:-}";string::trim-left-lines "${a19}";echo;echo "Usage: ${COMMANDNAMES[*]} <command> [args]";[[ ${usage[0]:-} == '-' ]] || echo -e "\nAvailable Commands:";for (( a57=0; a57 < ${#usage[@]}; a57+=2 )); do [[ "${usage[a57]:0:1}" != "#" ]] || continue;[[ "${usage[a57]}" != "-" ]] || { echo;echo "${usage[a57+1]}";continue;};printf "  %-${ARGSH_FIELD_WIDTH}s %s\n" "${usage[a57]/[:|]*}" "${usage[a57+1]}";done;:args::text_flags;echo;echo "Use \"${COMMANDNAMES[*]} <command> --help\" for more information about a command.";};:args() { local a19="${1}"; shift;declare -p args &>/dev/null || local -a args=();[[ $(( ${#args[@]} % 2 )) -eq 0 ]] || :args::_error "args must be an associative array";if [[ ${1:-} == "-h" || ${1:-} == "--help" ]]; then :args::text;exit 0;fi;local a18="" a57 a0=1;local -A a24=();local -a a54=("${@}");while (( ${#a54[@]} )); do if [[ ${a54[0]:0:1} != "-" ]]; then a57="$(:args::field_positional "${a0}")" || :args::error_usage "too many arguments: ${a54[0]}";a18="${args[a57]}";local -n a53="${a18/:*}";a53="$(:args::field_value "${a54[0]}")" || exit "${?}";a54=("${a54[@]:1}");(( ++a0 ));continue;fi;:args::parse_flag || :args::error_usage "unknown a31: ${a54[0]}";a24["${a18}"]=1;done;if a57="$(:args::field_positional "${a0}")"; then a18="$(args::field_name "${args[a57]}")";is::uninitialized "${a18}" || is::array "${a18}" || :args::error_usage "missing required argument: ${a18}";fi;:args::check_required_flags;[[ ${#a54[@]} -eq 0 ]] || :args::error_usage "too many arguments: ${a54[*]}";};:args::text() { declare -p args &>/dev/null || return 0;local -a a1=() a10=();:args::positional
string::trim-left-lines "${a19}";echo;echo "Usage:";echo "  ${COMMANDNAMES[*]} ${a10[*]}";(( ${#a1[@]} == 0 )) || { echo;echo "Arguments:";for a57 in "${a1[@]}"; do [[ ${args[a57]} != "-" ]] || continue;a32="$(printf "   %-${ARGSH_FIELD_WIDTH}s%s" " " "${args[a57+1]}" | fmt::tty;)";printf "   %-${ARGSH_FIELD_WIDTH}s%s\n" "$(:args::fieldf "${args[a57]}")" "$(string::trim-left "${a32}")";done;};:args::text_flags;echo;};:args::text_flags() { local -a args=("${args[@]}");local -a a20=();array::contains 'help|h:+' "${args[@]}" || args+=('help|h:+' "Show this help message");:args::flags;(( ${#a20[@]} )) || return 0;[[ "${args[${a20[0]}]}" == "-" ]] || echo -e "\nOptions:";for a57 in "${a20[@]}"; do [[ "${args[a57]:0:1}" != "#" ]] || continue;[[ "${args[a57]}" != "-" ]] || { echo;echo "${args[a57+1]}";continue;};:args::fieldf "${args[a57]}";{ echo -n "           ";echo -e "${args[a57+1]}\n";} | fmt::tty;done;};:args::flags() { declare -p args &>/dev/null || local -a args;declare -p a20 &>/dev/null || local -a a20;for (( a57=0; a57 < "${#args[@]}"; a57+=2 )); do if [[ ${args[a57]} == *"|"* || ${args[a57]} == '-' ]]; then a20+=("${a57}");fi;done;};:args::positional() { declare -p args &>/dev/null || local -a args;declare -p a1 &>/dev/null || local -a a1;declare -p a10 &>/dev/null || local -a a10;local a53;for (( a57=0; a57 < "${#args[@]}"; a57+=2 )); do [[ ${args[a57]} != *"|"* && ${args[a57]} != '-' ]] || continue;a53="$(args::field_name "${args[a57]}")";a1+=("${a57}");if is::array "${a53}"; then a10+=("...${a53}");continue;fi;if is::uninitialized "${a53}"; then a10+=("[${a53}]");continue;fi;a10+=("<${a53}>");done;};:args::parse_flag() { declare -p a54 a18 &>/dev/null || return 1;local a31="${a54[0]/=*}";if [[ ${a31:0:2} == "--" ]]; then a18="$(:args::field_lookup "${a31:2}")" || return "${?}";elif [[ ${a31:0:1} == "-" ]]; then a31="${a31:0:2}";a18="$(:args::field_lookup "${a31:1}")" || return "${?}";fi;:args::field_set_flag "${a18}";};:args::check_required_flags() { declare -p a24 args &>/dev/null || return 1;for (( a57=0; a57 < ${#args[@]}; a57+=2 )); do [[ ${args[a57]: -1} == "!" ]] || continue;if [[ -z ${a24[${args[a57]}]:-} ]]; then :args::error_usage "missing required a31: ${args[a57]/|*}";fi;done;};:args::field_set_flag() { local a18="${1}";declare -p a54 a31 &>/dev/null || return 1;local -a a27;:args::field_attrs "${a18}";local -n a53="${a27[0]}";local a2 a3;if (( a27[2] )); then a2=1;if [[ ${a31:0:2} == "--" ]]; then a54=("${a54[@]:1}");else a54[0]="-${a54[0]:2}";[[ ${a54[0]} != "-" ]] || a54=("${a54[@]:1}");fi;fi;[[ -n ${a2:-} ]] || { a3="${a54[0]/${a31}}";if [[ ${a3} == "" ]]; then (( ${#a54[@]} )) || :args::error "missing value for a31: ${a27[0]}";a2="${a54[1]}";a54=("${a54[@]:1}");else [[ "${a3:0:1}" != "=" ]] || a3="${a3:1}";a2="${a3}";fi;a2="$(:args::field_value "${a2}")" || exit "${?}";a54=("${a54[@]:1}");};if (( a27[5] )); then a53+=("${a2}");else a53="${a2}";fi;};:args::field_value() { local a16="${1}";declare -p a18 &>/dev/null || return 1;declare -p a27 &>/dev/null || { local -a a27;:args::field_attrs "${a18}";};declare -f "to::${a27[3]}" &>/dev/null || :args::_error "unknown type: ${a27[3]}";"to::${a27[3]}" "${a16}" "${a27[0]}" || :args::error_usage "invalid type (${a27[3]}): ${a16}";};:args::field_lookup() { local a18="${1}";declare -p args &>/dev/null || return 1;for (( a57=0; a57 < ${#args[@]}; a57+=2 )); do if [[ ${args[a57]} =~ (^${a18}\||\|${a18}:|\|${a18}$) ]]; then echo "${args[a57]}";return 0;fi;done;return 1;};:args::field_positional() { local a5="${1:-1}";declare -p args &>/dev/null || return 1;for (( a57=0; a57 < ${#args[@]}; a57+=2 )); do if [[ ${args[a57]} != *"|"* && ${args[a57]} != '-' ]]; then if is::array "$(args::field_name "${args[a57]}")" || (( --a5 == 0 )); then echo "${a57}";return 0;fi;fi;done;return 1;};args::field_name() { local a18="${1}";a18="${a18/[|:]*}";a18="${a18#\#}";echo "${a18}";};:args::field_attrs() { local a18="${1}";declare -p a27 &>/dev/null || local -a a27;a27=("" "" 0 "" 0 0 0 0 );local a44="+~!";local a36="${a18#*[:]}";[ "${a36}" != "${a18}" ] || a36="";a27[0]="$(args::field_name "${a18}")";[[ ${a27[0]:0:1} != "#" ]] || { a27[7]=1;};local -n a53="${a27[0]}";local -a a20;mapfile -t a20 < <(echo "${a18/[:]*}" | tr '|' '\n');[[ ${#a20[@]} -eq 1 ]] || { a27[0]="${a20[0]}";a27[1]="${a20[1]}";};if is::array "${a27[0]}"; then a27[5]=1;! is::uninitialized "${a27[0]}" || a53=();! (( ${#a53[@]} )) || a27[4]=1;elif is::uninitialized "${a27[0]}"; then a27[4]=1;fi;while (( ${#a36} > 0 )); do if [[ ${a36:0:1} == "+" ]]; then [[ -z ${a27[3]} ]] || :args::_error "cannot have multiple types: ${a27[3]} and boolean";a27[2]=1;a36="${a36:1}";continue;fi;if [[ ${a36:0:1} == "~" ]]; then ! (( a27[2] )) || :args::_error "already flagged as boolean";a36="${a36:1}";a27[3]="${a36/[$a44]*}";a36="${a36:${#a27[3]}}";continue;fi;if [[ ${a36:0:1} == "!" ]]; then ! (( a27[4] )) || :args::_error "cannot be required with default value";! (( a27[6] )) || :args::_error "field already flagged as required";a27[6]=1;a36="${a36:1}";continue;fi;echo ":args error: unknown modifier: ${a36:0:1}" >&2;exit 2;done;if [[ -z ${a27[3]} && ${a27[2]} -eq 0 ]]; then a27[3]="string";fi;};:args::fieldf() { local a18="${1}";declare -p a27 &>/dev/null || { local -a a27;:args::field_attrs "${a18}";};[[ ${a18} == *"|"* ]] || { echo "${a27[0]} ${a27[3]}";return 0;};local -n a53="${a27[0]}";a9="   ";! (( a27[6] )) || a9=" ! ";if [[ -n ${a27[1]} ]]; then a9+="-${a27[1]}, --${a27[0]}";else a9+="    --${a27[0]}";fi;a9+=" ";! (( a27[5] )) || a9+="...";a9+="${a27[3]}";! (( a27[4] )) || a9+=" (default: ${a53[*]})";echo "${a9}";};args::run() { local a46="${1}"; shift;for (( a57=0; a57<${#}; a57++ )); do local a52="${1}"; shift;local a43="${1}"; shift;if ! (( a46 )) || (( a52 )); then "${a43}";fi;done;};array::contains() { local -r a11="${1}"; shift;for a7 in "${@}"; do [[ "${a7}" != "${a11}" ]] || return 0;done;return 1;};array::join() { local -r a4="${1}"; shift;local a15;printf -v a15 "${a4}%s" "${@}";echo "${a15:${#a4}}";};array::nth() { local -n a47="${1}";local -r a51="${2}";shift 2;for (( a57=1; a57<=${#}; a57++ )); do (( a57 % a51 )) || a47+=("${!a57}");done;};bash::version() { local a25="${1:-4}";local a17="${2:-3}";local a21="${3:-0}";local -a a6;read -ra a6 <<< "$(echo "${BASH_VERSION}" | tr '.' ' ')";if [[ "${a6[0]}" -lt "${a25}" ]]; then return 1;elif [[ "${a6[0]}" -gt "${a25}" ]]; then return 0;fi;if [[ "${a6[1]}" -lt "${a17}" ]]; then return 1;elif [[ "${a6[1]}" -gt "${a17}" ]]; then return 0;fi;if [[ "${a6[2]}" -lt "${a21}" ]]; then return 1;fi;return 0;};binary::exists() { local a14="${1}";command -v "${a14}" &> /dev/null || { echo "${a14} is required to run this script" >&2;return 1;};};binary::github() { local a37="${1}";local -r a14="$(basename "${a37}")";local a33="${2}";local a42="${3}";local a48="${4:-}";curl -Lso /dev/stdout "https://github.com/${a33}/releases/download/${a42}" | { if [[ -n "${a48}" ]]; then tar -xz -C "$(dirname "${a37}")" "${a48}";else tee "${a37}" &> /dev/null;fi;chmod +x "${a37}";};};binary::arch() { local a26="${1}";local -r a34="$(uname -m)";case "${a34}" in
x86_64|amd64) if (( a26 )); then echo "64-bit"; else echo "amd64"; fi ;;
armv7l) echo "arm" ;;
aarch64) echo "arm64" ;;
*) echo "${a34}" ;;
esac;};binary::jq() { binary::exists "jq" 2>/dev/null || { local -r a12="$(github::latest "stedolan/jq")" system="$(uname -s)";binary::github "${PATH_BIN?}/jq" "stedolan/jq" "${a12}/jq-${system,,}-$(binary::arch)";};};binary::vale() { binary::exists "vale" 2>/dev/null || { local -r a12="$(github::latest "errata-ai/vale")" system="$(uname -s)";binary::github "${PATH_BIN?}/vale" "errata-ai/vale" "${a12}/vale_${a12:1}_$(uname -s)_$(binary::arch 1).tar.gz" "vale";};};docker::user() { local a50="${1:-"$(id -u)"}";local a45="${2:-"$(id -g)"}";local a41="${3:-"$(whoami)"}";local a40="${4:-"/workspace"}";local a29="${5:-"/bin/sh"}";echo "${a41}:x:${a50}:${a45}::${a40}:${a29}" > /tmp/docker_passwd;echo "${a41}:x:${a45}:" > /tmp/docker_group;echo -v "${PATH_BASE:-.}:${a40}";echo -v /tmp/docker_passwd:/etc/passwd -v /tmp/docker_group:/etc/group;echo -u "${a50}:${a45}";echo -w "${a40}";};error::stacktrace() { local -r a38="${1:-${?}}";if (( a38 )); then echo -e "\n\033[38;5;196m■■ Stacktrace(${a38}): \e[1m${BASH_COMMAND}\e[22m";for a57 in $(seq 1 $((${#FUNCNAME[@]} - 2))); do echo -e "${a57}. ${BASH_SOURCE[a57]}:${BASH_LINENO[a57-1]} ➜ ${FUNCNAME[a57]}()";done;echo -e "\033[0m";return "${a38}";fi;};:args::_error() { declare -p a18 &>/dev/null || local a18="???";echo ":args error [${a18}] ➜ ${1}" >&2;exit 2;};:args::error() { declare -p a18 &>/dev/null || local a18="???";echo -e "[ ${a18/[:|]*} ] invalid argument\n➜ ${1}\n" >&2;exit 2;};:args::error_usage() { declare -p a18 &>/dev/null || local a18="???";echo -e "[ ${a18/[:|]*} ] invalid usage\n➜ ${1}\n" >&2;echo -e "Use \"${0##*/} -h\" for more information" >&2;exit 2;};fmt::tty() { local a55="${1:-"$(cat)"}";command -v fmt &>/dev/null || { echo "${a55}";return 0;};local a39;a39="$(tput cols)";echo "${a55}" | fmt -w "${a39}";};github::latest() { local a33="${1}";curl -fsSLI -o /dev/null -w "%{url_effective}" "https://github.com/${a33}/releases/latest" | rev | cut -d'/' -f1 | rev;};is::tty() { [[ -t 1 ]];};is::array() { declare -p "${1}" &>/dev/null && [[ $(declare -p "${1}") == "declare -a"* ]];};is::uninitialized() { local a49="${1}";if is::array "${a49}"; then [[ $(declare -p "${a49}") == "declare -a ${a49}" ]];else [[ ${!a49+x} ]];fi;};is::set() { ! is::uninitialized "${1}";};argsh::shebang() { local -r a42="${1}";[[ -e "${a42}" && "${BASH_SOURCE[-1]}" != "${a42}" ]] || { binary::exists docker || { echo "This script requires Docker to be installed";return 1;} >&2;docker run --rm -it $(docker::user) kleisterio/argsh "${@}" ;return 0;} >&2;bash::version 4 3 0 || { echo "This script requires bash 4.3.0 or later";return 1;} >&2;ARGSH_SOURCE="${a42}";export ARGSH_SOURCE
shift;. "${a42}";};string::drop-index() { local a13="${1}";local a23="${2}";local a8="${3:-1}";echo "${a13:0:a23}${a13:a23+a8}";};string::random() { local a8="${1:-42}";local a22="${2:-"a-zA-Z0-9"}";local a55;until [[ "${a55:-}" =~ ^[:alpha:] ]]; do a55=$(tr -dc "${a22}" < /dev/urandom | fold -w "${a8}" | head -n 1 || :);done;echo "${a55}";};string::trim-left-lines() { local a13="${1:-'-'}";local a22="${2:-" "$'\n'$'\t'}";local a35 a30;[[ ${a13} != '-' ]] || a13="$(cat)";mapfile -t a30 < <(echo "${a13}");for a35 in "${a30[@]}"; do string::trim-left "${a35}" "${a22}";done;};string::trim-left() { local a13="${1:-'-'}";local a22="${2:-" "$'\n'$'\t'}";[[ ${a13} != '-' ]] || a13="$(cat)" ;while [[ -n "${a13}" ]]; do [[ ${a22} == *${a13:0:1}* ]] || break;a13="${a13:1}";done;echo "${a13}";};string::trim-right() { local a13="${1:-'-'}";local a22="${2:-" "$'\n'$'\t'}";[[ ${a13} != '-' ]] || a13="$(cat)";while [[ -n "${a13}" ]]; do [[ ${a22} == *${a13: -1}* ]] || break;a13="${a13:0: -1}";done;echo "${a13}";};string::trim() { local a13="${1:-'-'}";local a22="${2:-" \n\t"}";[[ ${a13} != '-' ]] || a13="$(cat)" ;echo "${a13}" | string::trim-left - "${a22}" | string::trim-right - "${a22}";};to::string() { local a16="${1}";echo "${a16}";};to::boolean() { local a16="${1}";case "${a16}" in
""|"false"|"0") a16="0" ;;
*) a16="1" ;;
esac;echo "${a16}";};to::int() { local a16="${1}";[[ ${a16} =~ ^-?[0-9]+$ ]] || return 1;echo "${a16}";};to::float() { local a16="${1}";[[ ${a16} =~ ^-?[0-9]+(\.[0-9]+)?$ ]] || return 1;echo "${a16}";};to::stdin() { local a16="${1}";[[ ${a16} != "-" ]] || a16="$(cat)";echo "${a16}";}; [[ "${BASH_SOURCE[0]}" != "${0}" ]] || argsh::shebang "${@}"