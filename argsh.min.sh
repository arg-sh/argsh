#!/usr/bin/env bash
# shellcheck disable=SC2178 disable=SC2120 disable=SC1090
: "${ARGSH_FIELD_WIDTH:=24}";: "${ARGSH_PATH_IMPORT:=${BASH_SOURCE[0]%/*}}";:args() { local a26="${1}"; shift;declare -p args &>/dev/null || local -a args=();[[ $(( ${#args[@]} % 2 )) -eq 0 ]] || :args::_error "args must be an associative array";args+=('help|h:+' "Show this help message");if [[ ${1:-} == "-h" || ${1:-} == "--help" ]]; then :args::text;exit 0;fi;local a16 a42;local a0=0;local -A a17=();local -a a48=("${@}");while (( ${#a48[@]} )); do if [[ ${a48[0]:0:1} != "-" ]]; then a16="${args[${a0}]}";[[ ${a16} != *"|" ]] || :args::error_usage "too many arguments: ${a48[0]}";local -n a45="${a16/:*}";a45="$(:args::field-value "${a48[0]}")" || exit "${?}";unset 'a48[0]'; a48=("${a48[@]}");(( a0 += 2 ));continue;fi;a42="${a48[0]/=*}";if [[ ${a42:0:2} == "--" ]]; then a16="$(:args::field-lookup "${a42:2}" "${a0}")";elif [[ ${a42:0:1} == "-" ]]; then a42="${a42:0:2}";a16="$(:args::field-lookup "${a42:1}" "${a0}")";fi;:args::field-set-flag "${a16}";a17["${a16}"]=1;done;a16="${args[${a0}]:-}";if [[ -n "${a16}" && "${a16}" != *"|"* ]]; then is::uninitialized "${a16/:*}" || :args::error_usage "missing required argument: ${args[${a0}]/:*}";fi;for (( a54=0; a54 < ${#args[@]}; a54+=2 )); do [[ ${args[a54]: -1} == "!" ]] || continue;if [[ -z ${a17[${args[a54]}]:-} ]]; then :args::error_usage "missing required a42: ${args[a54]/|*}";fi;done;[[ ${#a48[@]} -eq 0 ]] || :args::error_usage "too many arguments: ${a48[*]}";};:args::text() { local -a a24=() a1=() a10=();:args::positional;:args::flags;local a32="${0##*/}";echo "${a26}";echo;echo "Usage:";echo "  ${a32} ${FUNCNAME[2]/::*} ${a10[*]}";(( ${#a1[@]} == 0 )) || { echo;echo "Arguments:";for a54 in "${a1[@]}"; do a34="$(printf "   %-${ARGSH_FIELD_WIDTH}s%s" " " "${args[a54+1]}" | fmt::tty;)";printf "   %-${ARGSH_FIELD_WIDTH}s%s\n" "$(:args::fieldf "${args[a54]}")" "$(string::trim-left "${a34}")";done;};echo;echo "Options:";(( ${#a24[@]} == 0 )) || { for a54 in "${a24[@]}"; do :args::fieldf "${args[a54]}";{ echo -n "           ";echo -e "${args[a54+1]}\n";} | fmt::tty;done;};echo;};:args::flags() { declare -p args &>/dev/null || local -a args;declare -p a24 &>/dev/null || local -a a24;for (( a54=0; a54 < "${#args[@]}"; a54+=2 )); do if [[ ${args[a54]} == *"|"* ]]; then a24+=("${a54}");fi;done;};:args::positional() { declare -p args &>/dev/null || local -a args;declare -p a1 &>/dev/null || local -a a1;declare -p a10 &>/dev/null || local -a a10;for (( a54=0; a54 < "${#args[@]}"; a54+=2 )); do [[ ${args[a54]} != *"|"* ]] || continue;a1+=("${a54}");if is::uninitialized "${args[a54]/:*}"; then a10+=("[${args[a54]/:*}]");continue;fi;a10+=("<${args[a54]/:*}>");done;};:args::field-set-flag() { local a16="${1}";declare -p a48 a42 &>/dev/null || return 1;local -a a27;:args::field-attrs "${a16}";local -n a45="${a27[0]}";local a2 a4;if (( a27[2] )); then a2=1;if [[ ${a42:0:2} == "--" ]]; then unset 'a48[0]'; a48=("${a48[@]}");else a48[0]="-${a48[0]:2}";[[ ${a48[0]} != "-" ]] || { unset 'a48[0]'; a48=("${a48[@]}"); };fi;fi;[[ -n ${a2:-} ]] || { a4="${a48[0]/${a42}}";if [[ ${a4} == "" ]]; then (( ${#a48[@]} )) || :args::error "missing value for a42: ${a27[0]}";a2="${a48[1]}";unset 'a48[1]'; a48=("${a48[@]}");else [[ "${a4:0:1}" != "=" ]] || a4="${a4:1}";a2="${a4}";fi;a2="$(:args::field-value "${a2}")" || exit "${?}";unset 'a48[0]'; a48=("${a48[@]}");};if (( a27[5] )); then a45+=("${a2}");else a45="${a2}";fi;};:args::field-value() { local a22="${1}";declare -p a16 &>/dev/null || return 1;declare -p a27 &>/dev/null || { local -a a27;:args::field-attrs "${a16}";};declare -f "to::${a27[3]}" &>/dev/null || :args::_error "unknown type: ${a27[3]}";"to::${a27[3]}" "${a22}" "${a27[0]}" || :args::error_usage "invalid type (${a27[3]}): ${a22}";};:args::field-lookup() { local a16="${1}";local a28="${2:-0}";declare -p args &>/dev/null || return 1;for (( a54=a28; a54 < ${#args[@]}; a54+=2 )); do if [[ ${args[a54]} =~ (^${a16}\||\|${a16}:|\|${a16}$) ]]; then echo "${args[a54]}";return 0;fi;done;:args::error_usage "unknown flag";};:args::field-attrs() { local a16="${1}";declare -p a27 &>/dev/null || local -a a27;a27=("" "" 0 "" 0 0 0 );local a38="+~!";local a41="${a16#*[:]}";[ "${a41}" != "${a16}" ] || a41="";a27[0]="${a16/[|:]*}";local -n a45="${a27[0]}";local -a a24;mapfile -t a24 < <(echo "${a16/[:]*}" | tr '|' '\n');[[ ${#a24[@]} -eq 1 ]] || { a27[0]="${a24[0]}";a27[1]="${a24[1]}";};if is::array "${a27[0]}"; then a27[5]=1;! is::uninitialized "${a27[0]}" || a45=();! (( ${#a45[@]} )) || a27[4]=1;elif is::uninitialized "${a27[0]}"; then a27[4]=1;fi;while (( ${#a41} > 0 )); do if [[ ${a41:0:1} == "+" ]]; then [[ -z ${a27[3]} ]] || :args::_error "cannot have multiple types: ${a27[3]} and boolean";a27[2]=1;a41="${a41:1}";continue;fi;if [[ ${a41:0:1} == "~" ]]; then ! (( a27[2] )) || :args::_error "already flagged as boolean";a41="${a41:1}";a27[3]="${a41/[$a38]*}";a41="${a41:${#a27[3]}}";continue;fi;if [[ ${a41:0:1} == "!" ]]; then ! (( a27[4] )) || :args::_error "cannot be required with default value";! (( a27[6] )) || :args::_error "field already flagged as required";a27[6]=1;a41="${a41:1}";continue;fi;echo ":args error: unknown modifier: ${a41:0:1}" >&2;exit 2;done;if [[ -z ${a27[3]} && ${a27[2]} -eq 0 ]]; then a27[3]="string";fi;};:args::fieldf() { local a16="${1}";declare -p a27 &>/dev/null || { local -a a27;:args::field-attrs "${a16}";};[[ ${a16} == *"|"* ]] || { echo "${a16/:*} ${a27[3]}";return 0;};local -n a45="${a27[0]}";a13="   ";! (( a27[6] )) || a13=" ! ";if [[ -n ${a27[1]} ]]; then a13+="-${a27[1]}, --${a27[0]}";else a13+="    --${a27[0]}";fi;a13+=" ";! (( a27[5] )) || a13+="...";a13+="${a27[3]}";! (( a27[4] )) || a13+=" (default: ${a45[*]})";echo "${a13}";};: "${ARGSH_FIELD_WIDTH:=24}";: "${ARGSH_PATH_IMPORT:=${BASH_SOURCE[0]%/*}}";:usage() { local a26="${1}"; shift;declare -p usage &>/dev/null || local -a usage=();[[ $(( ${#usage[@]} % 2 )) -eq 0 ]] || :args::_error "usage must be an associative array";if [[ -z ${1:-} || ${1} == "-h" || ${1} == "--help" ]]; then :usage::text "${a26}";exit 0;fi;for (( a54=0; a54 < ${#usage[@]}; a54+=2 )); do if [[ ${usage[a54]/::*} == "${1}" ]]; then ! declare -f "${usage[a54]}" &>/dev/null || "${usage[a54]}" "${@:2}";return 0;fi;done;:args::error_usage "Invalid command: ${1}";};:usage::text() { local a26="${1:-}";local a32="${ARGSH_SOURCE:-"${0}"}";a32="${a32##*/}";echo "${a26}";echo;echo "Usage: ${a32} <command> [args]";echo;echo "Available Commands:";for (( a54=0; a54 < ${#usage[@]}; a54+=2 )); do printf "  %-${ARGSH_FIELD_WIDTH}s %s\n" "${usage[a54]/::*}" "${usage[a54+1]}";done;echo;printf "  %-${ARGSH_FIELD_WIDTH}s %s\n" "-h, --help" "Show this help message";echo;echo "Use \"${a32} [command] --help\" for more information about a command.";};args::run() { local a53="${1}"; shift;for (( a54=0; a54<${#}; a54++ )); do local a44="${1}"; shift;local a39="${1}"; shift;if ! (( a53 )) || (( a44 )); then "${a39}";fi;done;};array::contains() { local -r a7="${1}"; shift;for a6 in "${@}"; do [[ "${a6}" != "${a7}" ]] || return 0;done;return 1;};array::join() { local -r a3="${1}"; shift;local a12;printf -v a12 "${a3}%s" "${@}";echo "${a12:${#a3}}";};array::nth() { local -n a50="${1}";local -r a49="${2}";shift 2;for (( a54=1; a54<=${#}; a54++ )); do (( a54 % a49 )) || a50+=("${!a54}");done;};binary::exists() { local a14="${1}";command -v "${a14}" &> /dev/null || { echo "${a14} is required to run this script" >&2;return 1;};};binary::github() { local a31="${1}";local -r a14="$(basename "${a31}")";local a35="${2}";local a37="${3}";local a52="${4:-}";curl -Lso /dev/stdout "https://github.com/${a35}/releases/download/${a37}" | { if [[ -n "${a52}" ]]; then tar -xz -C "$(dirname "${a31}")" "${a52}";else tee "${a31}" &> /dev/null;fi;chmod +x "${a31}";};};binary::arch() { local a15="${1}";local -r a36="$(uname -m)";case "${a36}" in
x86_64|amd64) if (( a15 )); then echo "64-bit"; else echo "amd64"; fi ;;
armv7l) echo "arm" ;;
aarch64) echo "arm64" ;;
*) echo "${a36}" ;;
esac;};binary::jq() { binary::exists "jq" 2>/dev/null || { local -r a8="$(github::latest "stedolan/jq")" system="$(uname -s)";binary::github "${PATH_BIN?}/jq" "stedolan/jq" "${a8}/jq-${system,,}-$(binary::arch)";};};binary::vale() { binary::exists "vale" 2>/dev/null || { local -r a8="$(github::latest "errata-ai/vale")" system="$(uname -s)";binary::github "${PATH_BIN?}/vale" "errata-ai/vale" "${a8}/vale_${a8:1}_$(uname -s)_$(binary::arch 1).tar.gz" "vale";};};docker::user() { local a51="${1:-"$(id -u)"}";local a43="${2:-"$(id -g)"}";local a40="${3:-"$(whoami)"}";local a33="${4:-"/workspace"}";local a23="${5:-"/bin/sh"}";echo "${a40}:x:${a51}:${a43}::${a33}:${a23}" > /tmp/docker_passwd;echo "${a40}:x:${a43}:" > /tmp/docker_group;echo -v "${PATH_BASE:-.}:${a33}";echo -v /tmp/docker_passwd:/etc/passwd -v /tmp/docker_group:/etc/group;echo -u "${a51}:${a43}";echo -w "${a33}";};error::stacktrace() { local -r a29="${1:-${?}}";if (( a29 )); then echo -e "\n\033[38;5;196m■■ Stacktrace(${a29}): \e[1m${BASH_COMMAND}\e[22m";for a54 in $(seq 1 $((${#FUNCNAME[@]} - 2))); do echo -e "${a54}. ${BASH_SOURCE[a54]}:${BASH_LINENO[a54-1]} ➜ ${FUNCNAME[a54]}()";done;echo -e "\033[0m";return "${a29}";fi;};:args::_error() { declare -p a16 &>/dev/null || local a16="???";echo ":args error [${a16}] ➜ ${1}" >&2;exit 2;};:args::error() { echo -e "[ ${a16/:*} ] invalid argument\n➜ ${1}\n" >&2;exit 2;};:args::error_usage() { declare -p a16 &>/dev/null || local a16="???";echo -e "[ ${a16/:*} ] invalid usage\n➜ ${1}\n" >&2;echo -e "Use \"${0##*/} -h\" for more information" >&2;exit 2;};fmt::tty() { local a46="${1:-"$(cat)"}";command -v fmt &>/dev/null || { echo "${a46}";return 0;};local a30;a30="$(tput cols)";echo "${a46}" | fmt -w "${a30}";};github::latest() { local a35="${1}";curl -fsSLI -o /dev/null -w "%{url_effective}" "https://github.com/${a35}/releases/latest" | rev | cut -d'/' -f1 | rev;};is::tty() { [[ -t 1 ]];};is::array() { declare -p "${1}" &>/dev/null && [[ $(declare -p "${1}") == "declare -a"* ]];};is::uninitialized() { local a47="${1}";if is::array "${a47}"; then [[ $(declare -p "${a47}") == "declare -a ${a47}" ]];else [[ ${!a47+x} ]];fi;};bash::version() { local a20="${1:-4}";local a18="${2:-3}";local a25="${3:-0}";local -a a5;read -ra a5 <<< "$(echo "${BASH_VERSION}" | tr '.' ' ')";if [[ "${a5[0]}" -lt "${a20}" ]]; then return 1;elif [[ "${a5[0]}" -gt "${a20}" ]]; then return 0;fi;if [[ "${a5[1]}" -lt "${a18}" ]]; then return 1;elif [[ "${a5[1]}" -gt "${a18}" ]]; then return 0;fi;if [[ "${a5[2]}" -lt "${a25}" ]]; then return 1;fi;return 0;};argsh::shebang() { local -r a37="${*: -1}";[[ -e "${a37}" && "${BASH_SOURCE[-1]}" != "${a37}" ]] || { echo "This is intended to be used in a shebang";echo "#!/usr/bin/env argsh";return 1;} >&2;bash::version 4 3 0 || { echo "This script requires bash 4.3.0 or later";return 1;} >&2;ARGSH_SOURCE="${a37}";export ARGSH_SOURCE;. "${a37}";};string::drop-index() { local a9="${1}";local a19="${2}";local a11="${3:-1}";echo "${a9:0:a19}${a9:a19+a11}";};string::random() { local a11="${1:-42}";local a21="${2:-"a-zA-Z0-9"}";local a46;until [[ "${a46:-}" =~ ^[:alpha:] ]]; do a46=$(tr -dc "${a21}" < /dev/urandom | fold -w "${a11}" | head -n 1 || :);done;echo "${a46}";};string::trim-left() { local a9="${1:-'-'}";local a21="${2:-" "$'\n'$'\t'}";[[ ${a9} != '-' ]] || a9="$(cat)" ;while [[ -n "${a9}" ]]; do [[ ${a21} == *${a9:0:1}* ]] || break;a9="${a9:1}";done;echo "${a9}";};string::trim-right() { local a9="${1:-'-'}";local a21="${2:-" "$'\n'$'\t'}";[[ ${a9} != '-' ]] || a9="$(cat)";while [[ -n "${a9}" ]]; do [[ ${a21} == *${a9: -1}* ]] || break;a9="${a9:0: -1}";done;echo "${a9}";};string::trim() { local a9="${1:-'-'}";local a21="${2:-" \n\t"}";[[ ${a9} != '-' ]] || a9="$(cat)" ;echo "${a9}" | string::trim-left - "${a21}" | string::trim-right - "${a21}";};to::string() { local a22="${1}";echo "${a22}";};to::boolean() { local a22="${1}";case "${a22}" in
""|"false"|"0") a22="0" ;;
*) a22="1" ;;
esac;echo "${a22}";};to::int() { local a22="${1}";[[ ${a22} =~ ^-?[0-9]+$ ]] || return 1;echo "${a22}";};to::float() { local a22="${1}";[[ ${a22} =~ ^-?[0-9]+(\.[0-9]+)?$ ]] || return 1;echo "${a22}";};to::stdin() { local a22="${1}";[[ ${a22} != "-" ]] || a22="$(cat)";echo "${a22}";}; [[ "${BASH_SOURCE[0]}" != "${0}" ]] || argsh::shebang "${@}"