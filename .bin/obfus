#!/usr/bin/perl -w
# MIT License
# source: 
# - https://github.com/rsilraf/bashobfus
# - https://github.com/Aralhach/bashobfus
use strict;
use warnings;

use feature ':5.10';
use Data::Dumper;

sub print_usage() {
	say "$0 is a bash shell script minifier/obfuscator.";
	say "It deletes full line comments, whitespaces and tabs, and obfuscates variable names.";
	say "Usage:";
	say "\t $0 -h \t This help message.";
	say "\t $0 -i <input_file> -o <output_file> [-V <new_var_string>] -C -F";
	say "\t Where:";
	say "\t\t<input_file>\tis the shell script you want to obfuscate";
	say "\t\t<output_file>\tis where you want to save the obfuscated script";
	say "\t\t<new_var_string>\tis an optional argument that defines what all variables will be changed to.";
	say "\t\t\tThe default is 'a', which means all variables will be changed to a0,a1,a2,a3,...";
	say "\t\t-C\tis an option to clean out full line comments and blank lines.";
	say "\t\t-F\tis an option to flatten out the code (remove indentations)";
	say "\t\t-A\tis an option to aggressive obfuscation (implies using -F and -C)(tries to put more content on same line when possible)";
	exit 0;
}

sub parse_cmd_args {
	my $input_file="";
	my $output_file="";
	my $delete_blanks="";
	my $flatten="";
	my $new_variable_prefix="a";
	my $aggressive="";
	for my $argnum (0 .. $#ARGV) {
		if ($ARGV[$argnum] eq "-i") {
			$input_file=$ARGV[$argnum+1];
			$argnum++;
		} elsif ($ARGV[$argnum] eq "-o") {
			$output_file=$ARGV[$argnum+1];
			$argnum++;
		} elsif ($ARGV[$argnum] eq "-h") {
			&print_usage();
		} elsif ($ARGV[$argnum] eq "-V") {
			$new_variable_prefix=$ARGV[$argnum+1];
			$argnum++;
		} elsif ($ARGV[$argnum] eq "-C") {
			$delete_blanks=1;
		} elsif ($ARGV[$argnum] eq "-F") {
			$flatten=1;
		} elsif ($ARGV[$argnum] eq "-A") {
			$aggressive=1;
			$flatten=1;
			$delete_blanks=1;
		}
	}
	if ($input_file eq "" || $output_file eq "") {
		say "Input or output file not specified!!";
		&print_usage();
	}
	return ($input_file,$output_file,$new_variable_prefix,$delete_blanks,$flatten,$aggressive);
}

sub parse_vars_from_file {
	my $file_name=shift;
	open(my $file_handle, "<", $file_name) || die "Couldn't open '".$file_name."' for reading because: ".$!;
	my %vars=();
	my $skip_next_line=0;
	while(my $lines=<$file_handle>) {
		# Check if next line should be ignored
		if ($lines =~ m/^[ \t]*# obfus ignore variable/) {
			$skip_next_line++;
			next;
		}
		if ($skip_next_line) {
			$skip_next_line--;
			next;
		}
		# Skip comments and empty lines
    if ($lines =~ m/^[ \t]*#/ || $lines =~ m/^[ \t]*$/) {
      next;
    }
    for my $line (split(/;+\s*/, $lines)) {
      # First pull var names from declarations
      if ($line =~ m/^[ \t]*([a-z]+[a-z0-9_]*)=/) {
				next if $1 eq "IFS";
        $vars{$1}=1;
      # Then, from local declarations
      } elsif (
        $line !~ m/(^|[ \t]+)declare\s/ &&
        $line =~ m/(^|[ \t]+)local\s([ \t]|-\w)*[a-z]+[a-z0-9_]*(=|\s|$)/
      ) {
        $line =~ s/^.*local\s([ \t]|-\w)*//;
        while($line =~ s/([({]).*?[)}]//) {}
        while($line =~ s/("|')([^\\][^\1])+\1//) {}
        while($line =~ s/=[^\s]*//) {}
        my @words = split(" ", $line);
        for my $word (@words) {
          if ($word =~ m/^[a-z]+[a-z0-9_]*$/) {
            $vars{$word}=1;
          }
        }
      # Then, from read statements
      } elsif (($line =~ m/^.*read -s ([a-z]+[a-z0-9_]*)/) || ($line =~ m/^.*read ([a-z]+[a-z0-9_]*)+/)) {
        while ($line =~ /read([^;]+);/g) {
          for my $v (split(" ",$1)){
            $vars{$v}=1;	
          }
        }
        $vars{$1}=1;
      # Then, from for loops
      } elsif ($line =~ m/^[ \t]*for ([a-z]+[a-z0-9_]*) /) {
        $vars{$1}=1;
      # Then, from array access
      } elsif ($line =~ m/^[ \t]*([a-z]+[a-z0-9_]*)\[.+\]=/) {
        $vars{$1}=1;
      # Then, from pre increment/decrement statements
      } elsif ($line =~ m/^[ \t]*\(\( *[-+]{2}([a-z]+[a-z0-9_]*) *\)\)/) {
        $vars{$1}=1;
      # Then, from post increment/decrement statements
      } elsif ($line =~ m/^[ \t]*\({2} *([a-z]+[a-z0-9_]*)[-+]{2} *\){2}/) {
        $vars{$1}=1;
      }
    }
	}
	close $file_handle;
	return keys %vars;
}

sub obfuscate {
	my $input_file=shift;
	my $output_file=shift;
	my $new_variable_prefix=shift;
	my $delete_blanks=shift;
	my $flatten=shift;
	my $aggressive=shift;
	my @sorted_vars=@_;

	open(my $ifh, "<", $input_file) || die "Couldn't open '".$input_file."' for reading because: ".$!;
	open(my $ofh, ">", $output_file) || die "Couldn't open '".$output_file."' for writing because: ".$!;
	my %var_obfus=();
	my $var_index=0;
	for my $var (@sorted_vars) {
		$var_obfus{$var}=$new_variable_prefix.$var_index;
		$var_index++;
	}
	my %vars=();
	while(my $line=<$ifh>) {
		if ($delete_blanks && (
      $line =~ m/^[ \t]*#.*/ || # [^!] 
      $line =~ m/^[ \t]*$/ ||
      $line =~ m/^import[( ].+$/ ||
      $line =~ m/^set -euo pipefail/
    )) {
			next;
		}

		if ($flatten) {
			$line =~ s/^[ \t]*//;
		}
		# clear ;-ending lines . This avoid bugs on aggressive mode
		$line =~ s/([^;]);$/$1/;
    # remove comments end of line
    # could be a problematic with <<EOF echo " # " etc
    $line =~ s/\s+#\s+[^"]+$/ /;

		for my $var (@sorted_vars) {
			# Substitute var names in declarations
		  while ($line =~ m/[ \t]*$var=/) {
        $line =~ s/([ \t]*)$var=/$1$var_obfus{$var}=/;
      }
		  while ($line =~ m/[ \t]*(local|declare)([ \t]|-\w)*[^;]*\s$var(\s|=|$)/) {
        $line =~ s/(^|\s)$var(\s|=|$)/$1$var_obfus{$var}$2/;
      }
			while ($line =~ m/^([^']*(?:(?:'[^']*')*(?:"[^"]")*)*"[^"]*|[^'"]*)$var([+\-]?=)/) {
				$line =~ s/^([^']*(?:(?:'[^']*')*(?:"[^"]")*)*"[^"]*|[^'"]*)$var([+\-]?=)/$1$var_obfus{$var}$2/;
			}
		  if ($line =~ m/[|]\s+$var([+\-]?=)/) {
        $line =~ s/([|]\s+)$var([+\-]?=)/$1$var_obfus{$var}$2/;
      }

			# Then, in read statements
			while ($line =~ s/^(.*read .*)$var([ ;}'"\n])/$1$var_obfus{$var}$2/g){
				# have no body
			}

      # printf -v var
      $line =~ s/^(printf\s+-v\s+|mapfile\s+-t\s+)$var([^\w])/$1$var_obfus{$var}$2/;

			# Then, in for loops
			$line =~ s/^([ \t]*for )$var/$1$var_obfus{$var}/;

			# Then, in array access
			$line =~ s/^([ \t]*)$var(\[.+\]=)/$1$var_obfus{$var}$2/;

			# Then, in array usage
			$line =~ s/^(.*\$\{)$var(\[)/$1$var_obfus{$var}$2/;

      # Then, in unset statements
			$line =~ s/^(.*unset ['"])$var(\[)/$1$var_obfus{$var}$2/;

			# Then, in pre increment statements
			$line =~ s/^([ \t]*\({2} *[-+]{2})$var/$1$var_obfus{$var}/;

			# Then, in post increment statements
			$line =~ s/^([ \t]*\({2} *)$var([-+]{2})/$1$var_obfus{$var}$2/;

			while($line =~ m/([:+\- ]+)$var([:}+])/) {
        $line =~ s/([:+\- ]+)$var([:}+])/$1$var_obfus{$var}$2/;
      }

      # ${arr[i+1]}
			while($line =~ m/(\$\{[^}]+[[+\-])$var([]+\-][^}]*\})/) {
        $line =~ s/(\$\{[^}]+[[+\-])$var([]+\-][^}]*\})/$1$var_obfus{$var}$2/;
      }

			# General "$" usage while making sure we're not inside ''
			while ($line =~ m/^(([^\']*('[^']*')*[^']*)*)\$$var\W/) {
				$line =~ s/^((?:[^\']*(?:'[^']*')*[^']*)*)\$$var(\W)/$1\$$var_obfus{$var}$2/;
			}
			# Only allow a $var to be replaced between '' if they're already inside ""
			while ($line =~ m/^([^']*(('[^']*')*("[^"]")*)*"[^"]*)\$$var\W/) {
				$line =~ s/^([^']*(?:(?:'[^']*')*(?:"[^"]")*)*"[^"]*)\$$var(\W)/$1\$$var_obfus{$var}$2/;
			}
			# Special case ${var} usage while making sure we're not inside ''
			while ($line =~ m/^(([^']*('[^']*')*[^']*)*\$\{[!#]?)$var\W/) {
				$line =~ s/^((?:[^']*(?:'[^']*')*[^']*)*\$\{[!#]?)$var(\W)/$1$var_obfus{$var}$2/;
			}
			# Likewise, allow ${var} between '' only if we're already between ""
			while ($line =~ m/^([^']*(('[^']*')*("[^"]")*)*"[^"]*\$\{#?)$var\W/) {
				$line =~ s/^([^']*(?:(?:'[^']*')*(?:"[^"]")*)*"[^"]*\$\{#?)$var(\W)/$1$var_obfus{$var}$2/;
			}
      # [[|(( ${#var} 
      while ($line =~ m/([([]{2,2}[^)]*\$\{#?)$var([[:}])/) {
        $line =~ s/([([]{2,2}[^)]*\$\{#?)$var([[:}])/$1$var_obfus{$var}$2/;
      }
      # arithmetic context
      while ($line =~ m/(\(\([^)]*[\s;<>])$var([;\s<>])/) {
        $line =~ s/(\(\([^)]*[\s;<>])$var([;\s<>])/$1$var_obfus{$var}$2/;
      }
      while ($line =~ m/(\(\([^)]*[=+\-\s])$var([=+\-\s);\[])/) {
        $line =~ s/(\(\([^)]*[=+\-\s])$var([=+\-\s);\[])/$1$var_obfus{$var}$2/;
      }

		}
		# Print whatever got through the filters
		print $ofh $line
	}
	close $ifh;
	close $ofh;

	# aggressive 
	if ($aggressive) {
		# say "Aggressive mode";
		my $var = <<EOS;
		1,\${                                                   	# from second line to the end
			:loop                                               	# label for loop behavior
			N                                                   	# join next line with current, separating by \\n
      s/[\\]\\n//g
			s/\\(}\\|))\\|esac\\|done\\|fi\\)\\s*\\n/\\1;/g              	# line break to ';' on lines ending with '}', '))', 'esac','done' or 'fi'
			s/\\(do\\|{\\||\\|then\\|else\\)\\s*\\n/\\1 /g               	# line break to ' ' on lines ending with 'do', '{', '|', 'then' or 'else'
			s/\\n\\(function\\|while\\)/;\\1/g                       	# line break to ';' on lines starting with 'function' or 'while'
			s/;;;/\\n;;/g                                        	# fix ;;; bug
			s/\\(\\([^);]\\);\\?\\n\\(if\\|else\\|done\\|\\[\\)\\)/\\2;\\3/g  	# lines beginning by if, else, done or [ preceded by line break from lines not ending with ^,;,], should change \\n into ; 
			s/\\("[^"]\\+"\\)\\n/\\1;/g                              	# lines ending with open and closed ", change \\n into ;
			s/\\n\\([a-z][a-z0-9]*=.*\\)\\n/;\\1;/g                  	# var definition lines alone e.g. \\nvar=value\\n, change to ;var=value;
			s/expect { /expect {\\n/g
      s/\\(return[ ;0-9]*\\)\\n/\\1;/g                       # return with or without value and ending with ; or not
      s/\\(local [a-z0-9]+\\|>&[0-9]\\)\\n/\\1;/g                       # return with or without value and ending with ; or not
      s/\\([(]\\);/\\1/g
      s/\\n\\([.]\\|read\\|exec\\|return\\|echo\\|done\\|until\\|local\\|exit\\|if\\|fi\\|elif\\|else\\|[(!}[):]\\|mapfile\\|continue\\|declare\\|for\\|printf\\|[^);]+(;|\\n)\\)/;\\1/g
      s/\\([(]\\)\\n/\\1/g
      s/\\(continue\\|break\\|[")]\\|=1\\)\\n/\\1;/g
			b loop                                              	# repeat from loop label down
		}
EOS

		open(my $ofh, ">", 'sed_aggressive.txt');
		print $ofh $var;
		close $ofh;

		# apply 'aggressive' sed filters to output file
		system("sed -i -f sed_aggressive.txt $output_file; rm sed_aggressive.txt");
	}
}

my ($input_file,$output_file,$new_variable_prefix,$delete_blanks,$flatten,$aggressive)=&parse_cmd_args();
my @parsed_vars=&parse_vars_from_file($input_file);
my @sorted_vars = sort { length($b) <=> length($a) } @parsed_vars;
&obfuscate($input_file,$output_file,$new_variable_prefix,$delete_blanks,$flatten,$aggressive,@sorted_vars);