#!/usr/bin/env bash
# shellcheck disable=SC1091 disable=SC2034 disable=SC2046
set -euo pipefail

: "${PATH_BASE:="$(git rev-parse --show-toplevel)"}"
: "${MIN_COVERAGE:="70"}"
:

source "${PATH_BASE}/libraries/args.sh"
source "${PATH_BASE}/libraries/args.utils.sh"
source "${PATH_BASE}/libraries/binary.sh"
source "${PATH_BASE}/libraries/docker.sh"
# trap error::stacktrace EXIT

###
### docs
###
test::docs() {
  :args "Run tests for the documentation" "${@}"
  docker run --rm $(docker::user) node:21-alpine sh -c "
    cd /workspace/www
    [ -d node_modules ] || yarn --silent --frozen-lockfile
    yarn build
  "
}

lint::docs() {
  :args "Run linters for the documentation" "${@}"
  docker run --rm $(docker::user) node:21-alpine sh -c "
    cd /workspace/www
    [ -d node_modules ] || yarn --silent --frozen-lockfile
    yarn lint:content
    yarn lint
  "
}

lint::vale() {
  :args "Run vale for the documentation" "${@}"
  local alert_level="${vale?"need to specify alert level"}"
  binary::exists docker || exit 1
  docker run --rm $(docker::user) jdkato/vale:latest sh -c "
    cd /workspace/www/vale
    ./run-vale.sh docs content \"${alert_level}\"
  "
}

###
### argsh
###
generate::docs() {
  :args "Generate library documentation for docs" "${@}"
  argsh::main docs libraries www/apps/docs/content/libraries
}

minify::argsh() {
  :args "Minify argsh libraries" "${@}"
  argsh::main minify libraries -t argsh.min.tmpl
}

coverage::argsh() {
  :args "Generate coverage report for argsh" "${@}"
  argsh::main coverage libraries coverage --min "${MIN_COVERAGE}"
}

test::argsh() {
  local test_minify
  local -a args=(
    'test-minify|m:+' "Run tests for argsh.min.sh"
  )
  :args "Run tests for the arg.sh library" "${@}"
  ! (( test_minify )) || {
    BATS_LOAD="argsh.min.sh"
    export BATS_LOAD
  }
  argsh::main test libraries
}

lint::argsh() {
  local test_minify
  local -a args=(
    'test-minify|m:+' "Run tests for argsh.min.sh"
  )
  :args "Run linters for the arg.sh library" "${@}"
  if (( test_minify )); then
    argsh::main lint argsh.min.sh
  else
    argsh::main lint libraries
  fi
}

argsh::docker() {
  local tag="${1:-latest}"
  local -a args=(
    'tag|t' "Docker image tag"
  )
  :args "Build docker image for argsh" "${@}"
  docker build -t "ghcr.io/arg-sh/argsh:${tag}" -f "${PATH_BASE}/Dockerfile" "${PATH_BASE}"
}

###
### main
###
argsh::main() {
  local tty=""
  [[ -t 1 ]] && tty="-it"
  # shellcheck disable=SC2046
  docker run --rm ${tty} $(docker::user) \
    -e "BATS_LOAD" \
    -e "ARGSH_SOURCE" \
    -e "GIT_COMMIT_SHA=$(git rev-parse HEAD || :)" \
    -e "GIT_VERSION=$(git describe --tags --dirty || :)" \
    ghcr.io/arg-sh/argsh:latest "${@}" 
}

_main() {
  if [[ "${BASH_SOURCE[-1]}" != "${1:-}" && -f "${1:-}" ]]; then
    ARGSH_SOURCE="${1}"; shift
    # shellcheck source=/dev/null
    . "${ARGSH_SOURCE}"
    exit 0
  fi

  binary::exists docker || {
    echo "This script requires Docker to be installed"
    return 1
  } >&2

  local -a usage
  usage=(
    -                           "Commands argsh"
    'coverage:-coverage::argsh' "Generate coverage"
    'lint:-lint::argsh'         "Run linters"
    'test:-test::argsh'         "Run tests"
    'minify:-minify::argsh'     "Minify argsh libraries"
    -                           "Commands documentation"
    'generate:-generate::docs'  "Generate argsh library documentation"
    'docs-lint:-lint::docs'     "Run linters"
    'docs-test:-test::docs'     "Run tests"
    'vale:-lint::vale'          "Run vale tests"
    -                           "Additional commands"
    'docker:-argsh::docker'     "Build docker image"
  )
  :usage "Helper to manage this project" "${@}"
  "${usage[@]}"
}

[[ "${BASH_SOURCE[0]}" != "${0}" ]] || _main "${@}"